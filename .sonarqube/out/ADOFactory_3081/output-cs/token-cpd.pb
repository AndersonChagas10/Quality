¸ 
BC:\Users\Note-pc\Source\Repos\ddd.bitbucket2\ADOFactory\Factory.cs
	namespace		 	

ADOFactory		
 
{

 
public 

class 
Factory 
: 
IDisposable &
{ 
public 
SqlConnection 

connection '
;' (
private &
SqlConnectionStringBuilder *
connectionString+ ;
;; <
private &
SqlConnectionStringBuilder *
connectionString1+ <
;< =
public 
Factory 
( 
string 

dataSource (
,( )
string* 0
catalog1 8
,8 9
string: @
passwordA I
,I J
stringK Q
userR V
)V W
{ 	
connectionString 
= 
new "&
SqlConnectionStringBuilder# =
(= >
)> ?
;? @
connectionString 
. 

DataSource '
=( )

dataSource* 4
;4 5
connectionString 
. 
InitialCatalog +
=, -
catalog. 5
;5 6
connectionString 
. 
Password %
=& '
password( 0
;0 1
connectionString 
. 
UserID #
=$ %
user& *
;* +
try!! 
{"" 

connection## 
=## 
new##  
SqlConnection##! .
(##. /
)##/ 0
;##0 1
{$$ 

connection%% 
.%% 
ConnectionString%% /
=%%0 1
connectionString%%2 B
.%%B C
ConnectionString%%C S
;%%S T
}&& 

connection'' 
.'' 
Open'' 
(''  
)''  !
;''! "
}(( 
catch)) 
()) 
SqlException)) 
ex))  "
)))" #
{** 
closeConnection++ 
(++  
)++  !
;++! "
throw,, 
ex,, 
;,, 
}-- 
catch.. 
(.. 
	Exception.. 
ex.. 
)..  
{// 
closeConnection00 
(00  
)00  !
;00! "
throw11 
ex11 
;11 
}22 
}33 	
public99 
Factory99 
(99 
string99 '
connectionStringDoWebConfig99 9
)999 :
{:: 	
try;; 
{<< 
var== 
connectionString== $
===% & 
ConfigurationManager==' ;
.==; <
ConnectionStrings==< M
[==M N'
connectionStringDoWebConfig==N i
]==i j
.==j k
ConnectionString==k {
;=={ |

connection>> 
=>> 
new>>  
SqlConnection>>! .
(>>. /
)>>/ 0
;>>0 1

connection?? 
.?? 
ConnectionString?? +
=??, -
connectionString??. >
;??> ?

connection@@ 
.@@ 
Open@@ 
(@@  
)@@  !
;@@! "
}AA 
catchBB 
(BB 
SqlExceptionBB 
exBB  "
)BB" #
{CC 
closeConnectionDD 
(DD  
)DD  !
;DD! "
throwEE 
exEE 
;EE 
}FF 
catchGG 
(GG 
	ExceptionGG 
exGG 
)GG  
{HH 
closeConnectionII 
(II  
)II  !
;II! "
throwJJ 
exJJ 
;JJ 
}KK 
}LL 	
publicNN 
FactoryNN 
(NN &
SqlConnectionStringBuilderNN 1
connectionString1NN2 C
)NNC D
{OO 	
tryPP 
{QQ 
varRR 
connectionStringRR $
=RR% &
connectionString1RR' 8
.RR8 9
ConnectionStringRR9 I
;RRI J

connectionSS 
=SS 
newSS  
SqlConnectionSS! .
(SS. /
)SS/ 0
;SS0 1

connectionTT 
.TT 
ConnectionStringTT +
=TT, -
connectionStringTT. >
;TT> ?

connectionUU 
.UU 
OpenUU 
(UU  
)UU  !
;UU! "
}VV 
catchWW 
(WW 
SqlExceptionWW 
exWW  "
)WW" #
{XX 
closeConnectionYY 
(YY  
)YY  !
;YY! "
throwZZ 
exZZ 
;ZZ 
}[[ 
catch\\ 
(\\ 
	Exception\\ 
ex\\ 
)\\  
{]] 
closeConnection^^ 
(^^  
)^^  !
;^^! "
throw__ 
ex__ 
;__ 
}`` 
}aa 	
publicjj 
staticjj 
SqlConnectionjj #
GetConnectionjj$ 1
(jj1 2
stringjj2 8

dataSourcejj9 C
,jjC D
stringjjE K
catalogjjL S
,jjS T
stringjjU [
passwordjj\ d
,jjd e
stringjjf l
userjjm q
)jjq r
{kk 	
varll 
connectionStringll  
=ll! "
newll# &&
SqlConnectionStringBuilderll' A
(llA B
)llB C
;llC D
connectionStringmm 
.mm 

DataSourcemm '
=mm( )

dataSourcemm* 4
;mm4 5
connectionStringnn 
.nn 
InitialCatalognn +
=nn, -
catalognn. 5
;nn5 6
connectionStringoo 
.oo 
Passwordoo %
=oo& '
passwordoo( 0
;oo0 1
connectionStringpp 
.pp 
UserIDpp #
=pp$ %
userpp& *
;pp* +
tryrr 
{ss 
vartt 

connectiontt 
=tt  
newtt! $
SqlConnectiontt% 2
(tt2 3
)tt3 4
;tt4 5
{uu 

connectionvv 
.vv 
ConnectionStringvv /
=vv0 1
connectionStringvv2 B
.vvB C
ConnectionStringvvC S
;vvS T
}ww 

connectionxx 
.xx 
Openxx 
(xx  
)xx  !
;xx! "
returnyy 

connectionyy !
;yy! "
}zz 
catch{{ 
({{ 
SqlException{{ 
ex{{  "
){{" #
{|| 
throw}} 
ex}} 
;}} 
}~~ 
catch 
( 
	Exception 
ex 
)  
{
ÄÄ 
throw
ÅÅ 
ex
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 	
public
ÖÖ 
List
ÖÖ 
<
ÖÖ 
T
ÖÖ 
>
ÖÖ 
SearchQuery
ÖÖ "
<
ÖÖ" #
T
ÖÖ# $
>
ÖÖ$ %
(
ÖÖ% &
string
ÖÖ& ,
query
ÖÖ- 2
)
ÖÖ2 3
{
ÜÜ 	
try
áá 
{
àà 
var
ââ 

listReturn
ââ 
=
ââ  
new
ââ! $
List
ââ% )
<
ââ) *
T
ââ* +
>
ââ+ ,
(
ââ, -
)
ââ- .
;
ââ. /

SqlCommand
ãã 
command
ãã "
=
ãã# $
new
ãã% (

SqlCommand
ãã) 3
(
ãã3 4
query
ãã4 9
,
ãã9 :

connection
ãã; E
)
ããE F
;
ããF G
using
åå 
(
åå 
SqlDataReader
åå $
reader
åå% +
=
åå, -
command
åå. 5
.
åå5 6
ExecuteReader
åå6 C
(
ååC D
)
ååD E
)
ååE F
{
çç 
while
éé 
(
éé 
reader
éé !
.
éé! "
Read
éé" &
(
éé& '
)
éé' (
)
éé( )
{
èè 
object
ëë 
instance
ëë '
=
ëë( )
	Activator
ëë* 3
.
ëë3 4
CreateInstance
ëë4 B
(
ëëB C
typeof
ëëC I
(
ëëI J
T
ëëJ K
)
ëëK L
)
ëëL M
;
ëëM N
for
ìì 
(
ìì 
int
ìì  
i
ìì! "
=
ìì# $
$num
ìì% &
;
ìì& '
i
ìì( )
<
ìì* +
reader
ìì, 2
.
ìì2 3

FieldCount
ìì3 =
;
ìì= >
i
ìì? @
++
ìì@ B
)
ììB C
{
îî 
try
ïï 
{
ññ 
if
óó  "
(
óó# $
!
óó$ %
reader
óó% +
.
óó+ ,
IsDBNull
óó, 4
(
óó4 5
i
óó5 6
)
óó6 7
)
óó7 8
if
òò$ &
(
òò' (
instance
òò( 0
.
òò0 1
GetType
òò1 8
(
òò8 9
)
òò9 :
.
òò: ;
GetProperty
òò; F
(
òòF G
reader
òòG M
.
òòM N
GetName
òòN U
(
òòU V
i
òòV W
)
òòW X
)
òòX Y
!=
òòZ \
null
òò] a
)
òòa b
instance
ôô( 0
.
ôô0 1
GetType
ôô1 8
(
ôô8 9
)
ôô9 :
.
ôô: ;
GetProperty
ôô; F
(
ôôF G
reader
ôôG M
.
ôôM N
GetName
ôôN U
(
ôôU V
i
ôôV W
)
ôôW X
)
ôôX Y
.
ôôY Z
SetValue
ôôZ b
(
ôôb c
instance
ôôc k
,
ôôk l
reader
ôôm s
[
ôôs t
i
ôôt u
]
ôôu v
)
ôôv w
;
ôôw x
}
öö 
catch
õõ !
(
õõ" #
	Exception
õõ# ,
e
õõ- .
)
õõ. /
{
úú 
throw
ùù  %
e
ùù& '
;
ùù' (
}
ûû 
}
üü 

listReturn
†† "
.
††" #
Add
††# &
(
††& '
(
††' (
T
††( )
)
††) *
instance
††* 2
)
††2 3
;
††3 4
}
°° 
}
¢¢ 
return
££ 

listReturn
££ !
;
££! "
}
§§ 
catch
•• 
(
•• 
	Exception
•• 
e
•• 
)
•• 
{
¶¶ 
closeConnection
ßß 
(
ßß  
)
ßß  !
;
ßß! "
throw
®® 
e
®® 
;
®® 
}
©© 
}
´´ 	
public
≠≠ 
List
≠≠ 
<
≠≠ 
JObject
≠≠ 
>
≠≠ 
QueryNinjaADO
≠≠ *
(
≠≠* +
string
≠≠+ 1
query
≠≠2 7
)
≠≠7 8
{
ÆÆ 	
List
ØØ 
<
ØØ 
JObject
ØØ 
>
ØØ 
items
ØØ 
=
ØØ  !
new
ØØ" %
List
ØØ& *
<
ØØ* +
JObject
ØØ+ 2
>
ØØ2 3
(
ØØ3 4
)
ØØ4 5
;
ØØ5 6

SqlCommand
∞∞ 
command
∞∞ 
=
∞∞  
new
∞∞! $

SqlCommand
∞∞% /
(
∞∞/ 0
query
∞∞0 5
,
∞∞5 6

connection
∞∞7 A
)
∞∞A B
;
∞∞B C
using
±± 
(
±± 
SqlDataReader
±±  
reader
±±! '
=
±±( )
command
±±* 1
.
±±1 2
ExecuteReader
±±2 ?
(
±±? @
)
±±@ A
)
±±A B
{
≤≤ 
while
≥≥ 
(
≥≥ 
reader
≥≥ 
.
≥≥ 
Read
≥≥ "
(
≥≥" #
)
≥≥# $
)
≥≥$ %
{
¥¥ 
JObject
µµ 
row
µµ 
=
µµ  !
new
µµ" %
JObject
µµ& -
(
µµ- .
)
µµ. /
;
µµ/ 0
for
∂∂ 
(
∂∂ 
int
∂∂ 
i
∂∂ 
=
∂∂  
$num
∂∂! "
;
∂∂" #
i
∂∂$ %
<
∂∂& '
reader
∂∂( .
.
∂∂. /

FieldCount
∂∂/ 9
;
∂∂9 :
i
∂∂; <
++
∂∂< >
)
∂∂> ?
row
∑∑ 
[
∑∑ 
reader
∑∑ "
.
∑∑" #
GetName
∑∑# *
(
∑∑* +
i
∑∑+ ,
)
∑∑, -
]
∑∑- .
=
∑∑/ 0
reader
∑∑1 7
[
∑∑7 8
i
∑∑8 9
]
∑∑9 :
.
∑∑: ;
ToString
∑∑; C
(
∑∑C D
)
∑∑D E
;
∑∑E F
items
ππ 
.
ππ 
Add
ππ 
(
ππ 
row
ππ !
)
ππ! "
;
ππ" #
}
∫∫ 
}
ªª 
return
ºº 
items
ºº 
;
ºº 
}
ΩΩ 	
public
øø 
int
øø 
InsertUpdateData
øø #
(
øø# $

SqlCommand
øø$ .
cmd
øø/ 2
)
øø2 3
{
¿¿ 	
cmd
¬¬ 
.
¬¬ 
CommandType
¬¬ 
=
¬¬ 
CommandType
¬¬ )
.
¬¬) *
Text
¬¬* .
;
¬¬. /
cmd
√√ 
.
√√ 

Connection
√√ 
=
√√ 

connection
√√ '
;
√√' (
try
ƒƒ 
{
≈≈ 
int
∆∆ 
newID
∆∆ 
;
∆∆ 
newID
«« 
=
«« 
(
«« 
int
«« 
)
«« 
cmd
««  
.
««  !
ExecuteScalar
««! .
(
««. /
)
««/ 0
;
««0 1
return
»» 
newID
»» 
;
»» 
}
…… 
catch
   
(
   
	Exception
   
ex
   
)
    
{
ÀÀ 
throw
ÕÕ 
ex
ÕÕ 
;
ÕÕ 
}
ŒŒ 
finally
œœ 
{
–– 

connection
—— 
.
—— 
Close
——  
(
——  !
)
——! "
;
——" #

connection
““ 
.
““ 
Dispose
““ "
(
““" #
)
““# $
;
““$ %
}
”” 
}
‘‘ 	
public
÷÷ 
T
÷÷ 
InsertUpdateData
÷÷ !
<
÷÷! "
T
÷÷" #
>
÷÷# $
(
÷÷$ %
T
÷÷% &
obj
÷÷' *
)
÷÷* +
{
◊◊ 	

SqlCommand
ÿÿ 
cmd
ÿÿ 
=
ÿÿ 
GetQuery
ÿÿ %
(
ÿÿ% &
obj
ÿÿ& )
)
ÿÿ) *
;
ÿÿ* +
cmd
€€ 
.
€€ 
CommandType
€€ 
=
€€ 
CommandType
€€ )
.
€€) *
Text
€€* .
;
€€. /
cmd
‹‹ 
.
‹‹ 

Connection
‹‹ 
=
‹‹ 

connection
‹‹ '
;
‹‹' (
try
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
obj
ﬂﬂ 
.
ﬂﬂ 
GetType
ﬂﬂ 
(
ﬂﬂ  
)
ﬂﬂ  !
.
ﬂﬂ! "
GetProperty
ﬂﬂ" -
(
ﬂﬂ- .
$str
ﬂﬂ. 2
)
ﬂﬂ2 3
!=
ﬂﬂ4 6
null
ﬂﬂ7 ;
)
ﬂﬂ; <
{
‡‡ 
var
·· 
id
·· 
=
·· 
(
·· 
int
·· !
)
··! "
obj
··" %
.
··% &
GetType
··& -
(
··- .
)
··. /
.
··/ 0
GetProperty
··0 ;
(
··; <
$str
··< @
)
··@ A
.
··A B
GetValue
··B J
(
··J K
obj
··K N
,
··N O
null
··P T
)
··T U
;
··U V
if
‚‚ 
(
‚‚ 
id
‚‚ 
>
‚‚ 
$num
‚‚ 
)
‚‚ 
cmd
„„ 
.
„„ 
ExecuteNonQuery
„„ +
(
„„+ ,
)
„„, -
;
„„- .
else
‰‰ 
{
ÂÂ 
int
ÊÊ 
newID
ÊÊ !
;
ÊÊ! "
newID
ÁÁ 
=
ÁÁ 
(
ÁÁ  !
int
ÁÁ! $
)
ÁÁ$ %
cmd
ÁÁ% (
.
ÁÁ( )
ExecuteScalar
ÁÁ) 6
(
ÁÁ6 7
)
ÁÁ7 8
;
ÁÁ8 9
obj
ËË 
.
ËË 
GetType
ËË #
(
ËË# $
)
ËË$ %
.
ËË% &
GetProperty
ËË& 1
(
ËË1 2
$str
ËË2 6
)
ËË6 7
.
ËË7 8
SetValue
ËË8 @
(
ËË@ A
obj
ËËA D
,
ËËD E
newID
ËËF K
)
ËËK L
;
ËËL M
}
ÈÈ 
}
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
throw
ÔÔ 
ex
ÔÔ 
;
ÔÔ 
}
 
finally
ÒÒ 
{
ÚÚ 

connection
ÛÛ 
.
ÛÛ 
Close
ÛÛ  
(
ÛÛ  !
)
ÛÛ! "
;
ÛÛ" #

connection
ÙÙ 
.
ÙÙ 
Dispose
ÙÙ "
(
ÙÙ" #
)
ÙÙ# $
;
ÙÙ$ %
}
ıı 
return
˜˜ 
obj
˜˜ 
;
˜˜ 
}
¯¯ 	
private
˙˙ 
static
˙˙ 

SqlCommand
˙˙ !
GetQuery
˙˙" *
<
˙˙* +
T
˙˙+ ,
>
˙˙, -
(
˙˙- .
T
˙˙. /
obj
˙˙0 3
)
˙˙3 4
{
˚˚ 	

SqlCommand
¸¸ 
cmd
¸¸ 
=
¸¸ 
new
¸¸  

SqlCommand
¸¸! +
(
¸¸+ ,
)
¸¸, -
;
¸¸- .
if
˛˛ 
(
˛˛ 
obj
˛˛ 
.
˛˛ 
GetType
˛˛ 
(
˛˛ 
)
˛˛ 
.
˛˛ 
GetProperty
˛˛ )
(
˛˛) *
$str
˛˛* .
)
˛˛. /
!=
˛˛0 2
null
˛˛3 7
)
˛˛7 8
{
ˇˇ 
var
ÄÄ 
id
ÄÄ 
=
ÄÄ 
(
ÄÄ 
int
ÄÄ 
)
ÄÄ 
obj
ÄÄ !
.
ÄÄ! "
GetType
ÄÄ" )
(
ÄÄ) *
)
ÄÄ* +
.
ÄÄ+ ,
GetProperty
ÄÄ, 7
(
ÄÄ7 8
$str
ÄÄ8 <
)
ÄÄ< =
.
ÄÄ= >
GetValue
ÄÄ> F
(
ÄÄF G
obj
ÄÄG J
,
ÄÄJ K
null
ÄÄL P
)
ÄÄP Q
;
ÄÄQ R
if
ÅÅ 
(
ÅÅ 
id
ÅÅ 
>
ÅÅ 
$num
ÅÅ 
)
ÅÅ 
cmd
ÇÇ 
=
ÇÇ 
UpdateQuery
ÇÇ %
(
ÇÇ% &
obj
ÇÇ& )
,
ÇÇ) *
id
ÇÇ+ -
)
ÇÇ- .
;
ÇÇ. /
else
ÉÉ 
cmd
ÑÑ 
=
ÑÑ 
InsertQuery
ÑÑ %
(
ÑÑ% &
obj
ÑÑ& )
)
ÑÑ) *
;
ÑÑ* +
}
ÖÖ 
return
áá 
cmd
áá 
;
áá 
}
àà 	
private
ää 
static
ää 

SqlCommand
ää !
UpdateQuery
ää" -
<
ää- .
T
ää. /
>
ää/ 0
(
ää0 1
T
ää1 2
obj
ää3 6
,
ää6 7
int
ää8 ;
id
ää< >
)
ää> ?
{
ãã 	
var
çç 
query
çç 
=
çç 
$str
çç !
+
çç" #
obj
çç$ '
.
çç' (
GetType
çç( /
(
çç/ 0
)
çç0 1
.
çç1 2
Name
çç2 6
;
çç6 7
var
éé 

queryProps
éé 
=
éé 
$str
éé $
;
éé$ %
foreach
êê 
(
êê 
var
êê 
item
êê 
in
êê  
obj
êê! $
.
êê$ %
GetType
êê% ,
(
êê, -
)
êê- .
.
êê. /
GetProperties
êê/ <
(
êê< =
)
êê= >
)
êê> ?
{
ëë 
if
íí 
(
íí 
item
íí( ,
.
íí, -
Name
íí- 1
!=
íí2 4
$str
íí5 9
&&
íí: <
item
íí= A
.
ííA B
Name
ííB F
!=
ííG I
$str
ííJ S
&&
ííT V
item
ííW [
.
íí[ \
Name
íí\ `
!=
íía c
$str
ííd o
&&
ííp r
!
íís t
item
íít x
.
ííx y
Name
ííy }
.
íí} ~

StartsWithíí~ à
(ííà â
$strííâ å
)ííå ç
)ííç é
{
ìì 
if
õõ 
(
õõ 
item
õõ 
.
õõ 
PropertyType
õõ )
.
õõ) *
IsClass
õõ* 1
&&
õõ2 4
item
õõ5 9
.
õõ9 :
PropertyType
õõ: F
.
õõF G
Name
õõG K
!=
õõL N
$str
õõO W
)
õõW X
continue
úú  
;
úú  !

queryProps
ûû 
+=
ûû !
$str
ûû" '
+
ûû( )
item
ûû* .
.
ûû. /
Name
ûû/ 3
+
ûû4 5
$str
ûû6 <
+
ûû= >
item
ûû? C
.
ûûC D
Name
ûûD H
+
ûûI J
$str
ûûK O
;
ûûO P
}
üü 
}
†† 
var
¢¢ 

queryDebug
¢¢ 
=
¢¢ 
$str
¢¢ &
+
¢¢' (
obj
¢¢) ,
.
¢¢, -
GetType
¢¢- 4
(
¢¢4 5
)
¢¢5 6
.
¢¢6 7
Name
¢¢7 ;
;
¢¢; <
var
££ 
queryPropsDebug
££ 
=
££  !
$str
££" )
;
££) *
foreach
•• 
(
•• 
var
•• 
item
•• 
in
••  
obj
••! $
.
••$ %
GetType
••% ,
(
••, -
)
••- .
.
••. /
GetProperties
••/ <
(
••< =
)
••= >
)
••> ?
{
¶¶ 
if
ßß 
(
ßß 
item
ßß( ,
.
ßß, -
Name
ßß- 1
!=
ßß2 4
$str
ßß5 9
&&
ßß: <
item
ßß= A
.
ßßA B
Name
ßßB F
!=
ßßG I
$str
ßßJ S
&&
ßßT V
item
ßßW [
.
ßß[ \
Name
ßß\ `
!=
ßßa c
$str
ßßd o
&&
ßßp r
!
ßßs t
item
ßßt x
.
ßßx y
Name
ßßy }
.
ßß} ~

StartsWithßß~ à
(ßßà â
$strßßâ å
)ßßå ç
)ßßç é
{
®® 
if
∞∞ 
(
∞∞ 
item
∞∞ 
.
∞∞ 
PropertyType
∞∞ )
.
∞∞) *
IsClass
∞∞* 1
&&
∞∞2 4
item
∞∞5 9
.
∞∞9 :
PropertyType
∞∞: F
.
∞∞F G
Name
∞∞G K
!=
∞∞L N
$str
∞∞O W
)
∞∞W X
continue
±±  
;
±±  !
queryPropsDebug
≥≥ #
+=
≥≥$ &
$str
≥≥' ,
+
≥≥- .
item
≥≥/ 3
.
≥≥3 4
Name
≥≥4 8
+
≥≥9 :
$str
≥≥; @
+
≥≥A B
(
≥≥C D
obj
≥≥D G
.
≥≥G H
GetType
≥≥H O
(
≥≥O P
)
≥≥P Q
.
≥≥Q R
GetProperty
≥≥R ]
(
≥≥] ^
item
≥≥^ b
.
≥≥b c
Name
≥≥c g
)
≥≥g h
.
≥≥h i
GetValue
≥≥i q
(
≥≥q r
obj
≥≥r u
)
≥≥u v
==
≥≥w y
null
≥≥z ~
?≥≥ Ä
$str≥≥Å á
:≥≥à â
item≥≥ä é
.≥≥é è
GetValue≥≥è ó
(≥≥ó ò
obj≥≥ò õ
)≥≥õ ú
)≥≥ú ù
+≥≥û ü
$str≥≥† §
;≥≥§ •
}
¥¥ 
}
µµ 
var
∑∑ 
resultDebug
∑∑ 
=
∑∑ 

queryDebug
∑∑ (
+
∑∑) *
queryPropsDebug
∑∑+ :
;
∑∑: ;

queryProps
ππ 
=
ππ 

queryProps
ππ #
.
ππ# $
	Substring
ππ$ -
(
ππ- .
$num
ππ. /
,
ππ/ 0

queryProps
ππ1 ;
.
ππ; <
LastIndexOf
ππ< G
(
ππG H
$str
ππH L
)
ππL M
)
ππM N
+
ππO P
$str
ππQ V
;
ππV W
query
ªª 
+=
ªª 

queryProps
ªª 
;
ªª  
query
ºº 
+=
ºº 
$str
ºº #
+
ºº$ %
id
ºº& (
;
ºº( )
query
ΩΩ 
+=
ΩΩ 
$str
ΩΩ ?
;
ΩΩ? @

SqlCommand
øø 
cmd
øø 
;
øø 
cmd
¿¿ 
=
¿¿ 
new
¿¿ 

SqlCommand
¿¿  
(
¿¿  !
query
¿¿! &
)
¿¿& '
;
¿¿' (
var
¡¡ 
pqp
¡¡ 
=
¡¡ 
string
¡¡ 
.
¡¡ 
Empty
¡¡ "
;
¡¡" #
foreach
¬¬ 
(
¬¬ 
var
¬¬ 
item
¬¬ 
in
¬¬  
obj
¬¬! $
.
¬¬$ %
GetType
¬¬% ,
(
¬¬, -
)
¬¬- .
.
¬¬. /
GetProperties
¬¬/ <
(
¬¬< =
)
¬¬= >
)
¬¬> ?
{
√√ 
if
ƒƒ 
(
ƒƒ 
item
ƒƒ( ,
.
ƒƒ, -
Name
ƒƒ- 1
!=
ƒƒ2 4
$str
ƒƒ5 9
&&
ƒƒ: <
item
ƒƒ= A
.
ƒƒA B
Name
ƒƒB F
!=
ƒƒG I
$str
ƒƒJ S
&&
ƒƒT V
item
ƒƒW [
.
ƒƒ[ \
Name
ƒƒ\ `
!=
ƒƒa c
$str
ƒƒd o
)
ƒƒo p
{
≈≈ 
if
∆∆ 
(
∆∆ 
item
∆∆ 
.
∆∆ 
PropertyType
∆∆ )
.
∆∆) *
Name
∆∆* .
==
∆∆/ 1
$str
∆∆2 :
)
∆∆: ;
if
«« 
(
«« 
string
«« "
.
««" #
IsNullOrEmpty
««# 0
(
««0 1
obj
««1 4
.
««4 5
GetType
««5 <
(
««< =
)
««= >
.
««> ?
GetProperty
««? J
(
««J K
item
««K O
.
««O P
Name
««P T
)
««T U
.
««U V
GetValue
««V ^
(
««^ _
obj
««_ b
)
««b c
as
««d f
string
««g m
)
««m n
)
««n o
{
»» 
cmd
…… 
.
……  

Parameters
……  *
.
……* +
AddWithValue
……+ 7
(
……7 8
$str
……8 ;
+
……< =
item
……> B
.
……B C
Name
……C G
,
……G H
$str
……I K
)
……K L
;
……L M
continue
   $
;
  $ %
}
ÀÀ 
if
ÕÕ 
(
ÕÕ 
obj
ÕÕ 
.
ÕÕ 
GetType
ÕÕ #
(
ÕÕ# $
)
ÕÕ$ %
.
ÕÕ% &
GetProperty
ÕÕ& 1
(
ÕÕ1 2
item
ÕÕ2 6
.
ÕÕ6 7
Name
ÕÕ7 ;
)
ÕÕ; <
.
ÕÕ< =
GetValue
ÕÕ= E
(
ÕÕE F
obj
ÕÕF I
)
ÕÕI J
==
ÕÕK M
null
ÕÕN R
)
ÕÕR S
{
ŒŒ 
cmd
–– 
.
–– 

Parameters
–– &
.
––& '
AddWithValue
––' 3
(
––3 4
$str
––4 7
+
––8 9
item
––: >
.
––> ?
Name
––? C
,
––C D
obj
––E H
.
––H I
GetType
––I P
(
––P Q
)
––Q R
.
––R S
GetProperty
––S ^
(
––^ _
item
––_ c
.
––c d
Name
––d h
)
––h i
.
––i j
GetValue
––j r
(
––r s
obj
––s v
)
––v w
)
––w x
;
––x y
pqp
—— 
+=
—— 
$str
—— "
+
——# $
item
——% )
.
——) *
Name
——* .
+
——/ 0
$str
——1 6
+
——7 8
obj
——9 <
.
——< =
GetType
——= D
(
——D E
)
——E F
.
——F G
GetProperty
——G R
(
——R S
item
——S W
.
——W X
Name
——X \
)
——\ ]
.
——] ^
GetValue
——^ f
(
——f g
obj
——g j
)
——j k
;
——k l
continue
““  
;
““  !
}
”” 
if
÷÷ 
(
÷÷ 
item
÷÷ 
.
÷÷ 
PropertyType
÷÷ )
.
÷÷) *
IsClass
÷÷* 1
&&
÷÷2 4
item
÷÷5 9
.
÷÷9 :
PropertyType
÷÷: F
.
÷÷F G
Name
÷÷G K
!=
÷÷L N
$str
÷÷O W
)
÷÷W X
continue
◊◊  
;
◊◊  !
cmd
ŸŸ 
.
ŸŸ 

Parameters
ŸŸ "
.
ŸŸ" #
AddWithValue
ŸŸ# /
(
ŸŸ/ 0
$str
ŸŸ0 3
+
ŸŸ4 5
item
ŸŸ6 :
.
ŸŸ: ;
Name
ŸŸ; ?
,
ŸŸ? @
obj
ŸŸA D
.
ŸŸD E
GetType
ŸŸE L
(
ŸŸL M
)
ŸŸM N
.
ŸŸN O
GetProperty
ŸŸO Z
(
ŸŸZ [
item
ŸŸ[ _
.
ŸŸ_ `
Name
ŸŸ` d
)
ŸŸd e
.
ŸŸe f
GetValue
ŸŸf n
(
ŸŸn o
obj
ŸŸo r
)
ŸŸr s
)
ŸŸs t
;
ŸŸt u
pqp
⁄⁄ 
+=
⁄⁄ 
$str
⁄⁄ 
+
⁄⁄  
item
⁄⁄! %
.
⁄⁄% &
Name
⁄⁄& *
+
⁄⁄+ ,
$str
⁄⁄- 2
+
⁄⁄3 4
obj
⁄⁄5 8
.
⁄⁄8 9
GetType
⁄⁄9 @
(
⁄⁄@ A
)
⁄⁄A B
.
⁄⁄B C
GetProperty
⁄⁄C N
(
⁄⁄N O
item
⁄⁄O S
.
⁄⁄S T
Name
⁄⁄T X
)
⁄⁄X Y
.
⁄⁄Y Z
GetValue
⁄⁄Z b
(
⁄⁄b c
obj
⁄⁄c f
)
⁄⁄f g
;
⁄⁄g h
}
‹‹ 
}
›› 
return
ﬂﬂ 
cmd
ﬂﬂ 
;
ﬂﬂ 
}
·· 	
private
„„ 
static
„„ 

SqlCommand
„„ !
InsertQuery
„„" -
<
„„- .
T
„„. /
>
„„/ 0
(
„„0 1
T
„„1 2
obj
„„3 6
)
„„6 7
{
‰‰ 	
var
ÂÂ 
query
ÂÂ 
=
ÂÂ 
$str
ÂÂ &
+
ÂÂ' (
obj
ÂÂ) ,
.
ÂÂ, -
GetType
ÂÂ- 4
(
ÂÂ4 5
)
ÂÂ5 6
.
ÂÂ6 7
Name
ÂÂ7 ;
;
ÂÂ; <
var
ÊÊ 

queryProps
ÊÊ 
=
ÊÊ 
$str
ÊÊ  
;
ÊÊ  !
var
ÁÁ 
queryValues
ÁÁ 
=
ÁÁ 
$str
ÁÁ )
;
ÁÁ) *
foreach
ÈÈ 
(
ÈÈ 
var
ÈÈ 
item
ÈÈ 
in
ÈÈ  
obj
ÈÈ! $
.
ÈÈ$ %
GetType
ÈÈ% ,
(
ÈÈ, -
)
ÈÈ- .
.
ÈÈ. /
GetProperties
ÈÈ/ <
(
ÈÈ< =
)
ÈÈ= >
)
ÈÈ> ?
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
item
ÎÎ 
!=
ÎÎ 
null
ÎÎ  
&&
ÎÎ! #
item
ÎÎ$ (
.
ÎÎ( )
Name
ÎÎ) -
!=
ÎÎ. 0
$str
ÎÎ1 5
&&
ÎÎ6 8
item
ÎÎ9 =
.
ÎÎ= >
Name
ÎÎ> B
!=
ÎÎC E
$str
ÎÎF O
&&
ÎÎP R
item
ÎÎS W
.
ÎÎW X
Name
ÎÎX \
!=
ÎÎ] _
$str
ÎÎ` k
&&
ÎÎl n
!
ÎÎo p
item
ÎÎp t
.
ÎÎt u
Name
ÎÎu y
.
ÎÎy z

StartsWithÎÎz Ñ
(ÎÎÑ Ö
$strÎÎÖ à
)ÎÎà â
)ÎÎâ ä
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
obj
ÌÌ 
.
ÌÌ 
GetType
ÌÌ #
(
ÌÌ# $
)
ÌÌ$ %
.
ÌÌ% &
GetProperty
ÌÌ& 1
(
ÌÌ1 2
item
ÌÌ2 6
.
ÌÌ6 7
Name
ÌÌ7 ;
)
ÌÌ; <
.
ÌÌ< =
GetValue
ÌÌ= E
(
ÌÌE F
obj
ÌÌF I
)
ÌÌI J
==
ÌÌK M
null
ÌÌN R
)
ÌÌR S
continue
ÓÓ  
;
ÓÓ  !
if
 
(
 
item
 
.
 
PropertyType
 )
.
) *
Name
* .
==
/ 1
$str
2 :
)
: ;
if
ÒÒ 
(
ÒÒ 
string
ÒÒ "
.
ÒÒ" #
IsNullOrEmpty
ÒÒ# 0
(
ÒÒ0 1
obj
ÒÒ1 4
.
ÒÒ4 5
GetType
ÒÒ5 <
(
ÒÒ< =
)
ÒÒ= >
.
ÒÒ> ?
GetProperty
ÒÒ? J
(
ÒÒJ K
item
ÒÒK O
.
ÒÒO P
Name
ÒÒP T
)
ÒÒT U
.
ÒÒU V
GetValue
ÒÒV ^
(
ÒÒ^ _
obj
ÒÒ_ b
)
ÒÒb c
as
ÒÒd f
string
ÒÒg m
)
ÒÒm n
)
ÒÒn o
continue
ÚÚ $
;
ÚÚ$ %
if
ÙÙ 
(
ÙÙ 
item
ÙÙ 
.
ÙÙ 
PropertyType
ÙÙ )
.
ÙÙ) *
IsClass
ÙÙ* 1
&&
ÙÙ2 4
item
ÙÙ5 9
.
ÙÙ9 :
PropertyType
ÙÙ: F
.
ÙÙF G
Name
ÙÙG K
!=
ÙÙL N
$str
ÙÙO W
)
ÙÙW X
continue
ıı  
;
ıı  !

queryProps
˜˜ 
+=
˜˜ !
$str
˜˜" '
+
˜˜( )
item
˜˜* .
.
˜˜. /
Name
˜˜/ 3
+
˜˜4 5
$str
˜˜6 :
;
˜˜: ;
queryValues
¯¯ 
+=
¯¯  "
$str
¯¯# )
+
¯¯* +
item
¯¯, 0
.
¯¯0 1
Name
¯¯1 5
+
¯¯6 7
$str
¯¯8 <
;
¯¯< =
}
˘˘ 
}
˙˙ 

queryProps
¸¸ 
=
¸¸ 

queryProps
¸¸ #
.
¸¸# $
	Substring
¸¸$ -
(
¸¸- .
$num
¸¸. /
,
¸¸/ 0

queryProps
¸¸1 ;
.
¸¸; <
LastIndexOf
¸¸< G
(
¸¸G H
$str
¸¸H L
)
¸¸L M
)
¸¸M N
+
¸¸O P
$str
¸¸Q W
;
¸¸W X
queryValues
˝˝ 
=
˝˝ 
queryValues
˝˝ %
.
˝˝% &
	Substring
˝˝& /
(
˝˝/ 0
$num
˝˝0 1
,
˝˝1 2
queryValues
˝˝3 >
.
˝˝> ?
LastIndexOf
˝˝? J
(
˝˝J K
$str
˝˝K O
)
˝˝O P
)
˝˝P Q
+
˝˝R S
$str
˝˝T Z
;
˝˝Z [
query
ˇˇ 
+=
ˇˇ 

queryProps
ˇˇ 
;
ˇˇ  
query
ÄÄ 
+=
ÄÄ 
queryValues
ÄÄ  
;
ÄÄ  !
query
ÅÅ 
+=
ÅÅ 
$str
ÅÅ ?
;
ÅÅ? @

SqlCommand
ÉÉ 
cmd
ÉÉ 
;
ÉÉ 
cmd
ÑÑ 
=
ÑÑ 
new
ÑÑ 

SqlCommand
ÑÑ  
(
ÑÑ  !
query
ÑÑ! &
)
ÑÑ& '
;
ÑÑ' (
foreach
ÜÜ 
(
ÜÜ 
var
ÜÜ 
item
ÜÜ 
in
ÜÜ  
obj
ÜÜ! $
.
ÜÜ$ %
GetType
ÜÜ% ,
(
ÜÜ, -
)
ÜÜ- .
.
ÜÜ. /
GetProperties
ÜÜ/ <
(
ÜÜ< =
)
ÜÜ= >
)
ÜÜ> ?
{
áá 
if
àà 
(
àà 
item
àà 
!=
àà 
null
àà  
&&
àà! #
item
àà$ (
.
àà( )
Name
àà) -
!=
àà. 0
$str
àà1 5
&&
àà6 8
item
àà9 =
.
àà= >
Name
àà> B
!=
ààC E
$str
ààF O
&&
ààP R
item
ààS W
.
ààW X
Name
ààX \
!=
àà] _
$str
àà` k
)
ààk l
{
ââ 
if
ää 
(
ää 
obj
ää 
.
ää 
GetType
ää #
(
ää# $
)
ää$ %
.
ää% &
GetProperty
ää& 1
(
ää1 2
item
ää2 6
.
ää6 7
Name
ää7 ;
)
ää; <
.
ää< =
GetValue
ää= E
(
ääE F
obj
ääF I
)
ääI J
==
ääK M
null
ääN R
)
ääR S
continue
ãã  
;
ãã  !
if
çç 
(
çç 
item
çç 
.
çç 
PropertyType
çç )
.
çç) *
Name
çç* .
==
çç/ 1
$str
çç2 :
)
çç: ;
if
éé 
(
éé 
string
éé "
.
éé" #
IsNullOrEmpty
éé# 0
(
éé0 1
obj
éé1 4
.
éé4 5
GetType
éé5 <
(
éé< =
)
éé= >
.
éé> ?
GetProperty
éé? J
(
ééJ K
item
ééK O
.
ééO P
Name
ééP T
)
ééT U
.
ééU V
GetValue
ééV ^
(
éé^ _
obj
éé_ b
)
ééb c
as
ééd f
string
éég m
)
éém n
)
één o
continue
èè $
;
èè$ %
if
ëë 
(
ëë 
item
ëë 
.
ëë 
PropertyType
ëë )
.
ëë) *
IsClass
ëë* 1
&&
ëë2 4
item
ëë5 9
.
ëë9 :
PropertyType
ëë: F
.
ëëF G
Name
ëëG K
!=
ëëL N
$str
ëëO W
)
ëëW X
continue
íí  
;
íí  !
cmd
îî 
.
îî 

Parameters
îî "
.
îî" #
AddWithValue
îî# /
(
îî/ 0
$str
îî0 3
+
îî4 5
item
îî6 :
.
îî: ;
Name
îî; ?
,
îî? @
obj
îîA D
.
îîD E
GetType
îîE L
(
îîL M
)
îîM N
.
îîN O
GetProperty
îîO Z
(
îîZ [
item
îî[ _
.
îî_ `
Name
îî` d
)
îîd e
.
îîe f
GetValue
îîf n
(
îîn o
obj
îîo r
)
îîr s
)
îîs t
;
îît u
}
ïï 
}
ññ 
return
òò 
cmd
òò 
;
òò 
}
öö 	
public
úú 
int
úú 

ExecuteSql
úú 
(
úú 
string
úú $
query
úú% *
)
úú* +
{
ùù 	
try
ûû 
{
üü 

SqlCommand
†† 
command
†† "
=
††# $
new
††% (

SqlCommand
††) 3
(
††3 4
query
††4 9
,
††9 :

connection
††; E
)
††E F
;
††F G
return
°° 
command
°° 
.
°° 
ExecuteNonQuery
°° .
(
°°. /
)
°°/ 0
;
°°0 1
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
e
££ 
)
££ 
{
§§ 
closeConnection
•• 
(
••  
)
••  !
;
••! "
throw
¶¶ 
e
¶¶ 
;
¶¶ 
}
ßß 
}
®® 	
public
™™ 
List
™™ 
<
™™ 
T
™™ 
>
™™ $
ExecuteStoredProcedure
™™ -
<
™™- .
T
™™. /
>
™™/ 0
(
™™0 1
string
™™1 7
query
™™8 =
)
™™= >
{
´´ 	
var
¨¨ 

listReturn
¨¨ 
=
¨¨ 
new
¨¨  
List
¨¨! %
<
¨¨% &
T
¨¨& '
>
¨¨' (
(
¨¨( )
)
¨¨) *
;
¨¨* +
try
≠≠ 
{
ÆÆ 

SqlCommand
ØØ 
command
ØØ "
=
ØØ# $
new
ØØ% (

SqlCommand
ØØ) 3
(
ØØ3 4
query
ØØ4 9
,
ØØ9 :

connection
ØØ; E
)
ØØE F
;
ØØF G
command
∞∞ 
.
∞∞ 
CommandType
∞∞ #
=
∞∞$ %
System
∞∞& ,
.
∞∞, -
Data
∞∞- 1
.
∞∞1 2
CommandType
∞∞2 =
.
∞∞= >
StoredProcedure
∞∞> M
;
∞∞M N
using
≤≤ 
(
≤≤ 
SqlDataReader
≤≤ $
reader
≤≤% +
=
≤≤, -
command
≤≤. 5
.
≤≤5 6
ExecuteReader
≤≤6 C
(
≤≤C D
)
≤≤D E
)
≤≤E F
{
≥≥ 
while
µµ 
(
µµ 
reader
µµ !
.
µµ! "
Read
µµ" &
(
µµ& '
)
µµ' (
)
µµ( )
{
∂∂ 
object
∏∏ 
instance
∏∏ '
=
∏∏( )
	Activator
∏∏* 3
.
∏∏3 4
CreateInstance
∏∏4 B
(
∏∏B C
typeof
∏∏C I
(
∏∏I J
T
∏∏J K
)
∏∏K L
)
∏∏L M
;
∏∏M N
for
∫∫ 
(
∫∫ 
int
∫∫  
i
∫∫! "
=
∫∫# $
$num
∫∫% &
;
∫∫& '
i
∫∫( )
<
∫∫* +
reader
∫∫, 2
.
∫∫2 3

FieldCount
∫∫3 =
;
∫∫= >
i
∫∫? @
++
∫∫@ B
)
∫∫B C
{
ªª 
if
ºº 
(
ºº  
!
ºº  !
reader
ºº! '
.
ºº' (
IsDBNull
ºº( 0
(
ºº0 1
i
ºº1 2
)
ºº2 3
)
ºº3 4
instance
ΩΩ  (
.
ΩΩ( )
GetType
ΩΩ) 0
(
ΩΩ0 1
)
ΩΩ1 2
.
ΩΩ2 3
GetProperty
ΩΩ3 >
(
ΩΩ> ?
reader
ΩΩ? E
.
ΩΩE F
GetName
ΩΩF M
(
ΩΩM N
i
ΩΩN O
)
ΩΩO P
)
ΩΩP Q
.
ΩΩQ R
SetValue
ΩΩR Z
(
ΩΩZ [
instance
ΩΩ[ c
,
ΩΩc d
reader
ΩΩe k
[
ΩΩk l
i
ΩΩl m
]
ΩΩm n
)
ΩΩn o
;
ΩΩo p
}
ææ 

listReturn
øø "
.
øø" #
Add
øø# &
(
øø& '
(
øø' (
T
øø( )
)
øø) *
instance
øø* 2
)
øø2 3
;
øø3 4
}
¿¿ 
}
¡¡ 
return
¬¬ 

listReturn
¬¬ !
;
¬¬! "
}
√√ 
catch
ƒƒ 
(
ƒƒ 
	Exception
ƒƒ 
e
ƒƒ 
)
ƒƒ 
{
≈≈ 
closeConnection
∆∆ 
(
∆∆  
)
∆∆  !
;
∆∆! "
throw
«« 
e
«« 
;
«« 
}
»» 
}
…… 	
[
ÀÀ 	"
SecuritySafeCritical
ÀÀ	 
]
ÀÀ 
	protected
ÃÃ 
void
ÃÃ 
closeConnection
ÃÃ &
(
ÃÃ& '
bool
ÃÃ' +
	disposing
ÃÃ, 5
=
ÃÃ6 7
false
ÃÃ8 =
)
ÃÃ= >
{
ÕÕ 	
if
ŒŒ 
(
ŒŒ 
(
ŒŒ 
(
ŒŒ 

connection
ŒŒ 
!=
ŒŒ 
null
ŒŒ  $
)
ŒŒ$ %
)
ŒŒ% &
)
ŒŒ& '
{
œœ 

connection
–– 
.
–– 
Close
––  
(
––  !
)
––! "
;
––" #
if
—— 
(
—— 
!
—— 
	disposing
—— 
)
—— 

connection
““ 
.
““ 
Dispose
““ &
(
““& '
)
““' (
;
““( )
}
”” 
}
‘‘ 	
public
÷÷ 
void
÷÷ 
Dispose
÷÷ 
(
÷÷ 
)
÷÷ 
{
◊◊ 	
closeConnection
ÿÿ 
(
ÿÿ 
true
ÿÿ  
)
ÿÿ  !
;
ÿÿ! "
}
⁄⁄ 	
}
ÏÏ 
}ÌÌ ˝
RC:\Users\Note-pc\Source\Repos\ddd.bitbucket2\ADOFactory\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str %
)% &
]& '
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str '
)' (
]( )
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *