@model SgqService.ViewModels.FormularioParaRelatorioViewModel
@using DTO
@{
    Layout = "~\\Views\\RelatoriosSgq\\_FilterReports.cshtml";
    ViewBag.Title = Resources.Resource.defects_reports; //"Não Conformidades";

    var url = Url.Action("Index", "Home");
    var urlGraficoUnidades = Url.Action("GraficoUnidades", "api/NaoConformidadeRH");
    var urlGraficoHolding = Url.Action("GraficoHolding", "api/NaoConformidadeRH");
    var urlGraficoRegional = Url.Action("GraficoRegional", "api/NaoConformidadeRH");
    var urlGraficoNegocio = Url.Action("GraficoNegocio", "api/NaoConformidadeRH");
    var urlGraficoDepartamentos = Url.Action("GraficoDepartamentos", "api/NaoConformidadeRH");
    var urlGraficoCargo = Url.Action("GraficoCargos", "api/NaoConformidadeRH");
    var urlGraficoDepartamentosPai = Url.Action("GraficoDepartamentosPai", "api/NaoConformidadeRH");
    var urlGetPanelResultSet = Url.Action("GetPanelResultSet", "api/NaoConformidadeRH");
    var urlGraficoNcPorUnidadeIndicador = Url.Action("GraficoIndicador", "api/NaoConformidadeRH");
    var urlGraficoMonitoramento = Url.Action("GraficoMonitoramento", "api/NaoConformidadeRH");
    var urlGraficoTarefasAcumuladas = Url.Action("GraficoTarefasAcumuladas", "api/NaoConformidadeRH");
    var urlGraficoTarefa = Url.Action("GraficoTarefa", "api/NaoConformidadeRH");
    var urlFtaGet = Url.Action("GetUrl", "api/Fta");
    var UrlGraficoDepartamentosPorShift = Url.Action("GraficoDepartamentosPorShift", "api/NaoConformidadeRH");
    var UrlPivotTable = Url.Action("PivotTable", "api/NaoConformidadeRH");
    var UrlGraficoIndicadorPorShift = Url.Action("GraficoIndicadorPorShift", "api/NaoConformidadeRH");
    var urlGetHashDepartment = Url.Action("GetHashDepartment", "api/NaoConformidadeRH");
    var UnidadeUsuario = ViewBag.UnidadeUsuario;
    var jss = new System.Web.Script.Serialization.JavaScriptSerializer();
    var val = jss.Serialize(ViewBag.RoleUSerSgq);

    ViewBag.UnitIdArr = true;

    ViewBag.ShowCurrentDate = false;
    ViewBag.ShowRangeDate = true;
    ViewBag.ShowParCompany = true;
    ViewBag.ShowShift = false;
    ViewBag.ShowParDepartment = true;
    ViewBag.ShowParSecao = true;
    ViewBag.ShowParCargo = true;
    //ViewBag.ShowParCriticalLevel = true; //No momento não existe no sistema RH (27/01/2020)
    ViewBag.ShowParLevel1 = false;
    ViewBag.ShowParLevel2 = false;
    ViewBag.ShowParLevel3 = false;
    ViewBag.ShowParCluster = true;
    ViewBag.ShowParClusterGroup = true;
    ViewBag.ShowParStructure2 = true; //Grupo de empresa
    ViewBag.ShowParStructure3 = true; //Regional
                                      //ViewBag.ShowParModule = true;
    ViewBag.ShowParLevel1 = true;
    ViewBag.ShowParLevel2 = true;
    ViewBag.ShowParLevel3 = true;
    ViewBag.ShowParStructureGroup = false;
    ViewBag.ShowParModule = true;
    ViewBag.ShowUserCompanies = true; //Exibe somente as unidades do usuário no filtro
}

@section Content {

    <style>
        .panel-info {
            border-color: #999;
        }

            .panel-info > .panel-heading {
                background-color: #ccc;
                border-color: #999;
                color: #333;
            }

        .chart-inner {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        #CustomPopover {
            z-index: 1040;
            border-width: 2px;
            padding: 8px;
            border-radius: 2px !important;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            position: absolute;
            background: white;
        }

            #CustomPopover .btn {
                margin-left: 1px;
                margin-right: 1px;
            }

        .geral-note {
            padding: 2px;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            background-color: #ebe9e8;
            text-align: center;
            width: 60%;
            margin: auto;
            margin-bottom: 10px;
        }
    </style>

    <div class="page-content-wrapper">
        <div class="page-content">

            <div id="CustomPopover" class="hide">
                <h5>@Resources.Resource.next_unfolding</h5>
                <div>
                    <button class="btn btn-sm btn-default" id="btnIndicador">@Resources.Resource.level1</button>
                    <button class="btn btn-sm btn-default" id="btnMonitoramento">Monitoramento</button>
                    @*<button class="btn btn-sm btn-default" id="btnTarefasAcumuladas">Tarefas Acumuladas</button>*@
                    @*<button class="btn btn-sm btn-default" id="btnShift">Shift</button>*@
                    <button class="btn btn-sm btn-default" id="btnDepartamento">@Resources.Resource.department</button>
                </div>
            </div>

            <input id="teste" class="hidden" value="@ViewBag.RoleUSerSgq" />

            <div id="formBodyContent">
                @Html.Partial("~/Views/Shared/_mensagemObrigatorio.cshtml")

                <div id="RGHoldingGrafico"></div>
                <div id="RGNegocioGrafico"></div>
                <div id="RGRegionalGrafico"></div>
                <div id="RGUnidadesGrafico"></div>
                <div id="RGDepartamentosPaiGrafico"></div>
                <div id="RGDepartamentosGrafico"></div>
                <div id="RGCargoGrafico"></div>
                <div id="RGDepartamentosShiftGrafico"></div>
                <div id="RGOperacoesGrafico"></div>
                <div id="RGOperacoesShiftGrafico"></div>

                <div id="loading"></div>

                <div class="panel panel-info" id="PanelFull0" style="display:none">
                    <div class="panel-heading"></div>
                    <div class="panel-body" id="g0">
                        <div id="RGMonitoramentosGrafico"></div>
                        <div id="RGMonitoramentosShiftGrafico"></div>
                        <div id="RGTarefasAcumuladasGrafico"></div>
                        <div id="RGTarefasGrafico"></div>
                        <div id="RGTarefasPivotTable"></div>
                    </div>
                </div>
            </div>
        </div>

        @* ADICIONA PIVOTTABLE *@
        @Html.Partial("~/Views/RelatoriosSgq/_PivotTable.cshtml")

        @Html.Partial("~/Views/RelatoriosSgq/_Fta.cshtml")
    </div>

}


@section Scripts {

    <script type="text/javascript">

        $('button').button({ loadingText: '@Resources.Resource.loading...' });

        //var Grafico1 = '@Resources.Resource.defects_per_unit'; //'NC por unidade';
        var Department = '@Html.Raw(Resources.Resource.department)'
        var GraficoDepto = '@Resources.Resource.defects_per_deparment'; //'NC por departamento';
        var GraficoIndic = '@Resources.Resource.defects_per_audit'; //'NC por Indicador: ';
        var GraficoMon = '@Resources.Resource.defects_per_monitoring'; //'NC por Monitoramento: ';
        var GraficoTarefa = '@Resources.Resource.defects_per_tasks'; //'NC por Tarefa: ';
        var GraficoTarefasAcumuladasTit ='@Resources.Resource.derivations_per_defects'; // 'NC por Tarefas acumuladas: ';
        var GraficoMoncomTarefa = '@Resources.Resource.defects_per_monitoring_at_tasks'; //'NC por Monitoramento na Tarefa: ';
        var $btn = $('#btnSend');
        var urlGraficoUnidades = @Html.Raw(Json.Encode(urlGraficoUnidades));
        var urlGraficoHolding = @Html.Raw(Json.Encode(urlGraficoHolding));
        var urlGraficoNegocio = @Html.Raw(Json.Encode(urlGraficoNegocio));
        var urlGraficoRegional = @Html.Raw(Json.Encode(urlGraficoRegional));
        var urlGraficoIndicador = @Html.Raw(Json.Encode(urlGraficoNcPorUnidadeIndicador));
        var urlGraficoMonitoramento = @Html.Raw(Json.Encode(urlGraficoMonitoramento));
        var urlGraficoTarefasAcumuladas = @Html.Raw(Json.Encode(urlGraficoTarefasAcumuladas));
        var urlGraficoTarefa = @Html.Raw(Json.Encode(urlGraficoTarefa));
        var UnidadeUsuario = (@Html.Raw(Json.Encode(ViewBag.UnidadeUsuario)));
        var urlGetFta = @Html.Raw(Json.Encode(urlFtaGet));
        var urlGraficoDepartamentos = @Html.Raw(Json.Encode(urlGraficoDepartamentos));
        var urlGraficoDepartamentosPai = @Html.Raw(Json.Encode(urlGraficoDepartamentosPai));
        var urlGraficoCargo = @Html.Raw(Json.Encode(urlGraficoCargo));
        var UrlGraficoDepartamentosPorShift = @Html.Raw(Json.Encode(UrlGraficoDepartamentosPorShift));
        var UrlPivotTable = @Html.Raw(Json.Encode(UrlPivotTable));
        var urlGraficoIndicadorPorShift = @Html.Raw(Json.Encode(UrlGraficoIndicadorPorShift));
        var urlGetHashDepartment = @Html.Raw(Json.Encode(urlGetHashDepartment));
        var urlGetUnitId = '@Url.Action("GetUnitId","api/Fta")'
        var popoverMain;
        var Aux;
        var Aux2;
        var subtitle = "";
        var pathDirect = 0; // sum 1 se user optao por departamento, se continuar 0 ele optou por indicador e pulou um método
        var IsDepartment = false;
        var IsDepartmentShift = false;
        var idGrafico = "";
        var desdobramento = "";
        var ShiftSelected;

        var GeralNote = "<div class='geral-note'>" + '@Html.Raw(Resources.Resource.click_to_unfold)' + "</div>";

        $('#simpleCallendar').hide().attr('disabled', true);

        $(document).ready(function () {

            closeLeftSidebar();
            $(".sidebar-toggler").removeClass("hide");
            $(".page-sidebar-wrapper").removeClass("hide");

            //$("#btnSend").click(function (e) {
            //    Send(true);
            //});

            $('.levels').hide();


            $("#clusterGroupId").find("option").eq(0).remove();
            $("#clusterGroupId").val(8).change();

            if ($("#clusterGroupId").val() == null) {
                $("#clusterGroupId").val(2).change();
            }

            popoverMain = $('#CustomPopover').addClass('hide');

            $('.sidebar-nav select').select2();

            $('[name="parClusterGroup_Ids"]').parent().find('label strong').append('<span style="color:red;font-size:20px"> *</span>');
            $('[name="dateRange"]').parent().find('label strong').append('<span style="color:red;font-size:20px"> *</span>');

        });

        function validaRoleUsuario(objRoleUser) {

            objFiltro.Param.IsCorporativo = objRoleUser.IsCorporativo;
            objFiltro.Param.IsNegocio = objRoleUser.IsNegocio;
            objFiltro.Param.IsRegional = objRoleUser.IsRegional;

            if (objRoleUser.IsCorporativo == true) {
                $.ajax({
                    url: urlGraficoHolding,
                    type: 'post',
                    data: JSON.stringify(objFiltro),
                    dataType: "JSON",
                    contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                    beforeSend: function () {
                    }
                })
                    .done(function (data) {
                        //console.log(data);
                        GraficoHolding(data);
                        $btn.button('reset');
                        closeLoader();
                    })
                    .fail(function (jqXHR, textStatus, msg) {
                        //console.log(msg);
                        $btn.button('reset');
                        //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                        closeLoader();
                    });
            }
            else if (objRoleUser.IsNegocio == true) {
                GetGraficoNegocio();
            }
            else if (objRoleUser.IsRegional == true) {
                GetGraficoRegional();
            } else {
                GetGraficoUnidade();
            }

        }

        function enviarFiltro() {

            $('#results').empty();
            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#RGUnidadesGrafico").empty();
            $("#RGHoldingGrafico").empty();
            $("#RGNegocioGrafico").empty();
            $("#RGRegionalGrafico").empty();
            $("#PanelFull0").hide();

            ShiftSelected = $('#shift :selected').val();

            popoverMain.addClass('hide');

            if (!ValidaDadosParaEnvio()) {
                $btn.button('reset');
                return;
            }

            $btn.button('loading');

            openLoader('Aguarde...');

            objFiltro.Param = {};
            objFiltro.Param.auditorId = GetUsuarioId();

            var roleUser = '@Html.Raw(val)';
            var objRoleUser = $.parseJSON(roleUser);

            validaRoleUsuario(objRoleUser);


            $('#RGTarefasPivotTable').hide();
        };

        function GetGraficoUnidade(holdingName, holding_Id, grupoEmpresaName, grupoEmpresa_Id, regionalName, regional_Id) {
            objFiltro.Param.holdingName = holdingName;
            objFiltro.Param.holding_Id = holding_Id;

            objFiltro.Param.grupoEmpresa = grupoEmpresaName;
            objFiltro.Param.grupoEmpresa_Id = grupoEmpresa_Id;

            objFiltro.Param.regionalName = regionalName;
            objFiltro.Param.regional_Id = regional_Id;

            $("#PanelFull0").hide();
            pathDirect = 1;

            $.ajax({
                url: urlGraficoUnidades,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
            .done(function (data) {
                //console.log(data);
                GraficoUnidade(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });

            $('#RGTarefasPivotTable').hide();
        };

        function ValidaDadosParaEnvio() {

            GuardJs.esconderMensagem();

            GuardJs.resetForValidation(objFiltro);
            GuardJs.CheckRangeDateTime(objFiltro.endDate, objFiltro.startDate, "Initial date", "End date");

            if (!GuardJs.isValid)
                return !GuardJs.isValid;

            if (!objFiltro.parClusterGroup_Ids || objFiltro.parClusterGroup_Ids.length < 0) {
                GuardJs.exibirMensagemAlerta("Selecione o Grupo de Clusters.");
                return false;
            }

            return true;
        }

        /*GET*/
        function GetGraficoCargo(cargo, cargo_Id) {
            $("#PanelFull0").hide();
            $("RGCargoGrafico").empty();
            objFiltro.Param.departmentName = cargo;
            objFiltro.Param.department_Id = cargo_Id;

            $.ajax({
                url: urlGraficoCargo,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                    //console.log(data);
                    GraficoCargo(data);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });

            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoDepartamentoPai(unit, unit_Id) {
            $("#PanelFull0").hide();
            $("RGDepartamentosShiftGrafico").empty();
            objFiltro.Param.unitName = unit;
            objFiltro.Param.unit_Id = unit_Id;

            $.ajax({
                url: urlGraficoDepartamentosPai,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                    //console.log(data);
                    GraficoDepartamentoPai(data);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });

            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoDepartamento(department, department_Id) {
            $("#PanelFull0").hide();
            $("RGDepartamentosShiftGrafico").empty();
            objFiltro.Param.departmentPaiName = department;
            objFiltro.Param.departmentPai_Id = department_Id;

            $.ajax({
                url: urlGraficoDepartamentos,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoDepartamento(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });

            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoIndicadorDepartamento(cargo, cargo_Id) {

            objFiltro.Param.cargo = cargo;
            objFiltro.Param.cargo_Id = cargo_Id;
            $("#PanelFull0").hide();
            pathDirect = 1;

            $.ajax({
                url: urlGraficoIndicador,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoIndicadorUnidade(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });

            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoIndicadorUnidade(unidade, unidade_Id) {

            $("#PanelFull0").hide();
            //objFiltro.Param.unitName = unidade;
            objFiltro.Param.unit_Id = unidade_Id;
            pathDirect = 0;

            $.ajax({
                url: urlGraficoIndicador,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoIndicadorUnidade(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });

            $('#RGTarefasPivotTable').hide();
        }

        function GetPopover(param, grafico, shift, param_Id) {

            popoverMain.addClass('hide');

            hidePopoverItems();

            IsDepartment = false;
            Aux = null;
            Aux2 = null;

            Aux = param;
            Aux2 = param_Id;
            desdobramento = grafico;

            popoverMain.css("top", (y + 35));
            popoverMain.css("left", (x - 450));

            if (desdobramento == "Departamento") {
                if (@Json.Encode(GlobalConfig.Eua)) {
                    objFiltro.Param.shift = ShiftSelected;
                } else {
                    objFiltro.Param.shift = $('#shiftIdV :selected').val()
                }
                IsDepartmentShift = false;
            }

            switch (grafico) {

                case "DepartamentoShift":

                    objFiltro.Param.shift = shift;
                    IsDepartmentShift = true;
                    GetGraficoIndicadorDepartamento(Aux, Aux2);
                    return;

                case "IndicadorShift":
                    objFiltro.Param.shift = shift;
                    GetMonitoramento(Aux, Aux2);
                    GetTarefasAcumuladas(Aux, Aux2);
                    return;

                case "Departamento":

                   IsDepartment = true;
                   GetGraficoDepartamento(Aux, Aux2);

                    break;
                case "DepartamentoPai":

                    GetGraficoDepartamentoPai(Aux, Aux2);

                    break;
                case "Cargo":

                    GetGraficoCargo(Aux, Aux2);

                    break;
                case "Indicador":

                        GetMonitoramento(Aux, Aux2);
                        GetTarefasAcumuladas(Aux, Aux2);

                    break;

                case "Negocio":
                    GetGraficoNegocio(Aux, Aux2);
                    break;

                case "Regional":
                    GetGraficoRegional(objFiltro.Param["holdingName"], objFiltro.Param["holding_Id"],Aux, Aux2);
                    break;

                case "Unidade":
                    GetGraficoUnidade(objFiltro.Param["holdingName"], objFiltro.Param["holding_Id"], objFiltro.Param["grupoEmpresa"], objFiltro.Param["grupoEmpresa_Id"], Aux, Aux2);
                    break;

                default:
                    IsDepartmentShift = false;
                    showPopover1();
                    break;
        }

        popoverMain.removeClass('hide');

        }

        function GetMonitoramento(indicador, indicador_Id){
            //$("#PanelFull0").hide();
            $("#RGTarefasGrafico").empty();
            objFiltro.Param.level1Name = removeFtaDaLabel(indicador);
            objFiltro.Param.level1_Id = indicador_Id;

            $.ajax({
                url: urlGraficoMonitoramento,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoMonitoramento(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });
            $('#RGTarefasPivotTable').hide();
        };

        function GetTarefasAcumuladas(indicador, indicador_Id) {
            //$("#PanelFull0").hide();
            $("#RGTarefasAcumuladasGrafico").empty();
            objFiltro.Param.level1Name = removeFtaDaLabel(indicador);
            objFiltro.Param.level1_Id = indicador_Id;
            $.ajax({
                url: urlGraficoTarefasAcumuladas,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoTarefasAcumuladas(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });

            $('#RGTarefasPivotTable').hide();
        };

        function GetTarefa(monitoramento, lixo1, lixo2, monitoramento_id){
            objFiltro.Param.level2Name = removeFtaDaLabel(monitoramento);
            objFiltro.Param.level2_Id = monitoramento_id;

            $.ajax({
                url: urlGraficoTarefa,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                GraficoTarefas(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });
            $('#RGTarefasPivotTable').hide();
            pivotTableId = "RGTarefasPivotTable";

            $.ajax({
                url: UrlPivotTable,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                //console.log(data);
                CarregaPivotTable(data, pivotTableId);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                //console.log(msg);
                //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });
            $('#RGTarefasPivotTable').show();
        };

        function GetGraficoGenerico() {
            if (desdobramento == "Departamento") {
                IsDepartment = true;
                idGrafico = "RGDepartamentosShiftGrafico";
                $('#RGOperacoesGrafico').empty();

                $.ajax({
                    url: UrlGraficoDepartamentosPorShift,
                    type: 'post',
                    data: JSON.stringify(objFiltro),
                    dataType: "JSON",
                    contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                    beforeSend: function () {
                    }
                })
                    .done(function (data) {
                    //console.log(data);
                    GraficoDepartamentoPorShift(data);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });
                $('#RGTarefasPivotTable').hide();
            } else if (desdobramento == "Indicador") {
                idGrafico = "RGOperacoesShiftGrafico";

                $.ajax({
                    url: urlGraficoIndicadorPorShift,
                    type: 'post',
                    data: JSON.stringify(objFiltro),
                    dataType: "JSON",
                    contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                    beforeSend: function () {
                    }
                })
                    .done(function (data) {
                    //console.log(data);
                    GraficoIndicadorPorShift(data);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });
                $('#RGTarefasPivotTable').hide();
            }
        }

        function GetGraficoNegocio(holding, holding_Id) {
            objFiltro.Param.holdingName = holding;
            objFiltro.Param.holding_Id = holding_Id;
            $("#PanelFull0").hide();
            pathDirect = 1;

                $.ajax({
                    url: urlGraficoNegocio,
                    type: 'post',
                    data: JSON.stringify(objFiltro),
                    dataType: "JSON",
                    contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                    beforeSend: function () {
                    }
                })
                .done(function (data) {
                    //console.log(data);
                    GraficoNegocio(data, objFiltro);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });

            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoRegional(holding, holding_Id, grupoEmpresa, grupoEmpresa_Id) {
            objFiltro.Param.holdingName = holding;
            objFiltro.Param.holding_Id = holding_Id;
            objFiltro.Param.grupoEmpresa = grupoEmpresa;
            objFiltro.Param.grupoEmpresa_Id = grupoEmpresa_Id;

            $("#PanelFull0").hide();
            pathDirect = 1;

                $.ajax({
                    url: urlGraficoRegional,
                    type: 'post',
                    data: JSON.stringify(objFiltro),
                    dataType: "JSON",
                    contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                    beforeSend: function () {
                    }
                })
                .done(function (data) {
                    //console.log(data);
                    GraficoRegional(data);
                    closeLoader();
                })
                .fail(function (jqXHR, textStatus, msg) {
                    //console.log(msg);
                    //preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                    closeLoader();
                });

            $('#RGTarefasPivotTable').hide();
        }

        /*END GET*/

        /*Charts*/
        function GraficoHolding(data) {

            if (!(data.length > 0)) {
                GuardJs.exibirMensagemAlerta(Resources('no_data_to_show'));
                return;
            }

            var dataX = MapeiaValorParaHC(data, "HoldingName");
            var dataXId = MapeiaValorParaHC(data, "Holding_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#RGUnidadesGrafico").empty();
            $("#RGHoldingGrafico").empty();
            $("#RGNegocioGrafico").empty();
            $("#RGRegionalGrafico").empty();

            Highcharts.chart('RGHoldingGrafico', {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo("NC por Holding"),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(Proc, GetPopover, null, "Negocio", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "Negocio", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "Negocio", dataX, null, dataXId)
                ]
            }, function () {
                $('#RGHoldingGrafico').append(GeralNote);
                $("#CustomPopover").addClass("hide");
            });

            $('.body-content').css('height', '3350px');

        }

        function GraficoNegocio(data, data2) {

            if (!(data.length > 0)) {
                GuardJs.exibirMensagemAlerta(Resources('no_data_to_show'));
                return;
            }

            var dataX = MapeiaValorParaHC(data, "GrupoDeEmpresaName");
            var dataXId = MapeiaValorParaHC(data, "GrupoDeEmpresa_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#RGUnidadesGrafico").empty();
            $("#RGNegocioGrafico").empty();
            $("#RGRegionalGrafico").empty();

            Highcharts.chart('RGNegocioGrafico', {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo("NC por Negócio"),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(Proc, GetPopover, null, "Regional", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "Regional", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "Regional", dataX, null, dataXId),
                ]
            }, function () {
                $('#RGNegocioGrafico').append(GeralNote);
                $("#CustomPopover").addClass("hide");
            });

            $('.body-content').css('height', '3350px');

        }

        function GraficoRegional(data, data2) {
            if (!(data.length > 0)) {
                GuardJs.exibirMensagemAlerta(Resources('no_data_to_show'));
                return;
            }

            var dataX = MapeiaValorParaHC(data, "RegionalName");
            var dataXId = MapeiaValorParaHC(data, "Regional_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#RGUnidadesGrafico").empty();
            $("#RGRegionalGrafico").empty();

            Highcharts.chart('RGRegionalGrafico', {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo("NC por Regional"),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(Proc, GetPopover, null, "Unidade", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "Unidade", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "Unidade", dataX, null, dataXId),
                ]
            }, function () {
                $('#RGRegionalGrafico').append(GeralNote);
                $("#CustomPopover").addClass("hide");
            });

            $('.body-content').css('height', '3350px');

        }

        function GraficoUnidade(data) {

            if(!(data.length > 0)){
                GuardJs.exibirMensagemAlerta(Resources('no_data_to_show'));
                return;
            }

            var dataX = MapeiaValorParaHC(data, "UnidadeName");
            var dataXId = MapeiaValorParaHC(data, "Unidade_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#RGUnidadesGrafico").empty();

            Highcharts.chart('RGUnidadesGrafico', {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(setNameTitulos(Resources('defects_per_unit'))),
                subtitle: Chart.Subtitulo(setNameSubtitulos(Resources('defects_per_unit'))),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(Proc, GetPopover, null, "DepartamentoPai", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "DepartamentoPai", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "DepartamentoPai", dataX, null, dataXId)
                ]
            }, function () {
                $('#RGUnidadesGrafico').append(GeralNote);
                $("#CustomPopover").addClass("hide");
            });

            $('.body-content').css('height', '3350px');

        }

        function GraficoCargo(data) {
            pathDirect = 1;

            var dataX = MapeiaValorParaHC(data, "CargoName");
            var dataXId = MapeiaValorParaHC(data, "Cargo_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var selector = "RGCargoGrafico";
            $('#' + selector).empty();

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();

            //$('#' + selector).empty().highcharts({
            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo('Cargo'),
                subtitle: Chart.Subtitulo(Resources("unit"), objFiltro.Param.unitName),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "DepartamentoShift", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "DepartamentoShift", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "DepartamentoShift", dataX, null, dataXId),
                ]
            }, function () {
                $('#' + selector).append(GeralNote);
            });
        }


        function GraficoDepartamentoPai(data) {
            pathDirect = 1;
            var dataX = MapeiaValorParaHC(data, "DepartamentoPaiName");
            var dataXId = MapeiaValorParaHC(data, "DepartamentoPai_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var selector = "RGDepartamentosPaiGrafico";
            $('#' + selector).empty();

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosPaiGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            //$('#' + selector).empty().highcharts({

            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(Resources("costcenter")),
                subtitle: Chart.Subtitulo(Resources("unit"), objFiltro.Param.unitName),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "Departamento", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "Departamento", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "Departamento", dataX, null, dataXId),
                ]
            }, function () {
                $('#' + selector).append(GeralNote);
            });
        }

        function GraficoDepartamento(data) {
            pathDirect = 1;
            var dataX = MapeiaValorParaHC(data, "DepartamentoName");
            var dataXId = MapeiaValorParaHC(data, "Departamento_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var selector = "RGDepartamentosGrafico";
            $('#' + selector).empty();

            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGCargoGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            //$('#' + selector).empty().highcharts({

            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(Resources("department")),
                subtitle: Chart.Subtitulo(Resources("unit"), objFiltro.Param.unitName),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "Cargo", dataX, null, dataXId),
                    Chart.NC(Nc, GetPopover, null, null, null, "Cargo", dataX, null, dataXId),
                    Chart.Av(Av, GetPopover, null, null, null, "Cargo", dataX, null, dataXId),
                ]
            }, function () {
                $('#' + selector).append(GeralNote);
            });
        }

        function GraficoDepartamentoPorShift(data) {
            pathDirect = 1;
            var dataX = MapeiaValorParaHC(data, "dataX");
            var Name = MapeiaValorParaHC(data, "DepartamentoName");
            var Ids = MapeiaValorParaHC(data, "Departamento_Id");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var Shift = MapeiaValorParaHC(data, "Shift");
            var selector = "RGDepartamentosShiftGrafico";
            $('#' + selector).empty();

            //$('#' + selector).empty().highcharts({
            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(Resources("defects_per_deparment") + " | " + Resources("shift")),
                subtitle: Chart.Subtitulo(Resources("unit"), objFiltro.Param.unitName),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "DepartamentoShift", Name ,Shift, Ids),
                    Chart.NC(Nc, GetPopover, null, null, null, "DepartamentoShift", Name ,Shift, Ids),
                    Chart.Av(Av, GetPopover, null, null, null, "DepartamentoShift", Name,Shift, Ids),
                ]
            }, function () {
                    $('#' + selector).append(GeralNote);
            })
        }

        function pathChart(data, nameChart) {
            Subtitle = "";
            if (nameChart == "Unidade") {
                Subtitle += Resources("unit") + ": " + data[0].UnidadeName + " | ";
            }
            if (data.unitId != '' && data.unitId != undefined) {
                Subtitle += Resources("unit") + ": " + $('#unitIdV :selected').text() + " | ";
            }
            if (data.structureId != '' && data.structureId != undefined) {
                Subtitle += Resources("structure") + ": " + $('#structureId :selected').text() + " | ";
            }
            if (data.auditorId != '' && data.auditorId != undefined) {
                if (!$('#auditorId :selected').text() == "All")
                    Subtitle += Resources("auditor") + ": " + $('#auditorId :selected').text() + " | ";
            }
            if (data.criticalLevelId != '' && data.criticalLevelId != undefined) {
                Subtitle += Resources("criticalLevel") + ": " + $('#criticalLevelId :selected').text() + " | ";
            }
            if (data.level1Id != '' && data != undefined && !isNaN(data.level1Id)) {
                Subtitle += Resources("level1") + ": " + $('#level1Idv :selected').text() + " | ";
            }
            if (enviar.level2Id != '' && enviar.level2Id != undefined && !isNaN(enviar.level2Id)) {
                Subtitle += Resources("level2") + ": " + $('#level2Idv :selected').text() + " | ";
            }
            if ((enviar.level3Id != '' && enviar.level3Id != undefined && !isNaN(enviar.level3Id))) {
                Subtitle += Resources("level3") + ": " + $('#level3Idv :selected').text() + " | ";
            }
        }

        function GraficoIndicadorUnidade(data) {

            subtitle = Resources("unit") + ": " + objFiltro.Param.unitName;

            if (pathDirect == 1)
                subtitle += " | " + Resources("department") + ": " + objFiltro.Param.departmentName;

            if (objFiltro.Param.shift != "" && objFiltro.Param.shift != undefined)
                subtitle += " | " + Resources("shift") + ": " + (objFiltro.Param.shift == 1 ? "1" : "2");


            var nc = MapeiaValorParaHC(data, "Nc");
            var nome = MapeiaValorParaHC(data, "IndicadorName");
            var Ids = MapeiaValorParaHC(data, "Indicador_Id");
            var porc = MapeiaValorParaHC(data, "Proc");
            var qtdAv = MapeiaValorParaHC(data, "Av");
            var meta = MapeiaValorParaHC(data, "Meta");
            var selector = "RGOperacoesGrafico";
            //objFiltro.Param.level1names = nome
            enviar.isLevel = 1;
            $('#' + selector).empty();

            //$('#' + selector).empty().highcharts({
            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoIndic),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(porc, GetMonitoramento),
                    //Chart.NC(nc, GetMonitoramento),
                    //Chart.Av(qtdAv, GetMonitoramento),
                    //Chart.Meta(meta, GetMonitoramento),
                    Chart.ProcNc(porc, GetPopover, null, "Indicador", nome, null, Ids),
                    Chart.NC(nc, GetPopover, null, null, null, "Indicador", nome, null, Ids),
                    Chart.Av(qtdAv, GetPopover, null, null, null, "Indicador", nome, null, Ids),
                    //Chart.Meta(meta, GetPopover, null, null, null, "Indicador"),
                ]
            }, function () {
                    $('#' + selector).append(GeralNote);
            })
        }

        function GraficoIndicadorPorShift(data) {

            if (pathDirect == 1)
                subtitle = Resources("unit") + ": " + objFiltro.Param.unitName + " | " + Resources("department") + ": " + objFiltro.Param.departmentName;
            else
                subtitle = Resources("unit") + ": " + objFiltro.Param.unitName;

            var nc = MapeiaValorParaHC(data, "Nc");
            var dataX = MapeiaValorParaHC(data, "IndicadorName");
            var dataXId = MapeiaValorParaHC(data, "Indicador_Id");
            var shift = MapeiaValorParaHC(data, "Shift");
            var nome = MapeiaValorParaHC(data, "dataX");
            var porc = MapeiaValorParaHC(data, "Proc");
            var qtdAv = MapeiaValorParaHC(data, "Av");
            var meta = MapeiaValorParaHC(data, "Meta");
            var selector = "RGOperacoesShiftGrafico";
            //objFiltro.Param.level1names = nome
            enviar.isLevel = 1;
            $('#' + selector).empty();

            //$('#' + selector).empty().highcharts({
            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoIndic + " | " + Resources("shift")),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(porc, GetPopover, null, "IndicadorShift", dataX, shift, dataXId),
                    Chart.NC(nc, GetPopover, null, null, null, "IndicadorShift", dataX, shift, dataXId),
                    Chart.Av(qtdAv, GetPopover, null, null, null, "IndicadorShift", dataX, shift, dataXId),
                   // Chart.Meta(meta, GetPopover, null, null, null, "IndicadorShift"),
                ]
            }, function () {
                    $('#' + selector).append(GeralNote);
            })
        }

        function GraficoMonitoramento(data) {

            $('#PanelFull0').show();

            var nc = MapeiaValorParaHC(data, "Nc")
            var nome = MapeiaValorParaHC(data, "MonitoramentoName")
            var Ids = MapeiaValorParaHC(data, "Monitoramento_Id")
            var qtdAv = MapeiaValorParaHC(data, "Av")
            var porc = MapeiaValorParaHC(data, "Proc")
            var selector = "RGMonitoramentosGrafico";
            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;
            //objFiltro.Param.level2names = nome
            enviar.isLevel = 2;

            subtitle = Resources('unit') + ": " + objFiltro.Param.unitName;

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + objFiltro.Param.departmentName;

            subtitle += " | " + Resources('level1') + ": " + objFiltro.Param.level1Name;

            if (objFiltro.Param.shift != "" && objFiltro.Param.shift != undefined)
                subtitle += " | " + Resources("shift") + ": " + (objFiltro.Param.shift == 1 ? "1" : "2");

            $('#' + selector).empty();
            //$('#' + selector).empty().highcharts({

            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoMon),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(porc, GetTarefa, null, "", nome, null, Ids),
                    Chart.NC(nc, GetTarefa, null, null, null, "", nome, null, Ids),
                    Chart.Av(qtdAv, GetTarefa, null, null, null, "", nome, null, Ids),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            }, function () {
                    $('#' + selector).append(GeralNote);
            })


        }

        function GraficoTarefasAcumuladas(data) {

            var nc = MapeiaValorParaHC(data, "Nc")
            var nome = MapeiaValorParaHC(data, "TarefaName")
            var Ids = MapeiaValorParaHC(data, "Tarefa_Id")
            //var qtdAv = MapeiaValorParaHC(data, "Av")
            //var porc = MapeiaValorParaHC(data, "Proc")
            var selector = "RGTarefasAcumuladasGrafico";
            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;
            //objFiltro.Param.level2names = nome
            enviar.isLevel = 2;

            subtitle = Resources('unit') + ": " + objFiltro.Param.unitName;

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + objFiltro.Param.departmentName;

            subtitle += " | " + Resources('level1') + ": " + objFiltro.Param.level1Name;

            if (objFiltro.Param.shift != "" && objFiltro.Param.shift != undefined)
                subtitle += " | " + Resources("shift") + ": " + (objFiltro.Param.shift == 1 ? "1" : "2");

            $('#' + selector).empty();

            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoTarefasAcumuladasTit),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(porc, GetTarefa, null, "", nome),
                    Chart.NC(nc, null, null, null, null, "", nome, null, Ids),
                    //Chart.Av(qtdAv, GetTarefa, null, null, null, "", nome),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            })


        }

        function GraficoTarefas(data) {
            $('#PanelFull0').show();

            var nc = MapeiaValorParaHC(data, "Nc");
            var nome = MapeiaValorParaHC(data, "TarefaName");
            var Ids = MapeiaValorParaHC(data, "Tarefa_Id");
            var qtdAv = MapeiaValorParaHC(data, "Av");
            var porc = MapeiaValorParaHC(data, "Proc");
            var selector = "RGTarefasGrafico";
            enviar.isLevel = 3;

            var note = "<div class='geral-note'>" + Resources("click_to_fta") + "</div>"

            subtitle = Resources('unit') + ": " + objFiltro.Param.unitName;

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + objFiltro.Param.departmentName;

            subtitle += " | " + Resources('level1') + ": " + objFiltro.Param.level1Name + " | " + Resources('level2') + ": " + objFiltro.Param.level2Name;

            if (objFiltro.Param.shift != "" && objFiltro.Param.shift != undefined)
                subtitle += " | " + Resources("shift") + ": " + (objFiltro.Param.shift == 1 ? "1" : "2");

            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;

            $('#' + selector).empty();

            Highcharts.chart(selector, {
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoTarefa),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    {
                        name: '% ' + Resources("nonconformity"),
                        color: Chart.CorTotalProcNc(),
                        data: porc,
                        yAxis: 1,
                        tooltip: {
                            valueSuffix: ' %'
                        },
                        dataLabels: Chart.DataLabelPadrao('%'),
                        point: {
                            events: {
                                click: function () {
                                    //objFiltro.Param['level3Name'] = removeFtaDaLabel(this.category);
                                    //objFiltro.Param['PercentualNCFTA'] = porc[this.x];
                                    //objFiltro.Param['ReincidenciaDesvioFTA'] = nc[this.x];
                                    //objFiltro.Param['Evaluated'] = qtdAv[this.x];
                                    //objFiltro.Param['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
                                    //objFiltro.Param['byName'] = true;

                                    //enviar.unitName = objFiltro.Param["unitName"];

                                    //$.post(urlGetUnitId, enviar, function (c) {

                                    //objFiltro.Param.unitId = c.unitId;
                                    //objFiltro.Param.MetaFTA = "80";
                                    //objFiltro.Param.startDate = objFiltro.startDate;
                                    //objFiltro.Param.endDate = objFiltro.endDate;
                                    //RedirecionaParaFTA(objFiltro.Param);

                                    //});
                                    //EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
                                    //RedirecionaParaFTA(enviar);

                                    var self = this;

                                    if (objFiltro.Param.department_Id == null || objFiltro.Param.department_Id == "") {
                                        criaObjFTA(objFiltro, self, porc, nc, Ids, "")
                                    } else {
                                        getHashDepartment(objFiltro, self, porc, nc, Ids, data);
                                    }
                                    //$.post(urlGetHashDepartment + "/" + objFiltro.Param.department_Id, function (data) {

                                    //    let objFTA = {

                                    //        DataInicioFTA: encodeURIComponent(objFiltro.startDate),
                                    //        DataFimFTA: encodeURIComponent(objFiltro.endDate),
                                    //        Supervisor_Id: getCookie("webControlCookie")[0].split('=')[1],
                                    //        PercentualNCFTA: porc[self.x],
                                    //        ReincidenciaDesvioFTA: nc[self.x],
                                    //        Unidade_Id: objFiltro.Param.unit_Id,
                                    //        level1Id: objFiltro.Param.level1_Id,
                                    //        level2Id: objFiltro.Param.level2_Id,
                                    //        level3Id: Ids[self.x],
                                    //        ParDepartments_Hash: data,
                                    //        ParCargo_Id: ""
                                    //    };

                                    //    openFTA(objFTA);

                                    //});
                                }
                            }
                        },
                        tooltip: {
                            valueDecimals: 2,
                            valueSuffix: ' % (' + Resources("nonconformity") + ' * ' + Resources("weight")
                        }
                    },
                    {
                        name: Resources('nonconformity'),
                        color: Chart.CorTotalNc(),
                        data: nc,
                        yAxis: 0,
                        dataLabels: Chart.DataLabelPadrao(),
                        point: {
                            events: {
                                click: function () {
                                    //objFiltro.Param['level3Name'] = removeFtaDaLabel(this.category);
                                    //objFiltro.Param['PercentualNCFTA'] = porc[this.x];
                                    //objFiltro.Param['ReincidenciaDesvioFTA'] = nc[this.x];
                                    //objFiltro.Param['Evaluated'] = qtdAv[this.x];
                                    //objFiltro.Param['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
                                    //objFiltro.Param['byName'] = true;

                                    //enviar.unitName = objFiltro.Param["unitName"];

                                    //$.post(urlGetUnitId, enviar, function (c) {

                                    //objFiltro.Param.unitId = c.unitId;
                                    //objFiltro.Param.MetaFTA = "80";
                                    //objFiltro.Param.startDate = objFiltro.startDate;
                                    //objFiltro.Param.endDate = objFiltro.endDate;

                                    //RedirecionaParaFTA(objFiltro.Param);
                                    //});
                                    //EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
                                    //RedirecionaParaFTA(enviar);

                                    var self = this;

                                    if (objFiltro.Param.department_Id == null || objFiltro.Param.department_Id == "") {
                                        criaObjFTA(objFiltro, self, porc, Ids, "")
                                    } else {
                                        getHashDepartment(objFiltro, self, porc, Ids, data);
                                    }

                                    //$.post(urlGetHashDepartment + "/" + objFiltro.Param.department_Id, function (data) {

                                    //    let objFTA = {

                                    //        DataInicioFTA: encodeURIComponent(objFiltro.startDate),
                                    //        DataFimFTA: encodeURIComponent(objFiltro.endDate),
                                    //        Supervisor_Id: getCookie("webControlCookie")[0].split('=')[1],
                                    //        PercentualNCFTA: porc[self.x],
                                    //        ReincidenciaDesvioFTA: nc[self.x],
                                    //        Unidade_Id: objFiltro.Param.unit_Id,
                                    //        level1Id: objFiltro.Param.level1_Id,
                                    //        level2Id: objFiltro.Param.level2_Id,
                                    //        level3Id: Ids[self.x],
                                    //        ParDepartments_Hash: data,
                                    //        ParCargo_Id: ""
                                    //    };

                                    //    openFTA(objFTA);

                                    //});
                                }
                            }
                        },
                        tooltip: {
                            valueDecimals: 2,
                            valueSuffix: ' qtd'
                        }
                    },

                    Chart.Av(qtdAv, function () { }),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            }, function () {
                    $('#RGTarefasGrafico').append(note);
            });

        }

        function criaObjFTA(objFiltro, self, porc, nc, Ids, data) {
            let objFTA = {

                DataInicioFTA: encodeURIComponent(objFiltro.startDate),
                DataFimFTA: encodeURIComponent(objFiltro.endDate),
                Supervisor_Id: getCookie("webControlCookie")[0].split('=')[1],
                PercentualNCFTA: porc[self.x],
                ReincidenciaDesvioFTA: nc[self.x],
                Unidade_Id: objFiltro.Param.unit_Id,
                level1Id: objFiltro.Param.level1_Id,
                level2Id: objFiltro.Param.level2_Id,
                level3Id: Ids[self.x],
                ParDepartments_Hash: data,
                ParCargo_Id: objFiltro.Param.cargo_Id
            };

            openFTA(objFTA);
        }

        function getHashDepartment(objFiltro, self, porc, nc, Ids, data) {

            $.post(urlGetHashDepartment + "/" + objFiltro.Param.department_Id, function (data) {
                criaObjFTA(objFiltro, self, porc, nc, Ids, data);
            });


        }

        function btnOrdenacao(id, func, btn, sentido) {
            var inputTag = document.createElement("div");
            if (btn == undefined) {
                inputTag.innerHTML = '<input type = "button"  id="Nc"  value="NC " >';
                inputTag.innerHTML += '<input type = "button" id="ProcNc"  value = "% NC " >';
                $("#" + id).empty();
                document.getElementById(id).appendChild(inputTag);
            } else {
                var result = sentido == 'asc' ? "↓": "↑";
                btn[0].value = btn[0].value.replace("↓", "").replace("↑", "");
                btn[0].value = btn[0].value + result;
                $("#" + id + " input").not(btn).val($("#" + id + " input").not(btn).val().replace("↓", "").replace("↑", ""));
            }

            if (sentido == 'asc') {
                $("#" + id + " #Nc").off('click').on("click", function () {
                    func("desc", 0, null, $("#" + id + " #Nc"));
                });
                $("#" + id + " #ProcNc").off('click').on("click", function () {
                    func("desc", 3, null, $("#" + id + " #ProcNc"));
                });
            } else {
                $("#" + id + " #Nc").off('click').on("click", function () {
                    func("asc", 0, null, $("#" + id + " #Nc"));
                })
                $("#" + id + " #ProcNc").off('click').on("click", function () {
                    func("asc", 3, null, $("#" + id + " #ProcNc"));
                })
            }
        }

        function requisitaDadosSGQparaGerarFta(tarefa) {
            objFiltro.Param['level3Name'] = tarefa;
            objFiltro.Param['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
            //objFiltro.Param['unitId'] =
            EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
        }

        function setNameTitulos(NomeGrafico){

            return NomeGrafico;
            if (parseInt(enviar.departmentId) > 0) {
                return NomeGrafico + " | " + Department + ": " + $('#departmentId option:selected').text();
            }else if (objFiltro.Param['departmentName'] != "" && objFiltro.Param['departmentName'] != undefined && objFiltro.Param['departmentName'] != null) {
                return NomeGrafico + " | " + Department + ": " + objFiltro.Param['departmentName'];
            }else{
                return NomeGrafico
            }
        }

        function setNameSubtitulos(NomeGrafico) {

            if (parseInt(enviar.departmentId) > 0) {
                return Resources('department') + ": " + $('#departmentId option:selected').text();
            } else if (objFiltro.Param['departmentName'] != "" && objFiltro.Param['departmentName'] != undefined && objFiltro.Param['departmentName'] != null) {
                return Resources('department') + ": " + objFiltro.Param['departmentName'];
            } else {
                return "";
            }
        }

        //http://jsfiddle.net/highcharts/3bDMe/1/
        $('#sort').click(function(chart) {
            chart.series[0].data.sort(function(a, b) {
                return b.y + a.y;
            });

            var newData = {};

            for (var i = 0; i < chart.series[0].data.length; i++) {
                newData.x = i;
                newData.y = chart.series[0].data[i].y;
                newData.color = Highcharts.getOptions().colors[i];

                chart.series[0].data[i].update(newData, false);

                // Workaround:
                chart.legend.colorizeItem(chart.series[0].data[i], chart.series[0].data[i].visible);
            }

            chart.redraw({ duration: 2000 });
        });

        var Chart = {
            criaTitulo:  function(prefix, sufix){
                return prefix + sufix;
            },
            curvaPareto: function (dados, dadosNC, axis, inverse) {

                var totalNC = dadosNC.reduce(function (a, b) { return a + b; }, 0);
                var porcentagemAcumuladaNC  = 0;
                var data = []
                dadosNC.forEach(function (a) {
                    porcentagemAcumuladaNC += a / totalNC * 100;
                    data.push(Math.round(porcentagemAcumuladaNC, 2));
                });

                return {
                    type: 'line',
                    yAxis: 1,
                    name: Resources('pareto_chart'),
                    color: "Red",
                    data: data,
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    },
                    zones: [{
                        value: 80,
                        color: inverse == undefined ? 'Red' : 'Black'
                    }, {
                        color: inverse == undefined ? 'Black' : 'Red'
                    }],
                }
            },
            serie: function (tipo, nomeDaSerie, corDaSerie, dados, suffix, axis, paddin1, padding2, pointFunc,nome, id) {

                var serieType = tipo == undefined ? 'line' : tipo;
                var sufix = suffix == undefined ? '' : suffix
                var padding1 =  0.3;
                var padding2 = -0.2;


                return  {
                    type: serieType,
                    yAxis: 1,
                    name: nomeDaSerie,
                    color: corDaSerie,
                    data: dados,
                    pointPadding: paddin1,
                    pointPlacement: padding2,
                    dataLabels: {
                        enabled: true,
                        color: 'black',
                        align: 'center',
                        style: {
                            fontSize: '10px',
                        }
                    },
                    point: {
                        events: {
                            click: function () {
                                if(typeof (pointFunc) == 'function'){
                                    pointFunc(nome[this.x], id[this.x]);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueSuffix: sufix
                    }
                }


            },
            CorTotalNc: function () { return '#F7BCB0' },
            CorTotalAv: function () { return '#ccc' },
            CorTotalPareto: function () { return '#900000' },
            CorMeta: function () { return '#67D184' },
            CorTotalProcNc: function () { return '#FF6347' },
            Legend: function () {
                return {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom',
                    borderWidth: 0
                };
            },
            ToolTip: function (isShared, isCrosshairs) {
                return {
                    valueDecimals: 2,
                    shared: isShared,
                    crosshairs: isCrosshairs
                }
            },
            Titulo: function (data, sufix) {

                if(!!sufix)
                    data = data + " | " + sufix;

                return {

                    text: data,
                    x: -20 //center
                };

            },
            Subtitulo: function (data, sufix) {

                if (!!sufix)
                    data = data + ": " + sufix;

                return {

                    text: data,
                    x: -20 //center
                };

            },
            Credits: function () {
                return {
                    enabled: false
                }
            },
            Zones: function () {
                return {
                    enabled: false
                }
            },
            Chart: function (tipo, zoon) {
                return {
                    type: tipo,
                    zoomType: (!!zoon) ? zoon : ''
                }
            },
            yAxisPadraoRelNc: function () {

                return [{
                    allowDecimals: false,
                    min: 0,
                    title: {
                        text: Resources('number_samplers')
                    },
                    labels: {
                        format: '{value}',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    },
                }, {
                    allowDecimals: false,
                    labels: {
                        format: '{value} %',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    },
                    title: {
                        text: '% ' +  Resources('nonconformity'),
                    },
                    opposite: true
                }];

            },
            Xaxis: function (dados) {
                return [{
                    categories: dados
                }];
            },
            NC: function (data, func, nome, id, funcParaAcumuladas, grafico, arr, arr2, arr3) {
                return {
                    name: Resources('nonconformity'),
                    color: Chart.CorTotalNc(),//'rgba(77,143,189,1)',
                    data: data,
                    yAxis: 0,
                    //pointPadding: 0.3,
                    //pointPlacement: -0.2,
                    dataLabels: Chart.DataLabelPadrao(),
                    point: {
                        events: {
                            click: function () {
                                if (!!arr2) {
                                    func(arr[this.x], grafico, arr2[this.x], arr3[this.x]);
                                } else {
                                    func(arr[this.x], grafico, undefined, arr3[this.x]);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' qtd'
                    }
                }

            },
            ProcNc: function (data, func, funcParaAcumuladas, grafico, arr, arr2, arr3){
                $.each(data, function(a, b){
                    data[a] = parseFloat(b) > 100 ? 100 : b;
                });
                return {
                    name: '% ' + Resources('nonconformity'),
                    color: Chart.CorTotalProcNc(),//'rgba(240,124,0,1)',
                    data: data,
                    yAxis: 1,
                    tooltip: {
                        valueSuffix: ' %'
                    },
                    //pointPadding: 0.4,
                    //pointPlacement: -0.2,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {
                            click: function () {
                                if (!!arr2) {
                                    func(arr[this.x], grafico, arr2[this.x], arr3[this.x]);
                                } else {
                                    func(arr[this.x], grafico, undefined, arr3[this.x]);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' % ('+ Resources('nonconformity') + ' * ' + Resources('weight')
                    }
                };

            },
            Meta: function (data, func, nome, id, funcParaAcumuladas){

                return {
                    visible: false,
                    name: '% ' + Resources('goal'),
                    data: data,
                    color: Chart.CorMeta(),//'rgba(81,207,64,1)',
                    //pointPadding: 0.4,
                    //pointPlacement: 0.4,
                    yAxis: 1,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {
                            click: function () {
                                if(!!func)
                                    func(this.category);
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    }
                };

            },
            Av: function (data, func, nome, id, funcParaAcumuladas, grafico, arr, arr2, arr3){

                return {
                    visible: false,
                    name: Resources('evaluation'),
                    data: data,
                    color: Chart.CorTotalAv(),//'rgba(81,207,64,1)',
                    //pointPadding: 0.4,
                    //pointPlacement: 0.2,
                    yAxis: 0,
                    dataLabels: Chart.DataLabelPadrao(),
                    point: {
                        events: {
                            click: function () {
                                if (!!func)
                                    if (!!arr2) {
                                        func(arr[this.x], grafico, arr2[this.x], arr3[this.x]);
                                    } else {
                                        func(arr[this.x], grafico, undefined, arr3[this.x]);
                                    }

                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' qtd'
                    }

                };

            },
            DataLabelPadrao: function (affix) {

                return  {
                    format: !!affix ? '{y:.2f} '+ affix : '{y:.2f}',
                    enabled: true,
                    color: 'black',
                    align: 'center',
                    rotation: 270,
                    x: 2,
                    y: -25,
                    style: {
                        fontSize: '12px',
                        fontWeight: 'Arial'
                    }
                };
            },

        }

        $(document).mousemove(function(e) {
            window.x = e.pageX;
            window.y = e.pageY;
        });

        $('#btnIndicador').on('click', function(){
            popoverMain.addClass('hide');
            if (!IsDepartment) {
                $('#RGDepartamentosGrafico').empty();
                $('#RGDepartamentosShiftGrafico').empty();
                $('#RGOperacoesShiftGrafico').empty();
                objFiltro.Param['departmentName'] = "";
                objFiltro.Param['department_Id'] = "";
                GetGraficoIndicadorUnidade(Aux, Aux2);
            } else {
                $('#RGDepartamentosShiftGrafico').empty();
                $("#PanelFull0").hide();
                GetGraficoIndicadorDepartamento(Aux, Aux2);
            }
        });

        $('# ').on('click', function(){
            popoverMain.addClass('hide');
            $('#RGOperacoesGrafico').empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            GetGraficoDepartamento(Aux, Aux2);
        });

        $('#btnMonitoramento').on('click', function () {
            popoverMain.addClass('hide');
            $('#RGOperacoesShiftGrafico').empty();
            GetMonitoramento(Aux, Aux2);
        });

        $('#btnTarefasAcumuladas').on('click', function () {
            popoverMain.addClass('hide');
            $('#RGOperacoesShiftGrafico').empty();
            GetTarefasAcumuladas(Aux, Aux2);
        });

        $('#btnShift').on('click', function () {
            $("#PanelFull0").hide();
            if (desdobramento == "Indicador") {
                $('#RGOperacoesShiftGrafico').empty();
            }

            $('#RGOperacoesShiftGrafico').empty();
            popoverMain.addClass('hide');
            GetGraficoGenerico();
        });

        function hidePopoverItems() {
            $('#btnIndicador').hide();
            $('#btnMonitoramento').hide();
            $('#btnTarefasAcumuladas').hide();
            $('#btnShift').hide();
            $('#btnDepartamento').hide();
        }

        function showPopover1() {
            $('#btnIndicador').show();
            $('#btnDepartamento').show();
        }

        function showPopover2() {
            $('#btnIndicador').show();
            $('#btnShift').show();
        }

        function showPopover3() {
            $('#btnMonitoramento').show();
            $('#btnTarefasAcumuladas').show();
            $('#btnShift').show();
        }

        function openFTA(obj) {

            let url = $.param(obj);
            let preffix = @Html.Raw(Json.Encode(@ViewBag.urlRootPaFTA));

            $('#ftaModal').modal();
            $('#ftaModalSim').attr('href', preffix + url);

        }

    </script>

}
