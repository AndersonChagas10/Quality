@model SgqSystem.ViewModels.ParamsViewModel
@using SgqSystem.Helpers

@{
    var level = Model.levelControl;
    var id = "level" + Model.levelControl + "_level3Value_accordion";
    var id2 = "#level" + Model.levelControl + "__level3Value_accordion";
    var id3 = "#level" + Model.levelControl + "__level3Value_collapse";
    var id4 = "level" + Model.levelControl + "__level3Value_collapse";
    var click = "ClusterL" + Model.levelControl + ".adiciona($(this))";
}

@*level3Value*@
<div class="panel-group accordion" id="@id">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="@id2" href="@id3" aria-expanded="false"> @Resources.Resource.clusters</a>
            </h4>
        </div>
        <div id="@id4" class="panel-collapse collapse" aria-expanded="false" style="height: 0px;">
            <div class="panel-body">
                
                <table class="table-erp" id="camposCluster">
                    <tbody>
                        <tr class="row" id="level3Value">
                            @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParCompany_Id", Model.paramsDdl.DdlParCompany, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeParL3Value" }), @Html.Label(Resources.Resource.company as string), Table.PosicaoLabel.top)
                        </tr>
                        <tr class="row ParIntervalos" style="display: none;">
                            @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParMeasurementUnit_Id", Model.paramsDdl.DdlParMeasurementUnit, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeDeMedidas" }), @Html.Label(Resources.Resource.measurement_unit as string), Table.PosicaoLabel.top, button: "<button type='button' id='btnUnidadeMedida' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                            @Table.GerarColuna(@Html.DecimalFormatado("paramsDto.parLevel3Value.IntervalMin", Model.paramsDto.parLevel3Value.IntervalMin.Value, "parLevel3Value_IntervalMin", "form-control input-sm"), @Html.Label(Resources.Resource.minimum_range as string), Table.PosicaoLabel.top)
                            @Table.GerarColuna(@Html.DecimalFormatado("paramsDto.parLevel3Value.IntervalMax", Model.paramsDto.parLevel3Value.IntervalMax.Value, "parLevel3Value_IntervalMax", "form-control input-sm"), @Html.Label(Resources.Resource.minimum_range as string), Table.PosicaoLabel.top)
                            <td style="display: none;">
                                <label>@Resources.Resource.values_between</label>
                                <select class="form-control input-sm" id="parIntervalosType" name="paramsDto.parLevel3Value.AcceptableValueBetween"></select>
                            </td>
                        </tr>
                        <tr class="row" style="display:none;padding:10px;">
                            <td colspan="3">
                                *
                                <span id="ParIntervalosLabel"></span>
                            </td>
                        </tr>
                        <tr class="row ParBinarios" style="display: none;">
                            @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolTrue_Id", Model.paramsDdl.DdlParLevel3BoolTrue, htmlAttributes: new { @class = "form-control input-sm", @id = "selectConforme" }), @Html.Label(Resources.Resource.positive_value as string), Table.PosicaoLabel.top)
                            @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolFalse_Id", Model.paramsDdl.DdlParLevel3BoolFalse, htmlAttributes: new { @class = "form-control input-sm", @id = "selectNaoConforme" }), @Html.Label(Resources.Resource.negative_value as string), Table.PosicaoLabel.top, button: "<button type='button' id='btnPositiveNegative' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                        </tr>
                    </tbody>
                </table>

                <table id="tableClusters" class="table table-condensed table-responsive no-margin margin-top" nameModal="Editar Cluster:">
                    <thead>
                        <tr>
                            <th>@Resources.Resource.company</th>
                            <th>@Resources.Resource.data_type_entry</th>
                            <th>@Resources.Resource.company</th>
                            <th>Nivel</th>
                            <th>@Resources.Resource.cluster_points</th>
                            <th class="options"></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>
        </div>
    </div>
</div>


<script>

    var levelControl = @Html.Raw(Json.Encode(@Model.levelControl));
    function atribuiLevelDivCounter (){

        var paramsDto = @Html.Raw(Json.Encode(@Model.paramsDto));
        var levelDomain;
        var listSalvo;

        if(levelControl == 1){
            levelDomain = "newLevel1Modal";
            listSalvo = paramsDto.parLevel1Dto.listLevel1XClusterDto;//
            ClusterL1 = getCounterObject(levelDomain, listSalvo);//
            ClusterL1.carregaDadosDoDb();//
        }
        //if(levelControl == 2){
        //    levelDomain = "newLevel2Modal";
        //    listSalvo = paramsDto.parLevel2Dto.listLevel1XClusterDto;//
        //    ReincidenciaL2 = getCounterObject(levelDomain, listSalvo);//
        //    ReincidenciaL2.carregaDadosDoDb();//
        //}
        //if(levelControl == 3){
        //    levelDomain = "newLevel3Modal";
        //    listSalvo = paramsDto.parLevel3Dto.listLevel1XClusterDto;//
        //    ReincidenciaL3 = getCounterObject(levelDomain, listSalvo);//
        //    ReincidenciaL3.carregaDadosDoDb();//
        //}
    }

    atribuiLevelDivCounter();
    function getCounterObject (levelDomain, listSalvo) {
        return {
            /*Setup*/
            levelControl: levelControl,
            level: levelDomain,
            listObjSalvo: listSalvo,
            idTable: 'tableClusters',//
            tdsNames: ['Cluster_Name','ParCriticalLevel_Name', 'Points',  'btn'],
            getObjAdd: function(isEdit, obj){
                if(isEdit != undefined){
                    obj.Cluster_Name = $('#' + isEdit + ' #valueCluster :selected').text();
                    obj.ParCluster_Id = $('#' + isEdit + ' #valueCluster :selected').val();
                    obj.ParCriticalLevel_Name = $('#' + isEdit + ' #valCrit :selected').text();
                    obj.ParCriticalLevel_Id = $('#' + isEdit + ' #valCrit :selected').val();
                    obj.Points = $('#' + isEdit + ' #pontosCluster').val();
                    return obj;
                }else{
                    return {/*Objeto*/
                        Cluster_Name: $('#' + this.level + ' #valueCluster :selected').text(),
                        ParCluster_Id: $('#' + this.level + ' #valueCluster :selected').val(),
                        ParCriticalLevel_Name: $('#' + this.level + ' #valCrit :selected').text(),
                        ParCriticalLevel_Id: $('#' + this.level + ' #valCrit :selected').val(),
                        Points: $('#' + this.level + ' #pontosCluster').val(),
                        IsActive: true,
                    };
                }
            },
            veifyAdd: function(isEdit) {
                var seletorTato = !!isEdit ? isEdit : this.level;
                /*Valida se pode criar o objeto*/
                if($('#' + seletorTato + ' #valueCluster :selected').val() <= 0){
                    alert("Por favor selecione o cluster.");
                    return;
                }

                if($('#' + seletorTato + ' #valCrit :selected').val() <= 0){
                    alert("Por favor selecione o nivel critico.");
                    return;
                }

                if($('#' + seletorTato + ' #pontosCluster').val().replace(/[^0-9.]/g, '') == ""){
                    alert("Por favor preencha o campo pontos do cluster.");
                    return;
                }
            },
            incluiNoObjetoParaSubmit: function(dados){

                var level = this.levelControl;
                $('#' + this.level + ' #' + this.idTable + ' > tbody > tr ').each(function(c, obj){

                    var o = $(obj).data();
                    //#edit
                    if((o.Id != null || o.Id != undefined) && o.Id > 0){
                        dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].Id"] = o.Id;
                    }

                    dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].ParCluster_Id"] = o.ParCluster_Id;
                    dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].ParCriticalLevel_Id"] = o.ParCriticalLevel_Id;
                    dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].Points"] = o.Points;
                    dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].IsActive"] = o.IsActive;
                    //
                });

            },
            carregaDadosDoDb: function(){
                var id = this.level + ' #' + this.idTable;
                var tdNamess = this.tdsNames;
                if( this.listObjSalvo != null){ /*Carrega regras de NC*/
                    this.listObjSalvo.forEach(function(o, c){
                        o["Cluster_Name"] = o.ParCluster.Name;
                        o["ParCriticalLevel_Name"] = o.ParCriticalLevel.Name;
                        crudNxN.adiciona(o,  id, tdNamess);
                    });
                }
            },
            /*Fim Setup*/
            adiciona: function(e) {
                this.veifyAdd();
                var object = this.getObjAdd();
                var valid = this.verifyJaExiste(object);
                if(valid){
                    crudNxN.adiciona(object, this.level + ' #' + this.idTable, this.tdsNames);
                }
            },
            verifyJaExiste: function(obj) {
                var isValid  = true;
                $('#'+this.level + ' #' + this.idTable).find('tbody > tr').each(function(c, o) {
                    if($(o).data().ParCluster_Id == obj.ParCluster_Id){
                        alert("O cluster não pode ser duplicado, por favor verifique a seleção.")  
                        isValid = false
                    }
                });
                return isValid;
            }
        };
    }


   

</script>