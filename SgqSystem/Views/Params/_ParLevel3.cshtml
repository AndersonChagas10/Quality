@model SgqSystem.ViewModels.ParamsViewModel
@using SgqSystem.Helpers
@{
    ViewBag.Title = "ParLeve3";
    //  var url = Url.Action("AddUpdateLevel3", "api/ParamsApi"); //URL relativa
    //  var urlGetLevel1 = Url.Action("GetParLevel3ById", "api/ParamsApi"); //URL relativa
}
<div id="newLevel3Modal">
    @using (Html.BeginForm())
    {
        <div class="row">
            <div class="col-lg-12">

                <table class="table-erp">
                    <tr class="row hide">
                        @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Id), @Html.Label("Id (para testes)"), Table.PosicaoLabel.top)
                    </tr>
                    <tr class="row">

                        @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Name, htmlAttributes: new { @class = "form-control input-sm" })
                            , @Html.Label(Resources.Resource.level3_name)
                            , Table.PosicaoLabel.top
                            , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Dto.Name, null, new { @class = "text-danger" }))

                        @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Description, htmlAttributes: new { @class = "form-control input-sm" })
                            , @Html.Label(Resources.Resource.level3_description)
                            , Table.PosicaoLabel.top
                            , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Dto.Description, null, new { @class = "text-danger" }))

                        @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3InputType_Id", Model.paramsDdl.DdlParLevel3InputType, htmlAttributes: new { @class = "form-control input-sm", @id = "selectTipoInput" })
                           , @Html.Label(Resources.Resource.data_type_entry)
                           , Table.PosicaoLabel.top
                           , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Value.ParLevel3InputType_Id, null, new { @class = "text-danger" }))

                    </tr>
                    <tr class="row" id="companyValueL3">
                        @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParCompany_Id", Model.paramsDdl.DdlParCompany, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeParL3Value" }), @Html.Label(Resources.Resource.company), Table.PosicaoLabel.top)
                    </tr>
                    <tr class="row ParIntervalos" style="display: none;">
                        @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParMeasurementUnit_Id", Model.paramsDdl.DdlParMeasurementUnit, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeDeMedidas" }), @Html.Label(Resources.Resource.measurement_unit), Table.PosicaoLabel.top, button: "<button type='button' id='btnUnidadeMedida' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                        @Table.GerarColuna(@Html.DecimalFormatado("paramsDto.parLevel3Value.IntervalMin", Model.paramsDto.parLevel3Value.IntervalMin.Value, "parLevel3Value_IntervalMin", "form-control input-sm"), @Html.Label(Resources.Resource.minimum_range), Table.PosicaoLabel.top)
                        @Table.GerarColuna(@Html.DecimalFormatado("paramsDto.parLevel3Value.IntervalMax", Model.paramsDto.parLevel3Value.IntervalMax.Value, "parLevel3Value_IntervalMax", "form-control input-sm"), @Html.Label(Resources.Resource.maximum_range), Table.PosicaoLabel.top)
                        <td style="display: none;">
                            <label>@Resources.Resource.values_between</label>
                            <select class="form-control input-sm" id="parIntervalosType" name="paramsDto.parLevel3Value.AcceptableValueBetween"></select>
                        </td>
                    </tr>
                    <tr class="row" style="display:none;padding:10px;">
                        <td colspan="3">
                            *
                            <span id="ParIntervalosLabel"></span>
                        </td>
                    </tr>
                    <tr class="row ParBinarios" style="display: none;">
                        @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolTrue_Id", Model.paramsDdl.DdlParLevel3BoolTrue, htmlAttributes: new { @class = "form-control input-sm", @id = "selectConforme" }), @Html.Label(Resources.Resource.positive_value), Table.PosicaoLabel.top)
                        @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolFalse_Id", Model.paramsDdl.DdlParLevel3BoolFalse, htmlAttributes: new { @class = "form-control input-sm", @id = "selectNaoConforme" }), @Html.Label(Resources.Resource.negative_value), Table.PosicaoLabel.top, button: "<button type='button' id='btnPositiveNegative' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                    </tr>
                  
                </table>


                <table id="tableLevel3Value" class="table table-condensed table-responsive no-margin margin-top" nameModal="Editar tipo de dados de entrada:">
                    <thead>
                        <tr>
                            <th>@Resources.Resource.data_type_entry</th>
                            <th>@Resources.Resource.company</th>
                            <th>@Resources.Resource.measurement_unit</th>
                            <th>@Resources.Resource.minimum_range</th>
                            <th>@Resources.Resource.maximum_range</th>
                            <th>@Resources.Resource.positive_value</th>
                            <th>@Resources.Resource.negative_value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>


                @{
                    Model.levelControl = 3;
                }

                @Html.Partial("_ReincidenciaXLevel", Model)

                <div class="panel panel-default margin-top">
                    <div class="panel-heading"><h4 style="margin: 0px; padding: 10px 15px;">@Resources.Resource.weight</h4></div>
                    <div class="panel-body">
                        <table class="table-erp">
                            <tr>
                                @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.pesoDoVinculo, new { @class = "form-control input-sm" }), @Html.Label(Resources.Resource.inform_the_weight_of_the_level3), Table.PosicaoLabel.top)
                                @Table.GerarColunaButton(@Html.DropDownListFor(m => m.paramsDto.parLevel3Dto.listGroupsLevel2, new SelectList(Model.paramsDto.parLevel3Dto.listGroupsLevel2, dataValueField: "Id", dataTextField: "Name"), Resources.Resource.select + "...", new { @class = "form-control input-sm" }), @Html.Label(Resources.Resource.level2_group), Table.PosicaoLabel.top, button: "<button type='button' class='btn btn-primary btn-sm' onclick='saveLevel3Level2()' id='savePontos'>"+Resources.Resource.attach+"</button>")
                            </tr>
                        </table>
                        
                    </div>
                </div>

                <div id="painelPeso" class="panel panel-default" style="padding: 0px 16px; display:none;">
                    <h5>
                        <b>@Resources.Resource.defined_weight: </b>
                        <label id="pesoDefinido"></label>
                    </h5>
                </div>

                <button type="button" id="btnSaveNewLevel3" data-loading-text="@Resources.Resource.saving_the_level3" onclick="indexParamsLevel3.enviarDadosParaApi();" class="btn btn-danger margin-button">@Resources.Resource.save_level3</button>
            </div>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="modalPositiveNegative" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog  modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">@Resources.Resource.positive_negative</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-12">@Resources.Resource.positive_value</div>
                            <div class="col-xs-12">
                                <input class="form-control input-sm" id="modalInputPositive" />
                            </div>
                            <div class="col-xs-12">@Resources.Resource.negative_value</div>
                            <div class="col-xs-12">
                                <input class="form-control input-sm" id="modalInputNegative" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">@Resources.Resource.save</button>
                    </div>
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.paramsDto.parLevel3Value.Id)

        <!-- Modal -->
        <div class="modal fade" id="modalUnidadeMedida" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog  modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">@Resources.Resource.measurement_unit</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-12">@Resources.Resource.measurement_unit</div>
                            <div class="col-xs-12">
                                <input class="form-control input-sm" id="modalInputMeasurementUnit" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">@Resources.Resource.save</button>
                    </div>
                </div>
            </div>
        </div>

    }

</div>
<script>

   /* public int ParLevel3_Id { get; set; }
    public int ParLevel3InputType_Id { get; set; }
    public int? ParLevel3BoolFalse_Id { get; set; }
    public int? ParLevel3BoolTrue_Id { get; set; }
    public int ParCompany_Id { get; set; }
    public int ParMeasurementUnit_Id { get; set; }
    public bool? AcceptableValueBetween { get; set; }
    public decimal? IntervalMin { get; set; } = 0;
    public decimal? IntervalMax { get; set; } = 0;
    public bool IsActive { get; set; } = true;
    public ParLevel3BoolFalseDTO ParLevel3BoolFalse { get; set; }
    public ParLevel3BoolTrueDTO ParLevel3BoolTrue { get; set; }
    public ParLevel3InputTypeDTO ParLevel3InputType { get; set; }
    public ParMeasurementUnitDTO ParMeasurementUnit { get; set; }*/

    var level3Value =  {
        /*Setup*/
        levelControl: 1,
        level: "newLevel3Modal",
        listObjSalvo: listSalvo,
        idTable: 'tableLevel3Value',//
        tdsNames: ['Cluster_Name','ParCriticalLevel_Name', 'Points',  'btn'],
        getObjAdd: function(isEdit, obj){
            if(isEdit != undefined){
                obj.Cluster_Name = $('#' + isEdit + ' #valueCluster :selected').text();
                
                return obj;
            }else{
                return {/*Objeto*/
                    Cluster_Name: $('#' + this.level + ' #valueCluster :selected').text(),
                    ParCluster_Id: $('#' + this.level + ' #valueCluster :selected').val(),
                    ParCriticalLevel_Name: $('#' + this.level + ' #valCrit :selected').text(),
                    ParCriticalLevel_Id: $('#' + this.level + ' #valCrit :selected').val(),
                    Points: $('#' + this.level + ' #pontosCluster').val(),
                    IsActive: true,
                };
            }
        },
        veifyAdd: function(isEdit) {
            var seletorTato = !!isEdit ? isEdit : this.level;
            /*Valida se pode criar o objeto*/
            if($('#' + seletorTato + ' #valueCluster :selected').val() <= 0){
                alert("Por favor selecione o cluster.");
                return;
            }

            if($('#' + seletorTato + ' #valCrit :selected').val() <= 0){
                alert("Por favor selecione o nivel critico.");
                return;
            }

            if($('#' + seletorTato + ' #pontosCluster').val().replace(/[^0-9.]/g, '') == ""){
                alert("Por favor preencha o campo pontos do cluster.");
                return;
            }
        },
        incluiNoObjetoParaSubmit: function(dados){

            var level = this.levelControl;
            $('#' + this.level + ' #' + this.idTable + ' > tbody > tr ').each(function(c, obj){

                var o = $(obj).data();
                //#edit
                if((o.Id != null || o.Id != undefined) && o.Id > 0){
                    dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].Id"] = o.Id;
                }

                dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].ParCluster_Id"] = o.ParCluster_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].ParCriticalLevel_Id"] = o.ParCriticalLevel_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].Points"] = o.Points;
                dados["paramsDto.parLevel" + level + "Dto.listLevel1XClusterDto[" + c + "].IsActive"] = o.IsActive;
                //
            });

        },
        carregaDadosDoDb: function(){
            var id = this.level + ' #' + this.idTable;
            var tdNamess = this.tdsNames;
            if( this.listObjSalvo != null){ /*Carrega regras de NC*/
                this.listObjSalvo.forEach(function(o, c){
                    o["Cluster_Name"] = o.ParCluster.Name;
                    o["ParCriticalLevel_Name"] = o.ParCriticalLevel.Name;
                    crudNxN.adiciona(o,  id, tdNamess);
                });
            }
        },
        /*Fim Setup*/
        adiciona: function(e) {
            this.veifyAdd();
            var object = this.getObjAdd();
            var valid = this.verifyJaExiste(object);
            if(valid){
                crudNxN.adiciona(object, this.level + ' #' + this.idTable, this.tdsNames);
            }
        },
        verifyJaExiste: function(obj) {
            var isValid  = true;
            $('#'+this.level + ' #' + this.idTable).find('tbody > tr').each(function(c, o) {
                if($(o).data().ParCluster_Id == obj.ParCluster_Id){
                    alert("O cluster não pode ser duplicado, por favor verifique a seleção.")  
                    isValid = false
                }
            });
            return isValid;
        }
    };

    var hasPeso = @Html.Raw(Json.Encode(@Model.paramsDto.parLevel3Dto.pesoDoVinculo));
    var grouLevel2Selected = @Html.Raw(Json.Encode(@Model.paramsDto.parLevel3Dto.groupLevel2Selected));
    //var 
    $('#paramsDto_parLevel3Dto_pesoDoVinculo').val(hasPeso);

    $('#pesoDefinido').html(hasPeso).show();
    $('#painelPeso').show();

    /*Reincidencia*/
    var counterReincidencial3 = 0;
    function l3RemoveReincidencia(e) {
        e.parents('tr').find('input[type="hidden"]').attr("disabled", false).attr("name", e.parents('tr').find('input[type="hidden"]').attr('name') + "[" + counterReincidencial3 + "]");
        e.parents('tr').hide();
        counterReincidencial3++;
        console.log(e.parents('tr'));
        updateAllTables();
    }

    $('#l3BtnAddFrequenciaReincidencia').click(function (e) {

        e.preventDefault();
        if($('#l3SelectFrequenciaReincidencia :selected').val() <= 0){
            openMessageModal("Alerta", "É necessário selecionar a Frequência");
            //alert('É necessário selecionar a Frequência');
            return;
        }

        if($('#l3InputNumeroNC').val().length <= 0){
            openMessageModal("Alerta", "É necessário informar o Número de NC");
            //alert('É necessário informar o Número de NC');
            return;
        }

        if($('#l3InputVigencia').val().length <= 0){
            openMessageModal("Alerta", "É necessário selecionar a Vigência");
            //alert('É necessário selecionar a Vigência');
            return;
        }

        var NcNumber = $('#l3InputNumeroNC').val();
        var Vigencia = $('#l3InputVigencia').val();
        var idFrequencia = $('#l3SelectFrequenciaReincidencia').val()
        var includeItem = true;

        if (includeItem == true) {
            var indexValue = $('#l3TableRepetition tbody tr').not('.existent').length -1;

            var inputHidden = '<input class="counterRegraReincidenciaClass" type="hidden" name="paramsDto.parLevel3Dto.listParRelapseDto[' + indexValue + '].NcNumber" value="' + NcNumber + '" />' +
                              '<input class="LocalLevel3Class" type="hidden" name="paramsDto.parLevel3Dto.listParRelapseDto[' + indexValue + '].EffectiveLength" value="' + Vigencia + '" />' +
                              '<input class="LocalLevel3Class" type="hidden" name="paramsDto.parLevel3Dto.listParRelapseDto[' + indexValue + '].ParFrequency_Id" value="' + idFrequencia + '" />';

            var elemento = $('<tr><td>' + 'Regra ' + (indexValue + 1) + " </td><td> " + NcNumber + " </td><td> " + Vigencia + " </td><td> " + $('#l3SelectFrequenciaReincidencia option:selected').text() + inputHidden + '</td><td><button type="button" class="btn btn-danger btn-xs pull-right" onclick="RemoverReincidencia($(this));"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>' + '</td><tr>');
            $('#l3TableRepetition > tbody').append(elemento[0]);
            $('#l3SelectFrequenciaReincidencia').prop('selectedIndex', 0);
            $('#l3InputNumeroNC, #l3InputVigencia').val("");
            $('#l3InputNumeroNC').focus();

            updateAllTables();
        }

    });
    
    /*Fim Reincidencia*/
    
    $('#btnUnidadeMedida').click(function (e) {
        $('#modalUnidadeMedida').modal({ backdrop: false });
    });

    $('#btnPositiveNegative').click(function (e) {
        $('#modalPositiveNegative').modal({ backdrop: false });
    });

    $(document).on('input', '#parLevel3Value_IntervalMax', function (e) {
        
        changeCombo();
      
    });

    $(document).on('input', '#parLevel3Value_IntervalMin', function (e) {
        
        changeCombo();
      
    });

    function changeCombo(){
        //se os dois campos estão nulos
        parIntervalosTypeCreate();        
    }

    function level03ValueIntervalWriter(valueMin, valueMax) {
        return "O valor aceitável deve ser menor que " + valueMin + " e maior que " + valueMax;
    }
  
    function parIntervalosTypeCreate() {

        var value = "";
        if($('#selectUnidadeDeMedidas :selected').val() > 0)
            value = $('#selectUnidadeDeMedidas :selected').text();

        if ($("#parLevel3Value_IntervalMin").val() == "" && !$("#parLevel3Value_IntervalMax").val() == "") {
            var options =''
                "<option value='0'>" +
                    "O valor aceitável deve ser igual ou maior que " + $("#parLevel3Value_IntervalMax").val()+" "+ value+
                "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();

        }

        else if (!$("#parLevel3Value_IntervalMin").val() == "" && $("#parLevel3Value_IntervalMax").val() == "") {
            var options =
                "<option value='0'>" +
                    "O valor aceitável deve ser igual ou maior que " + $("#parLevel3Value_IntervalMin").val()+" "+ value+
                "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();

        }

        else if (!$("#parLevel3Value_IntervalMin").val() == "" && !$("#parLevel3Value_IntervalMax").val() == "") {
            var options =
                "<option value='0'>" +
                    "O valor e aceitavel quando esta entre " + $("#parLevel3Value_IntervalMin").val() + " e " + $("#parLevel3Value_IntervalMax").val() +" "+ value+
                "</option>" +
                "<option value='1'>" +
                    "O valor e aceitavel quando e menor que " + $("#parLevel3Value_IntervalMin").val() + " ou maior que " + $("#parLevel3Value_IntervalMax").val() +" "+ value+
                "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();
        } else {
            $("#parIntervalosType").parents("td").hide();
        }
    }


    $('#selectTipoInput').change(function () {

        if ($("#selectTipoInput option:selected").val() == "-1") {

            $('#selectNaoConforme').val(-1)
            $('#selectConforme').val(-1)
            $('#selectUnidadeDeMedidas').val(-1)
            $('#paramsDto_parLevel3Value_IntervalMin, #paramsDto_parLevel3Value_IntervalMax').val("")

            $('.ParIntervalos').hide();
            $('.ParBinarios').hide();

            $('#companyValueL3').hide();
        }

        //Binários
        if ($("#selectTipoInput option:selected").val() == "1") {
            $('.ParIntervalos').hide();
            $('.ParBinarios').fadeIn();
            $('#companyValueL3').fadeIn();
            $('#selectUnidadeDeMedidas').val(-1);
            $('#paramsDto_parLevel3Value_IntervalMin').val("");
            $('#paramsDto_parLevel3Value_IntervalMax').val("");
            $('#parIntervalosType').empty().parents('td').hide();
        }
        //Intervalos
        if ($("#selectTipoInput option:selected").val() == "3") {
            $('.ParBinarios').hide();
            $('.ParIntervalos').fadeIn();
            $('#selectConforme').val(-1);
            $('#selectNaoConforme').val(-1);
            $('#companyValueL3').fadeIn();

        }
    });

    $('#selectTipoInput').change();

    $('#btnAddFrequenciaReincidenciaLevel3').click(function (e) {
    
        e.preventDefault();
    
        var NcNumber = $('#inputNumeroNCLevel3').val();
        var Vigencia = $('#inputVigenciaLevel3').val();
        var idFrequencia = $('#selectFrequenciaReincidenciaLevel3').val()
        var includeItem = true;
    
        if (includeItem == true) {
            var indexValue = $('#tableRepetitionLevel3 tbody tr').length;
    
            var inputHidden = '<input class="counterRegraReincidenciaClass" type="hidden" name="paramsDto.listParRelapseDto[' + indexValue + '].NcNumber" value="' + NcNumber + '" />' +
                              '<input class="LocalLevel3Class" type="hidden" name="paramsDto.listParRelapseDto[' + indexValue + '].EffectiveLength" value="' + Vigencia + '" />' +
                              '<input class="LocalLevel3Class" type="hidden" name="paramsDto.listParRelapseDto[' + indexValue + '].ParFrequency_Id" value="' + idFrequencia + '" />';
    
            var elemento = $('<tr><td>' + 'Regra ' + (indexValue + 1) + " </td><td> " + NcNumber + " </td><td> " + Vigencia + " </td><td> " + $('#selectFrequenciaReincidenciaLevel3 option:selected').text() + inputHidden + '</td><td><button type="button" class="btn btn-danger btn-xs pull-right" id="btnRemoverFrequenciaReincidenciaLevel3"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>' + '</td><tr>');
            $('#tableRepetitionLevel3 tbody').append(elemento);
            $('#selectFrequenciaReincidenciaLevel3').prop('selectedIndex', 0);
            $('#inputNumeroNCLevel3, #inputVigencia').val("");
            $('#inputNumeroNCLevel3').focus();
    
            updateAllTables();
        }
    
    });

    $(document).ready(function () {

        var modalPontos = $('#modalPontos').detach();
        $('body > #modalPontos').remove();
        modalPontos.appendTo('body');
        if(grouLevel2Selected > 0)
            $('#paramsDto_parLevel3Dto_listGroupsLevel2').val(grouLevel2Selected)

        updateAllTables();

        $('[data-toggle="popover"]').popover();

        ///initialize form
        initialFormLevel3 = $($('form')[2]).clone();

        $('[data-toggle="popover"]').popover();
    });

</script>
