@model SgqSystem.ViewModels.ParamsViewModel
@using SgqSystem.Helpers
@{
    ViewBag.Title = "ParLeve3";
    //  var url = Url.Action("AddUpdateLevel3", "api/ParamsApi"); //URL relativa
    //  var urlGetLevel1 = Url.Action("GetParLevel3ById", "api/ParamsApi"); //URL relativa
}
<div id="newLevel3Modal">
    @using (Html.BeginForm())
    {
    <div class="row">
        <div class="col-lg-12">

            <table class="table-erp">
                <tr class="row hide">
                    @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Id), @Html.Label("Id (para testes)"), Table.PosicaoLabel.top)
                </tr>
                <tr class="row">

                    @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Name, htmlAttributes: new { @class = "form-control input-sm" })
                            , @Html.Label(Resources.Resource.level3_name)
                            , Table.PosicaoLabel.top
                            , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Dto.Name, null, new { @class = "text-danger" }))

                    @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.Description, htmlAttributes: new { @class = "form-control input-sm" })
                            , @Html.Label(Resources.Resource.level3_description)
                            , Table.PosicaoLabel.top
                            , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Dto.Description, null, new { @class = "text-danger" }))

                    @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3InputType_Id", Model.paramsDdl.DdlParLevel3InputType, htmlAttributes: new { @class = "form-control input-sm", @id = "selectTipoInput" })
                           , @Html.Label(Resources.Resource.data_type_entry)
                           , Table.PosicaoLabel.top
                           , error: @Html.ValidationMessageFor(m => m.paramsDto.parLevel3Value.ParLevel3InputType_Id, null, new { @class = "text-danger" }))

                </tr>
               
                <tr class="row ParIntervalos" style="display: none;">
                    @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParMeasurementUnit_Id", Model.paramsDdl.DdlParMeasurementUnit, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeDeMedidas" }), @Html.Label(Resources.Resource.measurement_unit), Table.PosicaoLabel.top, button: "<button type='button' id='btnUnidadeMedida' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                    @Table.GerarColuna(@Html.TextBox("paramsDto.parLevel3Value.IntervalMin", Model.paramsDto.parLevel3Value.IntervalMin.Value, "parLevel3Value_IntervalMin", "form-control input-sm maskDecimal"), @Html.Label(Resources.Resource.minimum_range), Table.PosicaoLabel.top)
                    @Table.GerarColunaButton(@Html.TextBox("paramsDto.parLevel3Value.IntervalMax", Model.paramsDto.parLevel3Value.IntervalMax.Value, "parLevel3Value_IntervalMax", "form-control input-sm maskDecimal"), @Html.Label(Resources.Resource.maximum_range), Table.PosicaoLabel.top)
                    <td style="display: none;">
                        <label>@Resources.Resource.values_between</label>
                        <select class="form-control input-sm" id="parIntervalosType" name="paramsDto.parLevel3Value.AcceptableValueBetween"></select>
                    </td>
                </tr>
                <tr class="row" style="display:none;padding:10px;">
                    <td colspan="3">
                        *
                        <span id="ParIntervalosLabel"></span>
                    </td>
                </tr>
                             
                <tr class="row ParCalculado" style="display: none;">
                    @Table.GerarColunaButton(@Html.DropDownList("ParCalculado.ParMeasurementUnit_Id", Model.paramsDdl.DdlParMeasurementUnit, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeDeMedidas" }), @Html.Label(Resources.Resource.measurement_unit), Table.PosicaoLabel.top, button: "<button type='button' id='btnUnidadeMedida' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                    @Table.GerarColuna(@Html.TextBox("ParCalculado.IntervalMin", Model.paramsDto.parLevel3Value.IntervalMin.Value, htmlAttributes: new { @class = "form-control input-sm maskCalculado" }), @Html.Label(Resources.Resource.minimum_range), Table.PosicaoLabel.top)
                    @Table.GerarColunaButton(@Html.TextBox("ParCalculado.IntervalMax", Model.paramsDto.parLevel3Value.IntervalMax.Value, htmlAttributes: new { @class = "form-control input-sm maskCalculado" }), @Html.Label(Resources.Resource.maximum_range), Table.PosicaoLabel.top)
                    <td style="display: none;">
                        <label>@Resources.Resource.values_between</label>
                        <select class="form-control input-sm" id="parIntervalosType" name="paramsDto.parLevel3Value.AcceptableValueBetween"></select>
                    </td>
                </tr>
                <tr class="row" style="display:none;padding:10px;">
                    <td colspan="3">
                        *
                        <span id="ParIntervalosLabel"></span>
                    </td>
                </tr>
  
                <tr class="row ParBinarios" style="display: none;">
                    @Table.GerarColuna(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolTrue_Id", Model.paramsDdl.DdlParLevel3BoolTrue, htmlAttributes: new { @class = "form-control input-sm", @id = "selectConforme" }), @Html.Label(Resources.Resource.positive_value), Table.PosicaoLabel.top)
                    @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParLevel3BoolFalse_Id", Model.paramsDdl.DdlParLevel3BoolFalse, htmlAttributes: new { @class = "form-control input-sm", @id = "selectNaoConforme" }), @Html.Label(Resources.Resource.negative_value), Table.PosicaoLabel.top, button: "<button type='button' id='btnPositiveNegative' class='btn btn-primary btn-sm'><i class='fa fa-external-link' aria-hidden='true'></i></button>")
                </tr>
                <tr class="row" id="companyValueL3">
                    @Table.GerarColunaButton(@Html.DropDownList("paramsDto.parLevel3Value.ParCompany_Id", Model.paramsDdl.DdlParCompany, htmlAttributes: new { @class = "form-control input-sm", @id = "selectUnidadeParL3Value" }), @Html.Label(Resources.Resource.company), Table.PosicaoLabel.top
                   , button: "<button type='button' id='btnSaveCounter' onclick='level3Value.adiciona(); ' class='btn btn-primary btn-sm'><i class='fa fa-plus' aria-hidden='true'></i></button>")
                    
                </tr>
            </table>

            <table id="tableLevel3Value" class="table table-condensed table-responsive no-margin margin-top" nameModal="Editar tipo de dados de entrada:">
                <thead>
                    <tr>
                        <th>@Resources.Resource.data_type_entry</th>
                        <th>@Resources.Resource.company</th>
                        <th>@Resources.Resource.measurement_unit</th>
                        <th>@Resources.Resource.minimum_range</th>
                        <th>@Resources.Resource.maximum_range</th>
                        <th>@Resources.Resource.values_between</th>
                        <th>@Resources.Resource.positive_value</th>
                        <th>@Resources.Resource.negative_value</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

            @{
                Model.levelControl = 3;
            }

            @Html.Partial("_ReincidenciaXLevel", Model)

            <div class="panel panel-default margin-top">
                <div class="panel-heading"><h4 style="margin: 0px; padding: 10px 15px;">@Resources.Resource.weight</h4></div>
                <div class="panel-body">
                    <table class="table-erp">
                        <tr>
                            @Table.GerarColuna(@Html.TextBoxFor(m => m.paramsDto.parLevel3Dto.pesoDoVinculo, new { @class = "form-control input-sm" }), @Html.Label(Resources.Resource.inform_the_weight_of_the_level3), Table.PosicaoLabel.top)
                            @Table.GerarColunaButton(@Html.DropDownListFor(m => m.paramsDto.parLevel3Dto.listGroupsLevel2, new SelectList(Model.paramsDto.parLevel3Dto.listGroupsLevel2, dataValueField: "Id", dataTextField: "Name"), Resources.Resource.select + "...", new { @class = "form-control input-sm" }), @Html.Label(Resources.Resource.level2_group), Table.PosicaoLabel.top, button: "<button type='button' class='btn btn-primary btn-sm' onclick='saveLevel3Level2()' id='savePontos'>"+Resources.Resource.attach+"</button>")
                        </tr>
                    </table>

                </div>
            </div>

            <div id="painelPeso" class="panel panel-default" style="padding: 0px 16px; display:none;">
                <h5>
                    <b>@Resources.Resource.defined_weight: </b>
                    <label id="pesoDefinido"></label>
                </h5>
            </div>

            <button type="button" id="btnSaveNewLevel3" data-loading-text="@Resources.Resource.saving_the_level3" onclick="indexParamsLevel3.enviarDadosParaApi();" class="btn btn-danger margin-button">@Resources.Resource.save_level3</button>
        </div>
    </div>
        <!-- Modal -->
                <div class="modal fade" id="modalPositiveNegative" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog  modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">@Resources.Resource.positive_negative</h4>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-xs-12">@Resources.Resource.positive_value</div>
                                    <div class="col-xs-12">
                                        <input class="form-control input-sm" id="modalInputPositive" />
                                    </div>
                                    <div class="col-xs-12">@Resources.Resource.negative_value</div>
                                    <div class="col-xs-12">
                                        <input class="form-control input-sm" id="modalInputNegative" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" onclick="clicModalBinarioSave()">@Resources.Resource.save</button>
                            </div>
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(m => m.paramsDto.parLevel3Value.Id)

        <!-- Modal -->
                <div class="modal fade" id="modalUnidadeMedida" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog  modal-sm" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">@Resources.Resource.measurement_unit</h4>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="col-xs-12">@Resources.Resource.measurement_unit</div>
                                    <div class="col-xs-12">
                                        <input class="form-control input-sm" id="modalInputMeasurementUnit" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary">@Resources.Resource.save</button>
                            </div>
                        </div>
                    </div>
                </div>

    }

</div>
<script>

    /*
    public int ParLevel3_Id { get; set; }
    public int ParLevel3InputType_Id { get; set; }
    public int? ParLevel3BoolFalse_Id { get; set; }
    public int? ParLevel3BoolTrue_Id { get; set; }
    public int ParCompany_Id { get; set; }
    public int ParMeasurementUnit_Id { get; set; }
    public bool? AcceptableValueBetween { get; set; }
    public decimal? IntervalMin { get; set; } = 0;
    public decimal? IntervalMax { get; set; } = 0;
    public bool IsActive { get; set; } = true;
    public ParLevel3BoolFalseDTO ParLevel3BoolFalse { get; set; }
    public ParLevel3BoolTrueDTO ParLevel3BoolTrue { get; set; }
    public ParLevel3InputTypeDTO ParLevel3InputType { get; set; }
    public ParMeasurementUnitDTO ParMeasurementUnit { get; set; }
    */
    var levelParamsDTO = @Html.Raw(Json.Encode(@Model.paramsDto));
    var level3Value =  {
        /*Setup*/
        levelControl: 3,
        level: "newLevel3Modal",
        listObjSalvo: levelParamsDTO.parLevel3Dto.listLevel3Value,
        idTable: 'tableLevel3Value',//
        tdsNames: ['ParLevel3InputType_Name', 'ParCompany_Name', 'ParMeasurementUnit_Name', 'IntervalMin', 'IntervalMax', 'AcceptableValueBetween_Name', 'ParLevel3BoolFalse_Name', 'ParLevel3BoolTrue_Name', 'btn'],
        getObjAdd: function(isEdit, obj){
            if(isEdit != undefined){
                obj.ParLevel3InputType_Id = $('#' + isEdit + ' #selectTipoInput :selected').text();

                return obj;
            }else{

                var companyName = $('#' + level3Value.level + ' #selectUnidadeParL3Value :selected').text();
                var companyValue = $('#' + level3Value.level + ' #selectUnidadeParL3Value :selected').val();



                var selectTipoInputName = $('#' + level3Value.level + ' #selectTipoInput :selected').text();
                var selectTipoInput = $('#' + level3Value.level + ' #selectTipoInput :selected').val();
                var selectNaoConformeName = $('#' + level3Value.level + ' #selectNaoConforme :selected').text();
                var selectNaoConforme = $('#' + level3Value.level + ' #selectNaoConforme :selected').val();
                var selectConformeName = $('#' + level3Value.level + ' #selectConforme :selected').text();
                var selectConforme = $('#' + level3Value.level + ' #selectConforme :selected').val();

                var selectUnidadeDeMedidasName = $('#' + level3Value.level + ' #selectUnidadeDeMedidas :selected').text(); //Unidade de Medida
                var selectUnidadeDeMedidas = $('#' + level3Value.level + ' #selectUnidadeDeMedidas :selected').val();
                var parIntervalosTypeName = $('#' + level3Value.level + ' #parIntervalosType :selected').text(); //Valores entre
                var parIntervalosType = $('#' + level3Value.level + ' #parIntervalosType :selected').val();
                var parLevel3Value_IntervalMin = $('#' + level3Value.level + ' #parLevel3Value_IntervalMin').val(); //Limite Inferior
                var parLevel3Value_IntervalMax = $('#' + level3Value.level + ' #parLevel3Value_IntervalMax').val(); //Limite Superior

                if(companyValue == -1){
                    companyValue = null;
                    companyName = "Todas";
                }

                if(selectTipoInput == 3){
                    selectConformeName = "";
                    selectNaoConformeName = "";
                }

                if(selectTipoInput == 1){
                    selectUnidadeDeMedidasName = "";
                    parLevel3Value_IntervalMin = "";
                    parLevel3Value_IntervalMax = "";
                    parIntervalosTypeName  = "";
                }

                return {

                    ParCompany_Name:                companyName,
                    ParCompany_Id:                  companyValue,
                    IsActive:                       true,

                    //Bin
                    ParLevel3InputType_Name:        selectTipoInputName,
                    ParLevel3InputType_Id:          selectTipoInput,
                    ParLevel3BoolFalse_Name:        selectNaoConformeName,
                    ParLevel3BoolFalse_Id:          selectNaoConforme,
                    ParLevel3BoolTrue_Name:         selectConformeName,
                    ParLevel3BoolTrue_Id:           selectConforme,

                    //Intervalos
                    ParMeasurementUnit_Name:        selectUnidadeDeMedidasName,
                    ParMeasurementUnit_Id:          selectUnidadeDeMedidas,
                    AcceptableValueBetween_Name:    parIntervalosTypeName,
                    AcceptableValueBetween:         parseInt(parIntervalosType) ? true : false,
                    IntervalMin:                    parLevel3Value_IntervalMin,
                    IntervalMax:                    parLevel3Value_IntervalMax,
                };
            }
        },
        veifyAdd: function(isEdit) {
            var seletorTato = !!isEdit ? isEdit : level3Value.level;
            /*Valida se pode criar o objeto*/
           
            if($('#' + seletorTato + ' #selectTipoInput :selected').val() == 1){ // Binario
                if($('#' + seletorTato + ' #selectConforme :selected').val() <= 0){
                    openMessageModal("Um campo obrgatório não foi preenchido:", "Por favor selecione o valor positivo para o campo binario.");
                    return false;
                }else if($('#' + seletorTato + ' #selectNaoConforme :selected').val() <= 0){
                    openMessageModal("Um campo obrgatório não foi preenchido:", "Por favor selecione o valor negativo para o campo binario.");
                    return false;
                }
            }
            else if($('#' + seletorTato + ' #selectTipoInput :selected').val() == 3){ // Intervalo
                if($('#' + seletorTato + ' #selectUnidadeDeMedidas :selected').val() <= 0){
                    openMessageModal("Um campo obrgatório não foi preenchido:", "Por favor selecione a unidade de medida.");
                    return false;
                }
            }

            return true;
        },
        incluiNoObjetoParaSubmit: function(dados){

            var level = level3Value.levelControl;
            $('#' + level3Value.level + ' #' + level3Value.idTable + ' > tbody > tr ').each(function(c, obj){

                var o = $(obj).data();
                //#edit
                if((o.Id != null || o.Id != undefined) && o.Id > 0){
                    dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].Id"] = o.Id;
                }

                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].ParCompany_Id"] = o.ParCompany_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].ParLevel3InputType_Id"] = o.ParLevel3InputType_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].ParLevel3BoolFalse_Id"] = o.ParLevel3BoolFalse_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].ParLevel3BoolTrue_Id"] = o.ParLevel3BoolTrue_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].ParMeasurementUnit_Id"] = o.ParMeasurementUnit_Id;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].AcceptableValueBetween"] = o.AcceptableValueBetween;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].IntervalMin"] = o.IntervalMin;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].IntervalMax"] = o.IntervalMax;
                dados["paramsDto.parLevel" + level + "Dto.listLevel3Value[" + c + "].IsActive"] = o.IsActive;
                //
            });

        },
        carregaDadosDoDb: function(){
            var id = level3Value.level + ' #' + level3Value.idTable;
            var tdNamess = level3Value.tdsNames;
            if( level3Value.listObjSalvo != null){ /*Carrega regras de NC*/
                level3Value.listObjSalvo.forEach(function(o, c){
                    o["ParLevel3InputType_Name"] = o.ParLevel3InputType.Name;
                    
                    if(o.ParCompany_Id > 0)
                        o["ParCompany_Name"] = o.ParCompany.Name;
                    else
                        o["ParCompany_Name"] = "Todas";


                    if(o.ParLevel3InputType_Id == 1){
                        o["ParLevel3BoolFalse_Name"] = o.ParLevel3BoolFalse.Name;
                        o["ParLevel3BoolTrue_Name"] = o.ParLevel3BoolTrue.Name;
                        o["ParMeasurementUnit_Name"] = "";
                        o["AcceptableValueBetween_Name"] = "";
                        o["IntervalMin"] = "";
                        o["IntervalMax"] = "";
                    }else if (o.ParLevel3InputType_Id == 3){
                        o["ParMeasurementUnit_Name"] = o.ParMeasurementUnit.Name;
                        o["ParLevel3BoolFalse_Name"] = "";
                        o["ParLevel3BoolTrue_Name"] = "";
                        o["AcceptableValueBetween_Name"] = o.AcceptableValueBetween ? "O valor e aceitavel quando esta entre " + o.IntervalMin + " e " + o.IntervalMax : "O valor e aceitavel quando e menor que " + o.IntervalMin + " ou maior que " + o.IntervalMax;
                    }
                    //o["AcceptableValueBetween_Name"] = o.ParCriticalLevel.Name;
                    crudNxN.adiciona(o,  id, tdNamess);
                });
            }
        },
        /*Fim Setup*/
        adiciona: function(e) {
            if(level3Value.veifyAdd()){
                var object = level3Value.getObjAdd();
                crudNxN.adiciona(object, level3Value.level + ' #' + level3Value.idTable, level3Value.tdsNames);
            }
        },
    };

    var hasPeso = @Html.Raw(Json.Encode(@Model.paramsDto.parLevel3Dto.pesoDoVinculo));
    var grouLevel2Selected = @Html.Raw(Json.Encode(@Model.paramsDto.parLevel3Dto.groupLevel2Selected));
    //var
    $('#paramsDto_parLevel3Dto_pesoDoVinculo').val(hasPeso);

    $('#pesoDefinido').html(hasPeso).show();
    $('#painelPeso').show();

    $('#btnUnidadeMedida').click(function (e) {
        $('#modalUnidadeMedida').modal({ backdrop: false });
    });

    $('#btnPositiveNegative').click(function (e) {
        $('#modalPositiveNegative').modal({ backdrop: false });
    });

    $(document).on('input', '#parLevel3Value_IntervalMax', function (e) {

        changeCombo();

    });

    $(document).on('input', '#parLevel3Value_IntervalMin', function (e) {

        changeCombo();

    });

    function changeCombo(){
        //se os dois campos estão nulos
        parIntervalosTypeCreate();
    }

    function level03ValueIntervalWriter(valueMin, valueMax) {
        return "O valor aceitável deve ser menor que " + valueMin + " e maior que " + valueMax;
    }

    function parIntervalosTypeCreate() {

        var value = "";
        if($('#selectUnidadeDeMedidas :selected').val() > 0)
            value = $('#selectUnidadeDeMedidas :selected').text();

        if ($("#parLevel3Value_IntervalMin").val() == "" && !$("#parLevel3Value_IntervalMax").val() == "") {
            var options =''
            "<option value='0'>" +
                "O valor aceitável deve ser igual ou maior que " + $("#parLevel3Value_IntervalMax").val()+" "+ value+
            "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();

        }

        else if (!$("#parLevel3Value_IntervalMin").val() == "" && $("#parLevel3Value_IntervalMax").val() == "") {
            var options =
                "<option value='0'>" +
                    "O valor aceitável deve ser igual ou maior que " + $("#parLevel3Value_IntervalMin").val()+" "+ value+
                "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();

        }

        else if (!$("#parLevel3Value_IntervalMin").val() == "" && !$("#parLevel3Value_IntervalMax").val() == "") {
            var options =
                "<option value='0'>" +
                    "O valor e aceitavel quando esta entre " + $("#parLevel3Value_IntervalMin").val() + " e " + $("#parLevel3Value_IntervalMax").val() +" "+ value+
                "</option>" +
                "<option value='1'>" +
                    "O valor e aceitavel quando e menor que " + $("#parLevel3Value_IntervalMin").val() + " ou maior que " + $("#parLevel3Value_IntervalMax").val() +" "+ value+
                "</option>";

            $('#parIntervalosType').empty();
            $('#parIntervalosType').append(options);
            $("#parIntervalosType").parents("td").show();
        } else {
            $("#parIntervalosType").parents("td").hide();
        }
    }


    $('#selectTipoInput').change(function () {

        if ($("#selectTipoInput option:selected").val() == "-1") {

            $('#selectNaoConforme').val(-1)
            $('#selectConforme').val(-1)
            $('#selectUnidadeDeMedidas').val(-1)
            $('#paramsDto_parLevel3Value_IntervalMin, #paramsDto_parLevel3Value_IntervalMax').val("")

            $('.ParIntervalos').hide();
            $('.ParBinarios').hide();

            $('#companyValueL3').hide();
        }

        //Binários
        if ($("#selectTipoInput option:selected").val() == "1") {
            resetaParIntervalos();
            resetaParBinarios();
            $('.ParCalculado').hide();
            $('.ParIntervalos').hide();
            $('.ParBinarios').fadeIn();
            $('#companyValueL3').fadeIn();
        }
        //Intervalos
        if ($("#selectTipoInput option:selected").val() == "3") {
            resetaParIntervalos();
            resetaParBinarios();
            $('.ParCalculado').hide();
            $('.ParBinarios').hide();
            $('.ParIntervalos').fadeIn();
        }

        if ($("#selectTipoInput option:selected").val() == "4") {
            resetaParIntervalos();
            resetaParBinarios();
            $('.ParCalculado').fadeIn();
            $('.ParBinarios').hide();
            $('.ParIntervalos').hide();
        }
    });

    function resetaParCalculado(){
        $('#selectUnidadeParL3Value').val(-1);
        $('#ParCalculado_IntervalMin').val("");
        $('#ParCalculado_IntervalMax').val("");
        $('#selectUnidadeDeMedidas').val(-1);
    }
    
    function resetaParIntervalos(){
        $('#selectUnidadeDeMedidas').val(-1);
        $('#paramsDto_parLevel3Value_IntervalMin').val("");
        $('#paramsDto_parLevel3Value_IntervalMax').val("");
        $('#parIntervalosType').empty().parents('td').hide();
    }
    
    function resetaParBinarios(){
        $('#selectConforme').val(-1);
        $('#selectNaoConforme').val(-1);
        $('#companyValueL3').fadeIn();
    }

    $('#selectTipoInput').change();

    function clicModalBinarioSave () {
        var valInpPos = $('#modalInputPositive').val();
        var valInpNeg =  $('#modalInputNegative').val();

        if(!valInpPos.length){
            alert("Valor invalido para:", "Valor Positivo");
            return;
        }

        if(!valInpNeg.length){
            alert("Valor invalido para:", "Valor Positivo");
            return;
        }

        $('#selectConforme').append("<option>" + valInpPos + "</option>");
        $('#selectNaoConforme').append("<option>" + valInpNeg + "</option>");
        $('#modalInputPositive').val("");
        $('#modalInputNegative').val("");

        $('#modalPositiveNegative').modal("hide");
    };

    $(document).ready(function () {

        var modalPontos = $('#modalPontos').detach();
        $('body > #modalPontos').remove();
        modalPontos.appendTo('body');
        if(grouLevel2Selected > 0)
            $('#paramsDto_parLevel3Dto_listGroupsLevel2').val(grouLevel2Selected)
        
        GuardJs.mascaraCampoCalculado('#ParCalculado_IntervalMin')
        GuardJs.mascaraCampoCalculado('#ParCalculado_IntervalMax')

        updateAllTables();

        $('[data-toggle="popover"]').popover();
        
        level3Value.carregaDadosDoDb();

        $('[data-toggle="popover"]').popover();

        ///initialize form
        initialFormLevel3 = $($('form')[2]).clone();
    });

</script>
