@model Dominio.AppViewModel.ComponenteGenericoValorViewModel

@{
    ViewBag.Title = Resources.Resource.edit;
    var limites = "";
}

<style>
    .no-gutters {
        padding-right: 0;
        padding-left: 0;
    }
</style>

<div class="page-content-wrapper">
    <div class="page-content">
        <div class="page-bar">
            <ul class="page-breadcrumb">
                <li>
                    <a href="@Url.Action("Index", "Home")">Home</a>
                    <i class="fa fa-angle-right"></i>
                    <a href="@Url.Action("List", "ComponenteGenerico", new { id = Model.ComponenteGenerico.Id })">@Model.ComponenteGenerico.Name</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <span>@Resources.Resource.edit</span>
                </li>
            </ul>
            <div class="page-toolbar"></div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                <div class="portlet light bordered">
                    <div class="portlet-title tabbable-line">
                        <div class="caption">
                            <i class="icon-share font-dark"></i>
                            <span class="caption-subject font-dark bold uppercase">@Model.ComponenteGenerico.Name</span>
                        </div>
                    </div>
                    <div class="portlet-body">
                        <div class="tab-content">
                            <div class="tab-pane active" id="setup_tab">
                                <div class="form-horizontal">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(Model => Model.ComponenteGenerico.Id)

                                    @foreach (var item in Model.Colunas)
                                    {

                                        switch (item.ComponenteGenericoTipoColuna_Id)
                                        {

                                            case 1: //text
                                                <div class="form-group">

                                                    @{
                                                        var id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        var saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        var value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <input type="text" class="form-control formSave" isRequired="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                    </div>
                                                </div>

                                                break;

                                            case 2: //number
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <input type="number" class="form-control formSave" isRequired="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                    </div>
                                                </div>
                                                break;

                                            case 3: //checkbox
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <input type="checkbox" class="form-control formSave" isRequired="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                    </div>
                                                </div>
                                                break;

                                            case 4: //textarea
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <textarea class="form-control formSave" isRequired="@item.IsRequired" required="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id"></textarea>
                                                    </div>
                                                </div>
                                                break;

                                            case 5: //select
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <select class="form-control formSave" isRequired="@item.IsRequired" required="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                        </select>
                                                    </div>
                                                </div>
                                                break;

                                            case 6: //date
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <input type="date" class="form-control formSave" isRequired="@item.IsRequired" required="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                    </div>
                                                </div>
                                                break;

                                            case 7: //hour
                                                <div class="form-group">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10">
                                                        <input type="time" class="form-control formSave" isRequired="@item.IsRequired" required="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                    </div>
                                                </div>
                                                break;

                                            case 8: //Limite
                                                <div class="form-group limitForm">

                                                    @{
                                                        id = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Id).FirstOrDefault();
                                                        saveId = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.SaveId).FirstOrDefault();
                                                        value = Model.Valores.Where(x => x.ComponenteGenericoColuna_Id == item.Id).Select(x => x.Valor).FirstOrDefault();

                                                        limites = value;
                                                    }

                                                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                                                    <div class="col-md-10 no-gutters">
                                                        <input type="hidden" name="limitInfo" class="form-control" isRequired="@item.IsRequired" required="@item.IsRequired" id="@id" saveId="@saveId" value="@value" componenteGenericoId="@item.ComponenteGenerico_Id" componenteGenericoColunaId="@item.Id">
                                                        <div class="col-md-4">
                                                            Tarefa:
                                                            @Html.DropDownList("ParLevel3_Id", new SelectList(ViewBag.Level3, "Id", "Name"), (string)Resources.Resource.select, new { @class = "form-control" })
                                                        </div>
                                                        <div class="col-md-3">
                                                            Limite Inferior:
                                                            <input type="number" class="form-control" id="limiteInferior">

                                                        </div>
                                                        <div class="col-md-3">
                                                            Limite Superior:
                                                            <input type="number" class="form-control" id="limiteSuperior">
                                                        </div>

                                                        <div class="col-md-2">
                                                            <div style="visibility:hidden">a</div>
                                                            <button class="btn btn-primary" id="addLimit">Incluir</button>
                                                        </div>
                                                    </div>
                                                </div>

                                                break;

                                            default:
                                                break;

                                        }
                                    }

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <table id="limites" class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <td>Tarefa</td>
                                                        <td>Limite Inferior</td>
                                                        <td>Limite Superior</td>
                                                        <td></td>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="@Resources.Resource.save" class="btn btn-primary" id="save" />
                                            @Html.ActionLink(Resources.Resource.back_to_list as string, "List", new { id = Model.ComponenteGenerico.Id }, new { @class = "btn btn-default" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    let Level3s = JSON.parse('@Html.Raw(Json.Encode(ViewBag.Level3))')

    let Limite = '@limites';

    $(document).ready(function () {

        $(".sidebar-toggler").removeClass("hide");
        $(".page-sidebar-wrapper").removeClass("hide");

        $('select').select2();

        insertLimits(Limite);

    });

    $('#save').on('click', function () {

        let listObjToSave = [];
        let formIsValid = true;

        $('#setup_tab input.formSave, #setup_tab textarea.formSave, #setup_tab select.formSave').each(function () {

            $(this).css('background-color', '');

            let objToSave = {};

            objToSave.Id = $(this).attr('id');
            objToSave.SaveId = $(this).attr('saveId');
            objToSave.ComponenteGenerico_Id = $(this).attr('componenteGenericoId');
            objToSave.ComponenteGenericoColuna_Id = $(this).attr('componenteGenericoColunaId');

            if ($(this).is('input:checkbox')) {

                objToSave.Valor = $(this).prop('checked');

            } else if ($(this).is('input')) {

                objToSave.Valor = $(this).val();

            } else if ($(this).is('select')) {

                objToSave.Valor = $(this).find('option:selected').val();
            }

            //Validar o form
            if (!inputIsValid(objToSave, this)) {
                formIsValid = false;
                return false;
            }

            listObjToSave.push(objToSave);

        });

        let limits = getLimits();

        if(limits)
            listObjToSave.push(limits);

        if (!formIsValid) {
            return false;
        }

        let objToSave = {
            Valores: listObjToSave,
            ComponenteGenerico: JSON.parse('@Html.Raw(Json.Encode(Model.ComponenteGenerico))')
        }

        $.ajax({
            type: 'POST',
            url: 'EditValor',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(objToSave),
            async: false,
            success: function (data, status) {
                debugger
                openMessageModal(Resources("saved_successfully"), "");
                window.location.href = '@Url.Action("List", new { id = Model.ComponenteGenerico.Id })'
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest);
                console.log(textStatus);
                console.log(errorThrown);
                openMessageModal(Resources("error"), "");
            }
        });

    });

    $('#addLimit').on('click', function () {

        let level3 = parseInt($('#ParLevel3_Id :selected').val());
        let limiteInferior = parseFloat($('#limiteInferior').val());
        let limiteSuperior = parseFloat($('#limiteSuperior').val());

        if (!insertIsValid(level3, limiteInferior, limiteSuperior))
            return;

        let limitToInsert = level3 + ":" + limiteInferior + ":" + limiteSuperior;

        addLimit(limitToInsert);
    });

    function insertIsValid(level3, limiteInferior, limiteSuperior) {

        if (isNaN(level3)) {
            openMessageModal("Alerta", "Selecione uma tarefa");
            return;
        }

        if (isNaN(limiteInferior) && isNaN(limiteSuperior)) {
            openMessageModal("Alerta", "O limite deve ser inserido");
            return false;
        }

        if (limiteInferior > limiteSuperior) {
            openMessageModal("Alerta", "O limite inferior deve ser menor que o limite superior");
            return false;
        }

        let existe = false;
        $('#limites tbody tr').each(function () {

            let obj = $(this).data("data-obj");

            if (obj.ParLevel3_Id == level3) {
                existe = true;
                openMessageModal("Alerta", "Já existe um limite para esta tarefa");
            }
        });

        if (existe)
            return false;

        return true;
    }

    function inputIsValid(objToSave, input) {

        let isRequired = $(input).attr('isRequired');

        if (isRequired && (objToSave.Valor == null || objToSave.Valor == "")) {
            openMessageModal(Resources("required_fields_unfilled"));
            $(input).css('background-color', 'rgba(255, 0, 0, 0.2)');
            return false;
        }

        return true;
    }

    function getLimits() {

        let arrValor = [];

        $('#limites tbody tr').each(function () {

            let objToSave = $(this).data('data-obj');

            arrValor.push(objToSave.ParLevel3_Id + ":" + objToSave.LimiteInferior + ":" + objToSave.LimiteSuperior);

        });

        if (arrValor) {

            objToSave = {};
            objToSave.Id = $('[name="limitInfo"]').attr('id');
            objToSave.SaveId = $('[name="limitInfo"]').attr('saveId');
            objToSave.ComponenteGenerico_Id = $('[name="limitInfo"]').attr('componenteGenericoId');
            objToSave.ComponenteGenericoColuna_Id = $('[name="limitInfo"]').attr('componenteGenericoColunaId');
            objToSave.Valor = arrValor.join("|");

            return objToSave;

        }

        return null;
    }

    function insertLimits(limites) {

        //fazer um split dos limites pelo |
        let limitesArr = limites.split("|");

        if (!limitesArr && limitesArr.length == 0) {
            return;
        }

        //fazer um forach nos limites que viere
        //chamar a funcao addLimit
        limitesArr.forEach(x => addLimit(x));

    }

    function addLimit(limite) {

        let parLevel3_Id = limite.split(":")[0];
        let limiteInferior = limite.split(":")[1];
        let limiteSuperior = limite.split(":")[2];

        let MyTable = document.getElementById("limites").getElementsByTagName('tbody')[0];

        let novaLinha = MyTable.insertRow(0);
        let Newcell1 = novaLinha.insertCell(0);
        let Newcell2 = novaLinha.insertCell(1);
        let Newcell3 = novaLinha.insertCell(2);
        let Newcell4 = novaLinha.insertCell(3);

        let btn = `<button class="btn btn-danger btn-xs" onclick="removeLimit(this)">X</button>`;

        Newcell1.innerHTML = Level3s.filter(x => { return x.Id == parLevel3_Id })[0].Name;
        Newcell2.innerHTML = limiteInferior;
        Newcell3.innerHTML = limiteSuperior;
        Newcell4.innerHTML = btn;

        let obj = { ParLevel3_Id: parLevel3_Id, LimiteInferior: limiteInferior, LimiteSuperior: limiteSuperior };

        $('#limites tbody').find('tr:first()').data("data-obj", obj)
    }

    function removeLimit(that) {

        //remover o dado
        $(that).parents("tr").remove();
    }

</script>

