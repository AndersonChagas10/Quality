
@{
    ViewBag.Title = "Index";
    var urlHome = Url.Action("Index", "Home");
}
<style>
    a.active {
        background-color: rgba(128, 128, 128, 0.17);
    }

    .bgRed {
        background-color: rgba(248, 2, 2, 0.29);
        ;
    }

    .bgGreen {
        background-color: rgba(0, 128, 0, 0.23);
        ;
    }

    .bgWhite {
        background-color: white;
        ;
    }
</style>
<link href="~/Content/toastr.min.css" rel="stylesheet" />

<div ng-controller="reencravationCtrl as r" class="container page-content" style="min-height: 600px;width:100%;">
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav">
            <li class="active" style="margin-left:18px;" ng-repeat="item in linhas track by $index" ng-click="getLinha($index)" ng-show="item.IsActive == 'True'">
                <a href="#" ng-class="{active: seletedLinha.Name == item.Name}">
                    <span class="glyphicon glyphicon-wrench" aria-hidden="true"></span> {{item.Name}}
                    <span class="glyphicon glyphicon-sound-stereo" aria-hidden="true"></span>
                    <span class="sr-only">(current)</span>
                </a>
            </li>
        </ul>
    </div>

    <br />
    <div ng-show="seletedLinha.Id > 0" class="col-lg-12 col-md-12 col-sm-12">
        <form role="form" class="ng-pristine ng-valid">
            <div class="form-group float-label-control col-lg-6 col-md-12 col-sm-12">
                <label for="" class="">Produto</label>
                <br />
                <select ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" ng-options="item as item.Name for item in produtos track by item.Id" ng-model="seletedLinha.form.Produto" class="form-control select2" data-placeholder="Selecone..." tabindex="-1" aria-hidden="true" style="width:100%!important"></select>
            </div>
            <div class="form-group float-label-control col-lg-3 col-md-12 col-sm-12">
                <label for="">Hora do início da Produção</label>
                <br />
                <input ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" type="time" class="form-control" placeholder="Hora do início da Produção" ng-model="seletedLinha.form.HoraInicioProducao">
            </div>
            <div class="form-group float-label-control col-lg-3 col-md-12 col-sm-12">
                <label for="">Hora do final da Produção</label>
                <br />
                <input ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" type="time" class="form-control" placeholder="Hora do final da Produção" ng-model="seletedLinha.form.HoraFimProducao">
            </div>
            <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-12">
                <label for="">Fornecedor da Lata</label>
                <br />
                <select ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" ng-options="item as item.Name for item in fornecedorLata track by item.Id" ng-model="seletedLinha.form.FornecedorLata" class="form-control select2" data-placeholder="Selecone..." multiple tabindex="-1" aria-hidden="true" style="width:100%!important"></select>
            </div>
            <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-12">
                <label for="">Data do recebimento das latas</label>
                <br />
                <input ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" type="date" class="form-control" placeholder="Data do recebimento das latas" ng-model="seletedLinha.form.DataRecebimentoLatas">
            </div>
            <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-12">
                <label for="">Fornecedor das tampas/fundos das latas</label>
                <br />
                <select ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" ng-options="item as item.Name for item in fornecedorTampaLata track by item.Id" ng-model="seletedLinha.form.FornecedorTampaFundoLata" class="form-control select2" data-placeholder="Selecone..." multiple tabindex="-1" aria-hidden="true" style="width:100%!important"></select>
            </div>
            <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-12">
                <label for="">Data do recebimento das tampas/fundos das latas</label>
                <br />
                <input ng-change="saveState(true, true)" ng-disabled="seletedLinha.finalizado" type="date" class="form-control" placeholder="Data do recebimento das tampas e fundos das latas" ng-model="seletedLinha.form.DataRecebimentoTampasFundosLatas">
            </div>
            @*{{seletedLinha.form}}*@
            <div style="" class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                <button ng-disabled="seletedLinha.finalizado" type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#modalAssinatura">
                    <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Finalizar Linha
                </button>
                <span ng-show="seletedLinha.finalizado" class="glyphicon glyphicon-user" aria-hidden="true"></span> {{seletedLinha.userFinish.Name}}
                &nbsp;
                <span ng-show="seletedLinha.finalizado" class="glyphicon glyphicon-time" aria-hidden="true"></span> {{seletedLinha.dataUserFinish}}
            </div>

            <div style="" class="form-group float-label-control col-lg-6 col-md-6 col-sm-6" ng-show="seletedLinha.finalizado">
                <button ng-disabled="seletedLinha.isValidated" type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#modalAssinaturaValidarLinha">
                    <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Validar Linha
                </button>
                <span ng-show="seletedLinha.isValidated" class="glyphicon glyphicon-user" aria-hidden="true"></span> {{seletedLinha.userValidacao.Name}}
                &nbsp;
                <span ng-show="seletedLinha.isValidated" class="glyphicon glyphicon-time" aria-hidden="true"></span> {{seletedLinha.dataUserValidacao}}
            </div>
        </form>

    </div>

    <div class="col-lg-12 col-md-12 col-sm-12">
        <div ng-show="seletedLinha.Id > 0 && seletedLinha.latas.length > 0" style="" class="col-lg-6 col-md-6 col-sm-12" ng-repeat="item in seletedLinha.latas track by $index">
            @*<div ng-show="seletedLinha.Id > 0 && seletedLinha.latas.length > 0" style="" class="col-lg-12 col-md-12 col-sm-12" ng-repeat="item in seletedLinha.latas track by $index">*@

            <div style="text-align: right; float:left; padding-bottom: 5px; padding-top: 5px; vertical-align: middle; font-size: 18px;">{{item.Name}}</div>

            <div style="text-align: right; padding-bottom: 5px; padding-top: 5px; float: right; ">
                @*{{item.haveError}}*@
                <button id="acaoPrev" title="Gerar Ação Preventiva para {{item.Name}}" type="button" class="btn btn-warning btn-sm" data-toggle="modal" data-target="#modalPreventiveAction" ng-click="selectLata($index, selectedLata.haveErrors)">
                    <span class="glyphicon glyphicon-alert" aria-hidden="true"></span>
                </button>
                <button title="Modo Somente Visualização" ng-show="item.finalizado" type="button" class="btn btn-info btn-sm" data-toggle="modal" data-target="#myModal">
                    <span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span>
                </button>
                @*<button type="button" class="btn btn-warning btn-sm" ng-click="cloneLata(seletedLinha, $index)">
                        <span class="glyphicon glyphicon-duplicate" aria-hidden="true"></span>
                    </button>
                    <button type="button" class="btn btn-warning btn-sm" ng-click="cloneLataALot(seletedLinha, $index, 50)">
                        <span class="glyphicon glyphicon-stats" aria-hidden="true"></span>
                    </button>*@
                <button title="Editar {{item.Name}}" ng-show="!item.finalizado" ng-click="executeDocReady()" type="button" class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editModal{{$index}}">
                    <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                </button>
                <button title="Remover {{item.Name}}" ng-show="!item.finalizado" type="button" class="btn btn-danger btn-sm" ng-click="deleteLata(seletedLinha, $index)">
                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                </button>
                <button title="Assinar {{item.Name}}" type="button" ng-show="item.liberaAssinaturaLata && !item.finalizado" ng-click="selectLata($index)" class="btn btn-success btn-sm" data-toggle="modal" data-target="#modalAssinaturaFinalizaLata">
                    <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                </button>
            </div>

            <table name="visualizacao" style="width: 100%">
                <tbody>

                    <tr>
                        <td style="border:0px solid #cccccc; padding: 2px; text-align: right; font-weight: bold; width:15%">Ponto <span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></td>
                        <td style="border:1px solid #cccccc; padding: 2px; text-align: center; font-weight: bold; background-color:#dddddd; width: 80px !important" ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">{{$index + 1}}</td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value[0]  && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '3')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="border:1px solid #cccccc; padding: 2px; text-align: center;"
                            ng-class="{bgWhite:  (ParLevel3.ResultValue['Ponto' + ($index +1)].length == 0), bgGreen: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && (ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) , bgRed: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && !(ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) }"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                                {{ParLevel3.ResultValue['Ponto' + ($index +1)]}}
                        </td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '1')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="max-width: 80px; border:1px solid #cccccc; padding: 2px; text-align: center;"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                            <span ng-if="ParLevel3.ResultValue[('Ponto' + ($index +1))] == '0'">
                                {{ParLevel3.ParLevel3Value[0].ParLevel3BoolTrue.Name}}
                            </span>
                            <span ng-if="ParLevel3.ResultValue[('Ponto' + ($index +1))] == '1'">
                                {{ParLevel3.ParLevel3Value[0].ParLevel3BoolFalse.Name}}
                            </span>
                        </td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '4')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="max-width: 80px; border:1px solid #cccccc; padding: 2px; text-align: center;"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                            {{ParLevel3.ResultValue['PontoCalc1' + ($index +1)]}}
                            <span ng-if="ParLevel3.ResultValue[('Ponto' + ($index +1))] > 0">
                                x10^
                            </span>
                            {{ParLevel3.ResultValue['PontoCalc2' + ($index +1)]}}
                        </td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '2')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="max-width: 80px; border:1px solid #cccccc; padding: 2px; text-align: center;"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                            {{ParLevel3.ResultValue[('Ponto' + ($index +1))] || "0"}}
                        </td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '5')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="max-width: 80px; border:1px solid #cccccc; padding: 2px; text-align: center; word-wrap:break-word;"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                            {{ParLevel3.ResultValue['PontoText' + ($index +1)]}}
                        </td>
                    </tr>

                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index" ng-if="(ParLevel3.ParLevel3Value_OuterList[0] && ParLevel3.ParLevel3Value_OuterList[0].ParLevel3InputType_Id == '99')">
                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                        <td style="max-width: 80px; border:1px solid #cccccc; padding: 2px; text-align: center;"
                            ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">
                            {{geraIdCalc(ParLevel3.ParLevel3Value_OuterList, $index, seletedLinha.latas.indexOf(item)) }}
                        </td>
                    </tr>

                </tbody>
            </table>

            <div style="text-align: left; padding-top: 5px; height:40px;">
                <div style="float:left;">
                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span> {{item.userValidacao.Name}}
                </div>
                <div style="float:right;">
                    <span class="glyphicon glyphicon-time" aria-hidden="true"></span> {{item.dataUserValidacao}}
                </div>
            </div>


            <!-- Modal Edit-->
            <div class="modal fade bd-example-modal-lg" id="editModal{{$index}}" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">

                        <div class="modal-header">
                            <h5 class="modal-title" id="editModalLabel">Editar Lata</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            item
                        </div>

                        <div class="modal-body" style="overflow-x:auto">

                            <table style="width: 100%">
                                <tbody>

                                    <tr>
                                        <td style="border:0px solid #cccccc; padding: 2px; text-align: right; font-weight: bold; width:15%">Ponto <span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></td>
                                        <td style="border:1px solid #cccccc; padding: 2px; max-width:65px; text-align: center; font-weight: bold; background-color:#dddddd;" ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">{{$index + 1}}</td>
                                    </tr>

                                    <tr ng-repeat="ParLevel3 in item.ListParlevel3 track by $index">

                                        <td style="border:1px solid #cccccc; padding: 2px; font-weight: bold;">{{ParLevel3.Name}}</td>
                                        <td style="border:1px solid #cccccc; padding: 2px; max-width:65px;" ng-repeat="NumberOfPoints in range(seletedLinha.TipoDeLata.NumberOfPoints) track by $index">

                                            @*1	Binário ok
                                                2	Número de defeitos ok
                                                3	Intervalos ok
                                                4	Calculado
                                                5	Texto
                                                99	NOVO CALCULADO POR OUTRO*@

                                            @*3	Intervalos*@
                                            @*ng-change="SetResult(ParLevel3.ResultValue['Ponto' + ($index +1)], ParLevel3.ParLevel3Value[0], $index)"*@
                                            <span ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '3')">
                                                <span ng-if="((ParLevel3.IsPointLess == true) || (ParLevel3.IsPointLess == false && $index == 0))">
                                                    <input style="width:100%; max-width: 65px;"
                                                           type="text"
                                                           class="decimal"
                                                           title="Valores aceitáveis entre {{ParLevel3.ParLevel3Value[0].IntervalMin}} e {{ParLevel3.ParLevel3Value[0].IntervalMax}}"
                                                           ng-model="ParLevel3.ResultValue['Ponto' + ($index +1)]"
                                                           ng-class="{bgWhite:  (ParLevel3.ResultValue['Ponto' + ($index +1)].length == 0), bgGreen: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && (ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) , bgRed: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && !(ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax)}"
                                                           ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                           id='{{"ParLevel3_Id" +  ParLevel3.ParLevel3Value[0].ParLevel3_Id.toString() + "ParLevel3Value_Id" +  ParLevel3.ParLevel3Value[0].Id.toString() + "PontoIndex" + ($index + 1) + "LataIndex" + seletedLinha.latas.indexOf(item) }}' />
                                                    {{ParLevel3.ResultValue[('Ponto' + ($index +1))]}}

                                                    <span ng-if="ParLevel3.AllowNA"><input type="checkbox" ng-model="ParLevel3.ResultValue[('Na' + ($index +1))]" /> NA </span>
                                                </span>

                                                <input type="text" 
                                                       style="width:100%; max-width: 65px; display:none"
                                                       ng-if="(ParLevel3.IsPointLess == false && $index > 0)"
                                                       id='{{"ParLevel3_Id" +  ParLevel3.ParLevel3Value[0].ParLevel3_Id.toString() + "ParLevel3Value_Id" +  ParLevel3.ParLevel3Value[0].Id.toString() + "PontoIndex" + ($index + 1) + "LataIndex" + seletedLinha.latas.indexOf(item) }}'
                                                       ng-model="ParLevel3.ResultValue['Ponto' + (1)]"/>
                                            </span>

                                            @*1	Binário*@
                                            <span ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '1')">
                                                <span ng-if="((ParLevel3.IsPointLess == true) || (ParLevel3.IsPointLess == false && $index == 0))">
                                                    <input type="radio"
                                                           style="width:100%; max-width: 65px;"
                                                           ng-value="true"
                                                           ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                           ng-model="ParLevel3.Binario['Ponto' + ($index +1)]"
                                                           ng-change="ParLevel3.ResultValue['Ponto' + ($index +1)] = 0" />
                                                    {{ParLevel3.ParLevel3Value[0].ParLevel3BoolTrue.Name}}
                                                    <br />
                                                    <input type="radio"
                                                           style="width:100%; max-width: 65px;"
                                                           ng-value="false"
                                                           ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                           ng-model="ParLevel3.Binario['Ponto' + ($index +1)]"
                                                           ng-change="ParLevel3.ResultValue['Ponto' + ($index +1)] = 1" />
                                                    {{ParLevel3.ParLevel3Value[0].ParLevel3BoolFalse.Name}}

                                                    <span ng-if="ParLevel3.AllowNA"><input type="checkbox" ng-model="ParLevel3.ResultValue[('Na' + ($index +1))]" /> NA </span>
                                                </span>
                                            </span>

                                            @*4	Calculado*@
                                            <span ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '4')">
                                                <span ng-if="((ParLevel3.IsPointLess == true) || (ParLevel3.IsPointLess == false && $index == 0))">
                                                    <input title="Valores aceitáveis entre {{ParLevel3.ParLevel3Value[0].IntervalMin}} e {{ParLevel3.ParLevel3Value[0].IntervalMax}}"
                                                           style="width:45%"
                                                           type="text"
                                                           class="decimal"
                                                           ng-model="ParLevel3.ResultValue[('PontoCalc1' + ($index +1))]"
                                                           ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                           ng-class="{bgWhite:  (ParLevel3.ResultValue['Ponto' + ($index +1)].length == 0), bgGreen: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && (ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) , bgRed: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && !(ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax)}"
                                                           ng-change="ParLevel3.ResultValue[('Ponto' + ($index +1))] = (ParLevel3.ResultValue[('PontoCalc1' + ($index +1))] * (number|mathPow:ParLevel3.ResultValue[('PontoCalc2' + ($index +1))]))" />
                                                    <span style="font-size:10px;">x10^</span>
                                                    <input title="Valores aceitáveis entre {{ParLevel3.ParLevel3Value[0].IntervalMin}} e {{ParLevel3.ParLevel3Value[0].IntervalMax}}"
                                                           style="width:45%"
                                                           type="text"
                                                           class="decimal"
                                                           ng-model="ParLevel3.ResultValue[('PontoCalc2' + ($index +1))]"
                                                           ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                           ng-class="{bgWhite:  (ParLevel3.ResultValue['Ponto' + ($index +1)].length == 0),  bgGreen: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && (ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) , bgRed: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && !(ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax)}"
                                                           ng-change="ParLevel3.ResultValue[('Ponto' + ($index +1))] = (ParLevel3.ResultValue[('PontoCalc1' + ($index +1))] * (number|mathPow:ParLevel3.ResultValue[('PontoCalc2' + ($index +1))]))" />

                                                    <span ng-if="ParLevel3.AllowNA"><input type="checkbox" ng-model="ParLevel3.ResultValue[('Na' + ($index +1))]" /> NA </span>
                                                </span>
                                            </span>

                                            @*2	Número de defeitos*@
                                            <span ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '2')">
                                                <input title="Valores aceitáveis entre {{ParLevel3.ParLevel3Value[0].IntervalMin}} e {{ParLevel3.ParLevel3Value[0].IntervalMax}}"
                                                       style="width:100%; max-width: 65px;"
                                                       ng-disabled="ParLevel3.ResultValue[('Na' + ($index +1))]"
                                                       ng-model="ParLevel3.ResultValue[('Ponto' + ($index +1))]"
                                                       ng-class="{bgWhite:  (ParLevel3.ResultValue['Ponto' + ($index +1)].length == 0), bgGreen: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && (ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax) , bgRed: (ParLevel3.ResultValue['Ponto' + ($index +1)] != null) && !(ParLevel3.ParLevel3Value[0].IntervalMin <= ParLevel3.ResultValue['Ponto' + ($index +1)] && ParLevel3.ResultValue['Ponto' + ($index +1)] <= ParLevel3.ParLevel3Value[0].IntervalMax)}"
                                                       type="number" />

                                                <span ng-if="ParLevel3.AllowNA"><input type="checkbox" ng-model="ParLevel3.ResultValue[('Na' + ($index +1))]" /> NA </span>
                                            </span>

                                            @*5	Texto*@
                                            <span ng-if="(ParLevel3.ParLevel3Value[0] && ParLevel3.ParLevel3Value[0].ParLevel3InputType_Id == '5')">
                                                <textarea class="form-control input-sm"
                                                          style="width:100%; max-width: 65px;"
                                                          cols="15"
                                                          id="Observacao"
                                                          rows="5"
                                                          ng-model="ParLevel3.ResultValue[('PontoText' + ($index +1))]"></textarea>
                                            </span>

                                            @*99 NOVO CALCULADO POR OUTRO*@
                                            <span style="width:100%; max-width: 65px;" ng-show="(ParLevel3.ParLevel3Value_OuterList[0] && ParLevel3.ParLevel3Value_OuterList[0].ParLevel3InputType_Id == '99')">
                                                {{geraIdCalc(ParLevel3.ParLevel3Value_OuterList, $index, seletedLinha.latas.indexOf(item)) }}
                                            </span>
                                        </td>

                                    </tr>

                                </tbody>
                            </table>
                        </div>

                        <div class="modal-footer">
                            @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>*@
                            <button type="button" class="btn btn-primary" data-dismiss="modal" ng-click="saveAndClose(item); executeDocReady(true)">Fechar</button>
                        </div>

                    </div>
                </div>
            </div>

        </div>

        <br />


        <button ng-show="seletedLinha.Id > 0 && !seletedLinha.finalizado" type="button" ng-click="newLata(seletedLinha); executeDocReady(true)" style="margin: 35px;" class="btn btn-primary btn-sm">
            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>Adicionar Lata
        </button>
        <button type="button" ng-show="seletedLinha.Id > 0" ng-click="getParansLinha(activeInLine, true, true)" class="btn btn-info" style="margin-left: 30px;">
            Atualizar Parametrização / Nova Coleta
        </button>
    </div>
    @*<button type="button" ng-click="saveState()" class="btn btn-sucsdfcess btn-lg">
            <span class="glyphicon glyphicon-save-file" aria-hidden="true"></span>POST LINHA
        </button> *@
    @*<button type="button" ng-click="getState()" class="btn btn-sucsdfcess btn-lg">
            <span class="glyphicon glyphicon-save-file" aria-hidden="true"></span>GET TODAS AS LINHAS
        </button>*@
    @*<button type="button" ng-click="getParametrizacaoZeraColeta()" class="btn btn-sucsdfcess btn-lg">
            <span class="glyphicon glyphicon-save-file" aria-hidden="true"></span>Atualizar Parametrização
        </button>*@
    <hr />

    <!-- Modal Finalizar Lata-->
    <div class="modal fade" id="modalAssinaturaFinalizaLata" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Assinatura</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-x:auto">

                    <form role="form" class="ng-pristine ng-valid">
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input type="text" class="form-control" ng-model="user.Name" placeholder="Nome de Usuário" />
                        </div>
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input type="password" class="form-control" ng-model="user.Password" placeholder="Senha" />
                        </div>
                    </form>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" ng-click="validateUserLata(user)">Validar Assinatura</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Finalizar Linha-->
    <div class="modal fade" id="modalAssinatura" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Assinatura</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-x:auto">

                    <form role="form" class="ng-pristine ng-valid">
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input type="text" class="form-control" ng-model="user.Name" placeholder="Nome de Usuário" />
                        </div>
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input type="password" class="form-control" ng-model="user.Password" placeholder="Senha" />
                        </div>
                    </form>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" ng-click="finsihLine(user)">Validar Assinatura</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal ValidarLinha-->
    <div class="modal fade" id="modalAssinaturaValidarLinha" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Assinatura</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-x:auto">
                    <form role="form" class="ng-pristine ng-valid">
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input class="form-control input-sm" type="text" ng-model="user.Name" placeholder="Nome de Usuário" />
                        </div>
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <input class="form-control input-sm" type="password" ng-model="user.Password" placeholder="Senha" />
                        </div>
                        <div class="form-group float-label-control col-lg-6 col-md-6 col-sm-6">
                            <textarea class="form-control input-sm" cols="30" id="" rows="5" ng-model="user.Obs" placeholder="Observações e Ações preventivas"></textarea>
                        </div>
                    </form>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" ng-click="validateLine(user)">Validar Assinatura</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal PrventiveAction-->
    <div class="modal fade" id="modalPreventiveAction" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="preventiveAction">Ação Preventiva</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body" style="overflow-x:auto">
                    <form role="form" class="ng-pristine ng-valid">
                        <span>Ações anteriores para esta Lata:</span>
                        <br />
                        <br />
                        <div class="form-group float-label-control col-lg-12 col-md-12 col-sm-12" ng-repeat="item in selectedLata.listPreventiveAction track by $index">
                            <span style="word-wrap: break-word; max-width:150px;">{{item.AddDate}}: {{item.Content}}</span>
                            <br />
                        </div>
                        <div class="form-group float-label-control col-lg-12 col-md-12 col-sm-12">
                            <textarea class="form-control input-sm" cols="30" id="" rows="5" ng-model="selectedLata.preventiveAction" placeholder="Observações e Ações preventivas"></textarea>
                        </div>
                    </form>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" ng-click="insertPreventiveAction(); executeDocReady(true)" data-dismiss="modal">Salvar</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script src="~/Scripts/toastr.min.js"></script>
<script src="~/Scripts/Math/math.js"></script>

<script>
    (function () {
        //'use strict';

        app.factory('timestampMarker', [function () {
            var timestampMarker = {
                request: function (config) {
                    config.requestTimestamp = new Date().getTime();
                    return config;
                },
                response: function (response) {
                    response.config.responseTimestamp = new Date().getTime();
                    console.log('The request took ' + ((response.config.responseTimestamp - response.config.requestTimestamp) / 1000) + ' seconds.');
                    return response;
                }
            };
            return timestampMarker;
        }]);

        app.factory('loadingOverlay', [function () {
            var loadingOverlay = {
                request: function (config) {
                    //console.log(config)
                    if (config.showLoader)
                        $.LoadingOverlay("show");
                    if (config.showLoader == undefined)
                        $.LoadingOverlay("show");
                    return config;
                },
                response: function (response) {
                    $.LoadingOverlay("hide", true);
                    return response;
                }
            }
            return loadingOverlay;
        }]);

        app.config(['$httpProvider', function ($httpProvider) {
            $httpProvider.interceptors.push('timestampMarker');
            $httpProvider.interceptors.push('loadingOverlay');
        }]);

        /*
        START ANGULAR MODULE
        */
        app.controller('reencravationCtrl', ['$scope', '$http',
            function ($scope, $http) {
                let vm = $scope

                vm.linhas = [{}]
                vm.produtos = [{}]
                vm.fornecedorLata = [{}]
                vm.fornecedorTampaLata = [{}]
                vm.seletedLinha = { Id: 0 }
                vm.selectedLata = {}
                vm.activeInLine = 0

                //MOCK                  Sem Mock
                vm.company = GetUnidadeUsuario()

                vm.findWithAttr = function (array, attr, value) {
                    for (var i = 0; i < array.length; i += 1) {
                        if (array[i][attr] === value) {
                            return i
                        }
                    }
                    return -1
                }

                //vm.company = GetUnidadeUsuario()
                vm.getAllLinha = function (index, needFindIndex, showMensagem) {
                    //vm.seletedLinha = vm.linhas[index]
                    //vm.activeInLine = vm.seletedLinha.Id
                    //if (needFindIndex)
                    //    index = vm.findWithAttr(vm.linhas, 'Id', vm.activeInLine);
                    vm.linhas.forEach(function (o, c) {
                        $http({ method: 'POST', url: vm.getParametrizacaoUrl, data: o })
                           .then(function (r) {
                               if (r.data.errors) {
                                   r.data.errors.forEach(function (o) {
                                       toastr.error(o)
                                   })
                               } else {
                                   //toastr.success(r.data.resposta)
                                   //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                                   if (showMensagem)
                                       toastr.success('Recuperadas linhas parametrizadas \n da base de dados')
                                   vm.linhas[c] = r.data.model[0]
                                   vm.linhas[c]["latas"] = []
                                   vm.activeInLine = vm.linhas[c].Id
                                   vm.executeDocReady(true)
                                   //vm.seletedLinha = { Id: 0 }
                                   //vm.getState()
                               }
                           });
                    })

                    vm.executeDocReady(true)
                    //vm.$apply()
                }

                vm.insertPreventiveAction = function () {
                    let lata = vm.selectedLata
                    if (lata["listPreventiveAction"] == undefined) {
                        lata["listPreventiveAction"] = []
                    }
                    if (lata.preventiveAction.length) {
                        lata["listPreventiveAction"].push({ AddDate: moment().format("DD/MM/YYYY HH:mm"), Content: lata.preventiveAction })
                        lata.preventiveAction = ''
                        vm.selectedLata = lata
                        vm.saveState()
                    }
                }

                vm.getParansLinha = function (index, needFindIndex, showMensagem) {
                    //vm.seletedLinha = vm.linhas[index]
                    //vm.activeInLine = vm.seletedLinha.Id
                    //if (needFindIndex)
                    index = vm.findWithAttr(vm.linhas, 'Id', vm.seletedLinha.Id);
                    $http({ method: 'POST', url: vm.getParametrizacaoUrl, data: vm.seletedLinha })
                        .then(function (r) {
                            if (r.data.errors) {
                                r.data.errors.forEach(function (o) {
                                    toastr.error(o)
                                })
                            } else {
                                //toastr.success(r.data.resposta)
                                //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                                if (showMensagem)
                                    toastr.success('Recuperada linha parametrizada \n da base de dados')
                                vm.linhas[index] = r.data.model[0]
                                vm.linhas[index]["latas"] = []
                                vm.seletedLinha = vm.linhas[index]
                                vm.activeInLine = vm.seletedLinha.Id
                                vm.saveState()
                                vm.executeDocReady(true)
                                //vm.seletedLinha = { Id: 0 }
                                //vm.getState()
                            }
                        });

                    //vm.$apply()
                }

                vm.getLinha = function (index, needFindIndex, showMensagem) {
                    //$.LoadingOverlay("show");
                    if (needFindIndex)
                        index = vm.findWithAttr(vm.linhas, 'Id', vm.activeInLine);

                    vm.seletedLinha = vm.linhas[index]

                    vm.activeInLine = vm.seletedLinha.Id

                    vm.executeDocReady(true)
                    vm.getState()

                    //vm.$apply()
                }

                vm.selectLata = function (index, haveErr) {
                    vm.selectedLata = vm.seletedLinha.latas[index]
                    if (haveErr)
                        vm.selectedLata.haveErrors = haveErr
                    else
                        vm.selectedLata.haveErrors = false
                }

                vm.range = function (n) {
                    if (n)
                        return new Array(parseInt(n))
                    else
                        return new Array()
                }

                vm.newLata = function (linha) {
                    for (let i = 0; i < linha.NumberOfHeads; i++) {
                        if (linha["counterDeLatas"] == undefined)
                            linha["counterDeLatas"] = 1
                        linha.latas.push({
                            Name: 'Lata - ' + (linha["counterDeLatas"]),
                            finalizado: false,
                            haveErrors: false,
                            ListParlevel3: JSON.parse(JSON.stringify(linha.ListParlevel3))
                        })
                        linha.counterDeLatas++
                    }
                }
                vm.cloneLataALot = function (linha, index, repeat) {

                    $.LoadingOverlay("show");
                    for (let i = 0; i < repeat; i++) {
                        vm.cloneLata(linha, index)
                    }
                    $.LoadingOverlay("hide", true);

                }
                vm.cloneLata = function (linha, index) {
                    let cloned = JSON.parse(JSON.stringify(linha.latas[index]))
                    cloned.Name = 'Lata - ' + (linha["counterDeLatas"])
                    linha.latas.push(cloned)
                    linha.counterDeLatas++
                }
                vm.deleteLata = function (linha, index, trashBin) {
                    //if (trashBin)
                    //    linha.latasBin.push(linha.latas[index])
                    linha.latas.splice(index, 1)
                }

                vm.saveStateUrl = '@Url.Action("RecravacaoApi", "api")'//'http://localhost:57506/api/RecravacaoApi'
                vm.saveState = function (notShowLabel, notShowLoader) {
                    let model = vm.linhas.filter(function (s) {
                        return s.Id == vm.activeInLine
                    })[0]

                    $http({ method: 'POST', url: vm.saveStateUrl, data: model, showLoader: notShowLoader ? false : true })
                        .then(function (r) {
                            if (r.data.errors) {
                                r.data.errors.forEach(function (o) {
                                    toastr.error(o)
                                })
                            } else {
                                if (!notShowLabel)
                                    toastr.success(r.data.resposta)
                            }
                        });
                }

                //*Carrega DDLs

                vm.getProdutos = function () {
                    //MOCK
                    vm.produtos = []
                    vm.produtos.push({
                        Name: 'Picanha',
                        Id: 1
                    })
                    vm.produtos.push({
                        Name: 'Contra-filé',
                        Id: 2
                    })
                    vm.produtos.push({
                        Name: 'Filé Mignon',
                        Id: 3
                    })
                }
                vm.getFornecedorLata = function () {
                    //MOCK
                    vm.fornecedorLata = []
                    vm.fornecedorLata.push({
                        Name: 'JBS Lins',
                        Id: 1
                    })
                    vm.fornecedorLata.push({
                        Name: 'Outros',
                        Id: 2
                    })
                }
                vm.getFornecedorTampaLata = function () {
                    //MOCK
                    vm.fornecedorTampaLata = []
                    vm.fornecedorTampaLata.push({
                        Name: 'JBS Lins',
                        Id: 1
                    })
                    vm.fornecedorTampaLata.push({
                        Name: 'Outros',
                        Id: 2
                    })
                }

                vm.getFornecedorLata()
                vm.getFornecedorTampaLata()
                vm.getProdutos()
                //vm.mockLinhas()

                /*GET Todas as linhas cadastradas*/
                vm.getParametrizacaoUrl = '@Url.Action("RecravacaoLinhaApi", "api")'//'http://localhost:57506/api/RecravacaoLinhaApi'
                vm.getParametrizacaoLinhas = function () {
                    $http({ method: 'GET', url: vm.getParametrizacaoUrl + "?Company=" + vm.company, showLoader: true })
                        .then(function (r) {
                            if (r.data.errors) {
                                r.data.errors.forEach(function (o) {
                                    toastr.error(o)
                                })
                            } else {
                                toastr.success(r.data.resposta)
                                //toastr.success('Recuperada coleta persistida \n na Base de Dados')
                                //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                                vm.linhas = r.data.model
                                vm.linhas.forEach(function (o, c) {
                                    o["latas"] = []
                                })
                                vm.executeDocReady(true)
                                vm.getAllLinha()
                                //vm.getState()
                            }
                        });
                }

                //vm.getParametrizacaoZeraColeta = function () {
                //    $http({ method: 'GET', url: vm.getParametrizacaoUrl + "?Company=" + vm.company })
                //        .then(function (r) {
                //            if (r.data.errors) {
                //                r.data.errors.forEach(function (o) {
                //                    toastr.error(o)
                //                })
                //            } else {
                //                //toastr.success(r.data.resposta)
                //                //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                //                toastr.success('Recuperadas linhas parametrizadas \n da base de dados')
                //                vm.linhas = r.data.model
                //                vm.linhas.forEach(function (o, c) {
                //                    o["latas"] = []
                //                })
                //                setTimeout(function () { $('select').select2() }, 200)
                //                vm.seletedLinha = { Id: 0 }
                //                //vm.getState()
                //            }
                //        });
                //}

                /*GET os Dados das linhas cadastradas*/
                vm.getState = function () {
                    $http({ method: 'GET', url: vm.saveStateUrl + "?Company=" + vm.company })
                        .then(function (r) {
                            if (r.data.errors) {
                                r.data.errors.forEach(function (o) {
                                    toastr.error(o)
                                })
                            } else {
                                toastr.success(r.data.resposta)
                                //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                                let linhasSalvas = r.data.model//jQuery.parseJSON(r.data.model.ObjectRecravacaoJson)
                                let novaLinha = []
                                //vm.linhas.forEach(function (o, c) {
                                let o = vm.seletedLinha

                                /*Recebe objeto salvo no banco de dados compara se é ativo na parametrização e subistiu caso seja ativo.*/
                                var objetoSalvo = linhasSalvas.filter(function (objArr) {
                                    let s = jQuery.parseJSON(objArr.ObjectRecravacaoJson)
                                    if (s.Id == o.Id && (o.IsActive == "True" || o.IsActive == true) && (s.IsActive == "False" || s.IsActive == false))
                                        s.IsActive = "True"
                                    else if (s.Id == o.Id && (o.IsActive == "False" || o.IsActive == false) && (s.IsActive == "True" || s.IsActive == true))
                                        s.IsActive = "False"

                                    return s.Id == o.Id
                                });
                                if (objetoSalvo.length)
                                    novaLinha.push(JSON.parse(JSON.stringify(jQuery.parseJSON(objetoSalvo[0].ObjectRecravacaoJson))))
                                else
                                    novaLinha.push(JSON.parse(JSON.stringify(o)))
                                //})

                                /**/

                                vm.seletedLinha = JSON.parse(JSON.stringify(novaLinha))[0]

                                if (vm.seletedLinha.form) {
                                    if (vm.seletedLinha.form.HoraInicioProducao)
                                        vm.seletedLinha.form.HoraInicioProducao = new Date(vm.seletedLinha.form.HoraInicioProducao)

                                    if (vm.seletedLinha.form.HoraFimProducao)
                                        vm.seletedLinha.form.HoraFimProducao = new Date(vm.seletedLinha.form.HoraFimProducao)

                                    if (vm.seletedLinha.form.DataRecebimentoLatas)
                                        vm.seletedLinha.form.DataRecebimentoLatas = new Date(vm.seletedLinha.form.DataRecebimentoLatas)

                                    if (vm.seletedLinha.form.DataRecebimentoTampasFundosLatas)
                                        vm.seletedLinha.form.DataRecebimentoTampasFundosLatas = new Date(vm.seletedLinha.form.DataRecebimentoTampasFundosLatas)
                                }

                                index = vm.findWithAttr(vm.linhas, 'Id', vm.seletedLinha.Id);
                                vm.linhas[index] = vm.seletedLinha

                                vm.seletedLinha = vm.linhas[index]
                                vm.activeInLine = vm.seletedLinha.Id

                                vm.executeDocReady(true)
                                $.LoadingOverlay("hide", true);
                            }
                        });
                }

                vm.getFormula = function (expressaoArr) {
                    let expressaoFinal = ''
                    //expressaoArr.forEach(function(o, c){
                    for (var i = 0; i < expressaoArr.length; i++) {
                        let o = expressaoArr[i]
                        if (o.Operator == "dados") {
                            expressaoFinal += `(${o.OuterLevel3_Text}) `
                        } else {
                            expressaoFinal += `${o.Operator} `
                        }
                    }
                    //})
                    return expressaoFinal
                }

                vm.geraIdCalc = function (expressaoArr, index, lataIndex) {
                    let expressaoFinal = ''
                    var teste = []
                    let indexMaisUm = index + 1
                    //expressaoArr.forEach(function (o, c) {
                    for (var i = 0; i < expressaoArr.length; i++) {
                        let o = expressaoArr[i]
                        if (o.Operator == "dados") {
                            let id = `#ParLevel3_Id${o.OuterLevel3_Id}ParLevel3Value_Id${o.OuterLevel3Value_Id}PontoIndex${indexMaisUm}LataIndex${lataIndex}`
                            let valor = parseFloat($(id).val())
                            expressaoFinal += valor
                        } else {
                            expressaoFinal += `${o.Operator}`
                        }
                    }
                    //})

                    let result = math.eval(expressaoFinal.replace(/\s/g, '').replace('=', ''))
                    return isNaN(result) ? "" : parseFloat(result.toFixed(2))
                    //return vm.addbits(expressaoFinal.replace(/\s/g, ''))
                }

                vm.addbits = function (s) {
                    var total = 0, s = s.match(/[+\-]*(\.\d+|\d+(\.\d+)?)/g) || [];
                    while (s.length) {
                        total += parseFloat(s.shift());
                    }
                    return total;
                }

                vm.resultObj = {}
                vm.SetResult = function (result, data, index) {
                    let key = "ParLevel3_Id" + data.ParLevel3_Id.toString() + "ParLevel3Value_Id" + data.Id.toString() + "PontoIndex" + (index + 1)
                    vm.resultObj[key] = { valor: result, ParLEvel3_Id: data.ParLevel3_Id, ParLevel3Value_Id: data.Id }
                }

                vm.checkTableBgRed = function ($event) {
                    //console.log($event)
                    vm.selectedLata.haveErrors = $($event.currentTarget).parents('.modal').find('table').find('.bgRed').length ? true : false
                    console.log(vm.selectedLata)
                    console.log(vm.selectedLata.haveErrors)
                }

                vm.saveAndClose = function (item, remove) {
                    //console.log(item)
                    item["liberaAssinaturaLata"] = false
                    let vmItem = item
                    let index = vm.seletedLinha.latas.indexOf(item)
                    let numeroDePontos = vm.seletedLinha.TipoDeLata.NumberOfPoints
                    for (var i = 0; i < vmItem.ListParlevel3.length; i++) {
                        if (vmItem.ListParlevel3[i].ResultValue) {
                            //existe
                            let pontosPreenchidos = $.map(vmItem.ListParlevel3[i].ResultValue, function (obj) { return obj })

                            if (!vmItem.ListParlevel3[i].IsPointLess) {
                                if (typeof (pontosPreenchidos[0]) === "string") {

                                } else if (isNaN(pontosPreenchidos[0])) {
                                    vmItem["liberaAssinaturaLata"] = false
                                    vm.saveState()
                                    return false
                                }
                                if (pontosPreenchidos[0].length) {
                                    vmItem["liberaAssinaturaLata"] = true
                                } else {
                                    vmItem["liberaAssinaturaLata"] = false
                                    vm.saveState()
                                    return false
                                }
                            } else if (vmItem.ListParlevel3[i].IsPointLess) {
                                for (var j = 0; j < pontosPreenchidos.length; j++) {
                                    if (typeof (pontosPreenchidos[j]) === "string") {

                                    } else if (isNaN(pontosPreenchidos[j])) {
                                        vmItem["liberaAssinaturaLata"] = false
                                        vm.saveState()
                                        return false
                                    }
                                }
                                if ((numeroDePontos <= pontosPreenchidos.length)) {
                                    vmItem["liberaAssinaturaLata"] = true
                                } else {
                                    vmItem["liberaAssinaturaLata"] = false
                                    vm.saveState()
                                    return false
                                }
                            }
                        }
                    }
                    if (vmItem["liberaAssinaturaLata"])
                        console.log("Parabens!! Voce Preencheu todos os pontos minino! Voce ja pode medir a proxima de 2000 latas !")

                    item = vmItem
                    vm.saveState()
                    return true
                }

                vm.validateUserUrl = '@Url.Action("AuthenticationLogin", "api/User")'//"http://localhost:57506/api/User/AuthenticationLogin"
                //vm.user = { Name: "camilaprata-mtz", Password: "sgq345", Obs: "" }
                vm.user = { Name: "", Password: "" }
                vm.validateUserLata = function () {
                    $http({ method: 'POST', url: vm.validateUserUrl, data: vm.user })
                        .then(function (r) {
                            if (r.data.Retorno) {
                                vm.user = { Name: "", Password: "" }
                                toastr.success("Usuário validado com sucesso!")
                                r.data.Retorno.ParCompanyXUserSgq = []
                                vm.selectedLata.userValidacao = r.data.Retorno
                                vm.selectedLata.dataUserValidacao = moment().format("DD/MM/YYYY HH:mm")
                                vm.selectedLata.finalizado = !vm.selectedLata.finalizado
                                $('.modal').modal('hide')
                                vm.saveState()
                            }
                            else {
                                toastr.error("Usuário ou Senha Inválidos")
                                console.log(r.Mensagem)
                                console.log(r.MensagemExcecao)
                            }
                            //if (r.data.errors) {
                            //    r.data.errors.forEach(function (o) {
                            //        toastr.error(o)
                            //    })
                            //} else {
                            //    toastr.success(r.data.resposta)
                            //    //console.log(jQuery.parseJSON(r.data.model.ObjectRecravacaoJson))
                            //    vm.linhas = r.data.model
                            //    vm.linhas.forEach(function (o, c) {
                            //        o["latas"] = []
                            //    })
                            //    setTimeout(function () { $('select').select2() }, 200)
                            //}
                        });
                }

                vm.validateLine = function () {
                    $http({ method: 'POST', url: vm.validateUserUrl, data: vm.user })
                        .then(function (r) {
                            if (r.data.Retorno) {
                                vm.user = { Name: "", Password: "" }
                                toastr.success("Usuário validado com sucesso!")
                                r.data.Retorno.ParCompanyXUserSgq = []
                                vm.seletedLinha.userValidacao = r.data.Retorno
                                vm.seletedLinha.dataUserValidacao = moment().format("DD/MM/YYYY HH:mm")
                                vm.seletedLinha.isValidated = true
                                vm.seletedLinha.obs = vm.user.Obs
                                $('.modal').modal('hide')
                                let naoFinalizados = vm.seletedLinha.latas.filter(r=> { return !r.finalizado })
                                naoFinalizados.forEach(function (o, c) {
                                    vm.deleteLata(vm.seletedLinha, vm.seletedLinha.latas.indexOf(o))
                                })
                                vm.saveState()
                            }
                            else {
                                toastr.error("Usuário ou Senha Inválidos")
                                console.log(r.Mensagem)
                                console.log(r.MensagemExcecao)
                            }
                        });
                }

                vm.finsihLine = function () {
                    $http({ method: 'POST', url: vm.validateUserUrl, data: vm.user })
                        .then(function (r) {
                            if (r.data.Retorno) {
                                vm.user = { Name: "", Password: "" }
                                toastr.success("Usuário validado com sucesso!")
                                r.data.Retorno.ParCompanyXUserSgq = []
                                vm.seletedLinha.userFinish = r.data.Retorno
                                vm.seletedLinha.dataUserFinish = moment().format("DD/MM/YYYY HH:mm")
                                vm.seletedLinha.finalizado = true
                                vm.seletedLinha.obs = vm.user.Obs
                                $('.modal').modal('hide')
                                vm.saveState()
                            }
                            else {
                                toastr.error("Usuário ou Senha Inválidos")
                                console.log(r.Mensagem)
                                console.log(r.MensagemExcecao)
                            }

                        });
                }

                vm.getParametrizacaoLinhas()

                vm.executeDocReady = function (executaVerificacaoParaAcao) {
                    setTimeout(function () {
                        $('select').select2({ allowClear: true })
                        $('.decimal').each(function (index) {
                            $(this).val($(this).val().replace(',', '.'));
                            $(this).inputmask("decimal", { rightAlign: true, radixPoint: '.', digits: 2, integerDigits: 3, allowMinus: false, digitsOptional: false });
                        })
                        if (executaVerificacaoParaAcao) {
                            /*PELO AMOR DE TUDO QUE É MAIS SAGRADO!!!! REMOVER ESTA FUNCIONALIDADE DAQUI E FAZER DE FORMA DESCENTE! CELSO GEA, OBS FUI EU QUE FIZ ISTO.....*/
                            $('[name=visualizacao]').each(function (o, c) {
                                if ($(c).find('.bgRed').length)
                                    $(c).parent().find('#acaoPrev').removeClass('ng-hide')
                                else
                                    $(c).parent().find('#acaoPrev').addClass('ng-hide')
                            })
                        }
                    }, 125)

                }

            }]).filter('mathPow', function () {
                return function (base, exponent) {
                    return Math.pow(10, exponent);
                }
            }).filter('mathPowRev', function () { // Implementar!!!
                return function (base, exponent) {
                    return Math.pow(10, exponent);
                }
            })

    })();
</script>