@{
    ViewBag.Title = "Nova parametrização";
}

<style>
    button {
        cursor: pointer;
    }

    .tab-pane {
        display: none;
    }

        .tab-pane.active {
            display: block;
        }

    .nav-b-0 {
        margin-bottom: 0px;
    }

    .tab-content.border {
        border-left: 3px solid #d9edf7;
        border-bottom: 3px solid #d9edf7;
        border-right: 3px solid #d9edf7;
        border-top: 3px solid #d9edf7;
        padding-bottom: 100px;
    }

        .tab-content.border a {
            font-size: 20px;
            padding: 15px;
        }

    .tab-content h4 {
        display: block;
        background: #eee;
        text-align: center;
        margin: 0px;
        padding-top: 20px;
        padding-bottom: 20px;
    }

    .isDisabled {
        cursor: not-allowed;
        opacity: 0.5;
    }

        .isDisabled > a {
            color: currentColor;
            display: inline-block; /* For IE11/ MS Edge bug */
            pointer-events: none;
            text-decoration: none;
        }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

    .select2 {
        width: 100% !important;
    }

    .control-label .required, .form-group .required {
        color: black !important;
    }

    body > div.page-wrapper > div.page-container > div.page-content-wrapper > div > div.row > div > ul > li:nth-child(1) a {
        background-color: #d9edf7;
    }

    body > div.page-wrapper > div.page-container > div.page-content-wrapper > div > div.row > div > ul > li:nth-child(2) a {
        background-color: #faebcc;
    }

    body > div.page-wrapper > div.page-container > div.page-content-wrapper > div > div.row > div > ul > li:nth-child(3) a {
        background-color: #fed5d5;
    }

    body > div.page-wrapper > div.page-container > div.page-content-wrapper > div > div.row > div > ul > li:nth-child(4) a {
        background-color: #ff8821;
    }
</style>


<div class="page-content-wrapper">
    <div class="page-content">
        <h1 class="page-title">
            @Resources.Resource.customization
        </h1>

        <div class="page-bar">
            <ul class="page-breadcrumb">
                <li>
                    <a href="#">Home</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <span>@Resources.Resource.customization</span>
                </li>
            </ul>
        </div>

        @Html.Partial("~/Views/Shared/_MensagemAtualizartablets.cshtml")

        <div class="row">
            <div class="col-sm-12">
                <ul class="nav nav-tabs nav-b-0">
                    <li class="active col-sm-3">
                        <a data-toggle="tab" href="#l1">
                            Indicador (Level 1)
                            <select id="selectL1" class="input input-lg col-sm-12"></select>
                        </a>
                    </li>
                    <li class="col-sm-3">
                        <a data-toggle="tab" href="#l2">
                            Monitoramento (Level 2)
                            <select id="selectL2" class="input input-lg"></select>
                        </a>
                    </li>
                    <li class="col-sm-3">
                        <a data-toggle="tab" href="#l3">
                            Tarefa (Level 3)
                            <button id="btnVincular" class="btn btn-warning btn-sm btn-small"
                                    style="height:18px;position: relative;cursor:pointer;padding-top: 0px;
                                    padding-bottom: 0px;margin-bottom: 2px;" title="Vincular todos os níveis selecionados">
                                <span class="glyphicon glyphicon-link"></span>
                            </button>
                            <select id="selectL3" class="input input-lg"></select>
                        </a>
                    </li>
                    <li class="col-sm-3">
                        <a data-toggle="tab" href="#dc">
                            Departamento X Cargo (Av e Am)
                            <select id="selectDCDepartment" class="input input-lg"></select>
                        </a>
                    </li>
                </ul>

                <div class="tab-content border">
                    <div class="col-sm-12">
                        <div id="l1" class="tab-pane fade in active">
                            <h3 class="jumbotron text-center" data-name="Name"></h3>
                            <div class="col-xs-3">
                                <ul class="nav nav-tabs tabs-left" data-levels="l1">
                                    <li class="active">
                                        <a href="#l1_geral" data-toggle="tab" id="informacoesGerais">
                                            Informações gerais
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l1_avancados" data-toggle="tab" id="itensAvancados">
                                            Itens avançados
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l1_campocabecalho" data-toggle="tab" id="camposCabecalhos">
                                            Campos de cabeçalhos
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l1_processo" data-toggle="tab" id="processos">
                                            Processos
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-xs-9">
                                <div class="tab-content">
                                    <div class="tab-pane active" id="l1_geral">
                                        @Html.Partial("ParL1Geral")
                                    </div>
                                    <div class="tab-pane" id="l1_avancados">
                                        @Html.Partial("ParL1Avancados")
                                    </div>
                                    <div class="tab-pane" id="l1_campocabecalho">
                                        @Html.Partial("ParL1Cabecalho")
                                    </div>
                                    <div class="tab-pane" id="l1_processo">
                                        @Html.Partial("ParL1Processo")
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="l2" class="tab-pane fade">
                            <h3 class="jumbotron text-center" data-name="Name"></h3>
                            <div class="col-xs-3">
                                <ul class="nav nav-tabs tabs-left" data-levels="l2">
                                    <li class="active">
                                        <a href="#l2_geral" data-toggle="tab">
                                            Informações gerais
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l2_avancados" data-toggle="tab">
                                            Itens avançados
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l2_avam" data-toggle="tab">
                                            Avaliação e Amostra
                                        </a>
                                    </li>
                                    @*<li>
                                            <a href="#l2_cabecalho" data-toggle="tab">
                                                Cabeçalhos no monitoramento
                                            </a>
                                        </li>*@
                                    <li>
                                        <a href="#l2_contador" data-toggle="tab">
                                            Contadores
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-xs-9">
                                <div class="tab-content">
                                    <div class="tab-pane active" id="l2_geral">
                                        @Html.Partial("ParL2Geral")
                                    </div>
                                    <div class="tab-pane" id="l2_avancados">
                                        @Html.Partial("ParL2Avancados")
                                    </div>
                                    <div class="tab-pane" id="l2_avam">
                                        @Html.Partial("ParL2Avam")
                                    </div>
                                    @*<div class="tab-pane" id="l2_cabecalho">
                                            @Html.Partial("ParL2Cabecalho")
                                        </div>*@
                                    <div class="tab-pane" id="l2_contador">
                                        @Html.Partial("ParL2Contador")
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="l3" class="tab-pane fade">
                            <h3 class="jumbotron text-center" data-name="Name"></h3>
                            <div class="col-xs-3">
                                <ul class="nav nav-tabs tabs-left" data-levels="l3">
                                    <li class="active">
                                        <a href="#l3_geral" data-toggle="tab">
                                            Informações gerais
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l3_avancados" data-toggle="tab">
                                            Itens avançados
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l3_avam" data-toggle="tab">
                                            Avaliação e Amostra
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l3_tipo_dado_entrada" data-toggle="tab">
                                            Tipo dados de entrada
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#l3_peso" data-toggle="tab">
                                            Vincular Peso
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-xs-9">
                                <div class="tab-content">
                                    <div class="tab-pane active" id="l3_geral">
                                        @Html.Partial("ParL3Geral")
                                    </div>
                                    <div class="tab-pane" id="l3_avancados">
                                        @Html.Partial("ParL3Avancados")
                                    </div>
                                    <div class="tab-pane" id="l3_avam">
                                        @Html.Partial("ParL3Avam")
                                    </div>
                                    <div class="tab-pane" id="l3_tipo_dado_entrada">
                                        @Html.Partial("ParL3TipoDadoEntrada")
                                    </div>
                                    <div class="tab-pane" id="l3_peso">
                                        @Html.Partial("ParL3VincularPeso")
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="dc" class="tab-pane fade">
                            <h3 class="jumbotron text-center" data-name="Name"></h3>
                            <div class="col-xs-3">
                                <ul class="nav nav-tabs tabs-left" data-levels="dc">
                                    <li>
                                        <a href="#dc_avam" data-toggle="tab">
                                            Avaliação e Amostra
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-xs-9">
                                <div class="tab-content">
                                    <div class="tab-pane" id="dc_avam">
                                        @Html.Partial("ParDCAvam")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    let setSelectLevel1 = function (data) {
        preencheSelect('selectL1', 'Name', 'Id', data.ParLevels1, 'Selecione o Inidicador', preencheL1);
        preencheSelect('selectL2AvamParLevel1', 'Name', 'Id', data.ParLevels1, 'Selecione o Inidicador');
        preencheSelect('selectL3AvamParLevel1', 'Name', 'Id', data.ParLevels1, 'Selecione o Inidicador');
        preencheSelect('selectL3PesoParLevel1', 'Name', 'Id', data.ParLevels1, 'Selecione o Inidicador');
        preencheSelect('selectL3TipoDadoParLevel1', 'Name', 'Id', data.ParLevels1, 'Selecione o Inidicador');
        getSelectsL1();
    }

    let setSelectLevel2 = function (data) {
        preencheSelect('selectL2', 'Name', 'Id', data.ParLevels2, 'Selecione o Monitoramento', preencheL2);
        preencheSelect('selectL3AvamParLevel2', 'Name', 'Id', data.ParLevels2, 'Selecione o Monitoramento');
        preencheSelect('selectL3PesoParLevel2', 'Name', 'Id', data.ParLevels2, 'Selecione o Monitoramento');
        preencheSelect('selectL3TipoDadoParLevel2', 'Name', 'Id', data.ParLevels2, 'Selecione o Monitoramento');
        //getSelectsL2();
    }

    let setSelectLevel3 = function (data) {
        preencheSelect('selectL3', 'Name', 'Id', data.ParLevels3, 'Selecione a Tarefa', preencheL3);
        //getSelectsL3();
    }

    $(document).ready(function () {

        getGenericAjax('@Url.Action("Get", "api/ParLevel1Api")', 'Get', setSelectLevel1);

        getGenericAjax('@Url.Action("Get", "api/ParLevel2Api")', 'Get', setSelectLevel2);

        getGenericAjax('@Url.Action("Get", "api/ParLevel3Api")', 'Get', setSelectLevel3);

        verifyTabs('selectL1', 'l1');
        verifyTabs('selectL2', 'l2');
        verifyTabs('selectL3', 'l3');

    });

    let preencheSelect = function (id, name, value, list, defaultText, callBack) {

        $(`select#${id}`).empty();
        $(`select#${id}`).append(`<option value="0" selected>${defaultText}</option>`);

        let listVinculados = $.grep(list, (item) => { return (item.GroupName != "" && item.GroupName != undefined) });
        let listNaoVinculados = $.grep(list, (item) => { return (item.GroupName == undefined || item.GroupName == "") });

        if (listVinculados && listVinculados.length > 0) {

            [... new Set(listVinculados.map(x => x.GroupName))].forEach((groupName) => {

                $(`select#${id}`).append('<optgroup label="' + groupName + '">');

                listVinculados.filter(x => x.GroupName == groupName).forEach((o) => {

                    $(`select#${id}`).append(`<option value="${o[value]}">${o[name]}</option>`);

                });

                $(`select#${id}`).append('</optgroup>');

            });
        }

        $(listNaoVinculados).each(function (i, o) {
            $(`select#${id}`).append(`<option value="${o[value]}">${o[name]}</option>`);
        });

        if (callBack)
            $(`select#${id}`).off('change').on('change', callBack);

        $(`select#${id}`).select2();
    }

    let atualizaValoresDoObjeto = function (oldValues, newValues) {
        if (oldValues != null) {
            $(Object.keys(newValues)).each(function (i, o) {
                if (typeof (oldValues[o]) != 'undefined') {
                    oldValues[o] = newValues[o];
                    if (o.lastIndexOf('_Id') == (o.length - 3) && parseInt(newValues[o]) <= 0) {
                        oldValues[o] = null;
                    }
                }
            });
        } else {
            oldValues = {};
            $(Object.keys(newValues)).each(function (i, o) {
                oldValues[o] = newValues[o];
                if (o.lastIndexOf('_Id') == (o.length - 3) && parseInt(newValues[o]) <= 0) {
                    oldValues[o] = null;
                }
            });
        }
        return oldValues;
    }

    let preencheCampos = function (div_id, prefix, obj, preencheId) {

        $(Object.keys(obj)).each(function (i, o) {

            var element = $(`#${div_id} [name="${prefix}${o}"]:not([data-id])`);
            preencheValores(element, obj[o]);
            element = $(`#${div_id} [data-name="${prefix}${o}"]:not([data-id])`);
            preencheValores(element, obj[o]);

        });

        if (preencheId == true)
            $(`#${div_id} input[data-id]`).val(obj.Id);

    }

    let apagaCampos = function (div_id) {

        $(`#${div_id} input:not([data-id],[data-notnull])`).val('');
        $(`#${div_id} select`).val(0);
        $(`#${div_id} select`).trigger('change');
        $(`#${div_id} textarea`).html('');
        $(`#${div_id} input[type='checkbox']`).removeAttr('checked');
        $(`#${div_id} [data-name]`).text('');
        $(`#${div_id} [data-form]`).removeClass('alert alert-success');
        $(`#${div_id} [data-form]`).find('[data-cancel]').remove();
        $(`#${div_id} [data-form]`).find('[data-edit]').remove();
        $(`#${div_id} [data-form]`).find('[data-add]').removeClass('hide');
        $(`#${div_id} [data-form]`).removeData('sgq');
    }

    let preencheValores = function (element, value) {

        if (element.is('input')) {

            if (element.prop('type') == "checkbox") {
                element.prop('checked', value);
            }
            else if (element.prop('type') == "date") {
                if (value)
                    element.val(value.split("T")[0]);
            }
            else {
                element.val(value);
            }

        } else if (element.is('select')) {

            if (value == null)
                value = 0;
            element.val(value);
            element.trigger('change');

        } else {

            element.text(value);
        }
    }

    let preencheL1 = function (e) {

        apagaCampos('l1');
        verifyTabs('selectL1', 'l1');
        setFormToDefault('ParL1Geral');
        setFormToDefault('ParL1Cabecalho');
        setFormToDefault('ParL1Processo');

        if (parseInt($(this).val()) > 0) {

            openLoader();

            $.ajax({

                url: `@Url.Action("Get", "api/ParLevel1Api")/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (ParLevel1) {

                    preencheCampos('l1', '', ParLevel1, true)
                    ParL1Geral.set(ParLevel1);
                    ParL1Avancados.set(ParLevel1);

                    preencheCampos('l1', '', ParLevel1, true)
                    parL1Processo.load(ParLevel1.ParLevel1XCluster);
                    parL1Cabecalho.load(ParLevel1.ParLevel1XHeaderField);
                    verifyTabs('selectL1', 'l1');
                    closeLoader();
                },
                error: function (request, error) {
                    closeLoader();
                    openMessageModal("Ocorreu um erro", JSON.stringify(request));
                    console.log(error)
                }
            });

            $.ajax({

                url: `@Url.Action("GetParLevel2Vinculados", "api/ParLevel2Api")/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (data) {

                    preencheSelect('selectL2', 'Text', 'Value', data.Options, 'Selecione o Monitoramento', preencheL2);
                },
                error: function (request, error) {
                    closeLoader();
                    openMessageModal("Ocorreu um erro", JSON.stringify(request));
                    console.log(error)
                }
            });

        } else {
            getGenericAjax('@Url.Action("Get", "api/ParLevel2Api")', 'Get', setSelectLevel2);
            getGenericAjax('@Url.Action("Get", "api/ParLevel3Api")', 'Get', setSelectLevel3);
        }
    }

    let preencheL2 = function (e) {

        apagaCampos('l2');
        verifyTabs('selectL2', 'l2');
        setFormToDefault('ParL2Geral');
        setFormToDefault('ParL2Avam');

        if (parseInt($(this).val()) > 0) {

            $.ajax({
                url: `@Url.Action("Get", "api/ParLevel2Api")/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (data) {
                    console.table(data);
                    preencheCampos('l2', '', data.Parlevel2, true)
                    ParL2Geral.set(data.Parlevel2);
                    ParL2Avancados.set(data.Parlevel2);
                    parL2Avam.load(data.Parlevel2.ParEvaluation);
                    verifyTabs('selectL2', 'l2');
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            });

            debugger
            $.ajax({

                url: `@Url.Action("GetParLevel3Vinculados", "api/ParLevel3Api")/${$('#selectL1 :selected').val()}/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (data) {

                    preencheSelect('selectL3', 'Text', 'Value', data.Options, 'Selecione a Tarefa', preencheL3);
                },
                error: function (request, error) {
                    closeLoader();
                    openMessageModal("Ocorreu um erro", JSON.stringify(request));
                    console.log(error)
                }
            });
        } else {
            getGenericAjax('@Url.Action("Get", "api/ParLevel3Api")', 'Get', setSelectLevel3);
        }
    }

    let preencheL3 = function (e) {

        apagaCampos('l3');
        verifyTabs('selectL3', 'l3');

        if (parseInt($(this).val()) > 0) {

            $.ajax({
                url: `@Url.Action("Get", "api/ParLevel3Api")/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (data) {
                    preencheCampos('l3', '', data.Parlevel3, true)
                    ParL3Geral.set(data.Parlevel3);
                    ParL3Avancados.set(data.Parlevel3);
                    parL3Avam.load(data.Parlevel3.ParLevel3EvaluationSample);
                    ParL3Peso.load(data.Parlevel3.ParVinculoPeso);
                    ParL3TipoDado.load(data.Parlevel3.ParLevel3Value);

                    verifyTabs('selectL3', 'l3');
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            });

        }
    }

    let preencheDC = function (e) {

        apagaCampos('dc');
        verifyTabs('selectDCDepartment', 'dc');

        if (parseInt($(this).val()) > 0) {

            $.ajax({
                url: `@Url.Action("Get", "api/ParEvaluationXDepartmentXCargoApi")/${$(this).val()}`,
                type: 'Get',
                dataType: "json",
                data: {},
                contentType: "application/json",
                success: function (data) {
                    preencheCampos('dc', '', data.ParDepartment, true)
                    preencheSelect('selectDCAvamParCargo', 'Name', 'Id', data.ParCargo, 'Todos');
                    parDCAvam.load(data.ParEvaluationXDepartmentXCargo);
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            });

        }
    }

    let getSelectsL1 = function () {

        $.ajax({
            url: '@Url.Action("GetSelectsL1", "api/ParLevel1Api")',
            type: 'Get',
            dataType: "json",
            data: {},
            contentType: "application/json",
            success: function (data) {

                preencheSelect('selectL1CriticalLevel', 'Name', 'Id', data.ParCriticalLevels, 'Selecione o Grupo');
                preencheSelect('selectL1Cluster', 'Name', 'Id', data.ParClusters, 'Selecione o Cluster');
                preencheSelect('selectParConsolidation', 'Name', 'Id', data.ParConsolidationTypes, 'Selecione o tipo de Consolidação');
                preencheSelect('selectParFrequency', 'Name', 'Id', data.ParFrequencies, 'Selecione o tipo de Frequência');
                preencheSelect('selectParScoreType', 'Name', 'Id', data.ParScoreTypes, 'Selecione o tipo de Score');
                preencheSelect('selectL1ParLevelDefiniton', 'Name', 'Id', data.ParLevelDefinitons, 'Selecione onde deve aparecer o cabeçalho');
                preencheSelect('selectL1ParFieldType', 'Name', 'Id', data.ParFieldTypes, 'Selecione o tipo');

                preencheSelect('selectL3GeralParFrequency', 'Name', 'Id', data.ParFrequencies, 'Selecione o tipo de Frequência');
                preencheSelect('selectL3GeralParDepartment', 'Name', 'Id', data.ParDepartments, 'Selecione o departamento');

                preencheSelect('selectL2AvamCluster', 'Name', 'Id', data.ParClusters, 'Selecione o Cluster');
                preencheSelect('selectL2AvamParCompany', 'Name', 'Id', data.ParCompanys, 'Selecione a empresa');

                preencheSelect('selectL3AvamCluster', 'Name', 'Id', data.ParClusters, 'Selecione o Cluster');
                preencheSelect('selectL3AvamParCompany', 'Name', 'Id', data.ParCompanys, 'Selecione a empresa');

                preencheSelect('selectL3PesoPesoCluster', 'Name', 'Id', data.ParClusters, 'Todos');
                preencheSelect('selectL3PesoParCompany', 'Name', 'Id', data.ParCompanys, 'Selecione a Unidade');
                preencheSelect('selectL3PesoCluster', 'Name', 'Id', data.ParClusters, 'Todos');
                preencheSelect('selectL3PesoParDepartment', 'Name', 'Id', data.ParDepartments, 'Todos');
                preencheSelect('selectL3PesoParGroupParLevel1', 'Name', 'Id', data.ParGroupParLevel1s, 'Selecione a Função');

                preencheSelect('selectL3ParCargo', 'Name', 'Id', data.ParCargos, 'Selecione o Cargo');

                preencheSelect('selectL3TipoDadoParLevel3InputType', 'Name', 'Id', data.ParLevel3InputTypes, 'Selecione o Tipo de dados para a coleta');
                preencheSelect('selectL3TipoDadoParLevel3BoolFalse', 'Name', 'Id', data.ParLevel3BoolFalses, 'Valor negativo');
                preencheSelect('selectL3TipoDadoParLevel3BoolTrue', 'Name', 'Id', data.ParLevel3BoolTrues, 'Valor positivo');
                preencheSelect('selectL3TipoDadoParCompany', 'Name', 'Id', data.ParCompanys, 'Seleciona a Empresa');
                preencheSelect('selectL3TipoDadoParMeasurementUnit', 'Name', 'Id', data.ParMeasurementUnits, 'Selecione a unidade de medida');

                preencheSelect('selectDCAvamParCompany', 'Name', 'Id', data.ParCompanys, 'Todas as empresas');
                preencheSelect('selectDCDepartment', 'Name', 'Id', data.ParDepartments, 'Selecione o departamento', preencheDC);

                verifyTabs('selectDCDepartment', 'dc');

            },
            error: function (request, error) {
                alert("Request: " + JSON.stringify(request));
            }
        });
    }

    let getGenericAjax = function (url, type, callback) {

        $.ajax({
            url: url,
            type: type,
            dataType: "json",
            data: {},
            contentType: "application/json",
            success: callback,
            error: function (request, error) {
                alert("Request: " + JSON.stringify(request));
            }
        });
    }

    @*let save = function (saveLevel) {

        var saveUrl = "";
        var formdata = {};

        switch (saveLevel) {

            case 1: //Itens Gerais
                formdata = $('#ParL1Geral').serializeFormToObjetc();
                saveUrl = '@Url.Action("PostParLevel1", "api/ParLevel1Api")';
                break;

            case 2: //Itens Avançados
                formdata = $('#ParL1Avancados').serializeFormToObjetc();
                saveUrl = '@Url.Action("PostParLevel1Avancados", "api/ParLevel1Api")';
                break;

            case 3: //Campos Cabeçalho

                break;

            case 4: //Processos

                break;

            case 5:
                break;

            default:
        }

        //fazer metodo para chamar o ajax para salvar
        $.ajax({
            url: saveUrl,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(formdata),
            contentType: "application/json",
            success: function (data) {
                openMessageModal("Feito", "Dados Salvos");
                $('#selectL1').trigger('change');

            },
            error: function (request, error) {
                alert("Request: " + JSON.stringify(request));
            }
        });
    }*@

    let enableTabs = function (id) {
        $('ul.nav[data-levels="' + id + '"] a:not([href="#' + id + '_geral"])').prop('disabled', false)
        $('ul.nav[data-levels="' + id + '"] a:not([href="#' + id + '_geral"])').removeClass('isDisabled')
    }

    let disableTabs = function (id) {
        $('#' + id + ' .tab-pane:not([id="#' + id + '_geral"])').removeClass('active');
        $('ul.nav[data-levels="' + id + '"] li').removeClass('active');
        $('ul.nav[data-levels="' + id + '"] a:not([href="#' + id + '_geral"])').prop('disabled', true)
        $('ul.nav[data-levels="' + id + '"] a:not([href="#' + id + '_geral"])').addClass('isDisabled')
        $('ul.nav[data-levels="' + id + '"] a[href="#' + id + '_geral"]').trigger('click');
    }

    let verifyTabs = function (select, id) {
        if (parseInt($('select#' + select).val()) > 0) {
            enableTabs(id);
        } else {
            disableTabs(id);
        }
    }

    let valorDoSelect = function (seletor, valor, valorPadrao) {
        var text = $(seletor + " option[value=" + valor + "]").text();
        if (!!text)
            return text;
        return valorPadrao;
    }

    let formIsValid = function (id) {

        let isValid = true;

        $('#' + id + ' input.required:visible').each((i, o) => {

            $(o).css('background-color', "");

            if (!$(o).val()) {
                $(o).css('background-color', 'rgba(255, 0, 0, 0.27)');
                isValid = false;
            }

        });

        $('#' + id + ' select.required:visible').each((i, o) => {

            $(o).next().find('.select2-selection').css('background-color', "");

            if (!parseInt($('option:selected', o).val())) {
                $(o).next().find('.select2-selection').css('background-color', 'rgba(255, 0, 0, 0.27)');
                isValid = false;
            }

        });

        if (!isValid) {
            openMessageModal("Alerta", "Os campos obrigatórios devem ser preenchidos");
        }

        return isValid;
    }

    let setFormToDefault = function (id) {

        $('#' + id + ' input.required').each((i, o) => {
            $(o).css('background-color', "");
        });

        $('#' + id + ' select.required').each((i, o) => {
            $(o).next().find('.select2-selection').css('background-color', "");
        });
    }

    let optionIsValid = function (obj, id) {

        let isValid = true;

        //se for binário o multipla escolha valida pela quantidade de parMultipleValues
        if (obj.ParHeaderField.ParFieldType_Id == 1 || obj.ParHeaderField.ParFieldType_Id == 3) {

            if (!obj.ParHeaderField.ParMultipleValues || obj.ParHeaderField.ParMultipleValues.length <= 0 || obj.ParHeaderField.ParMultipleValues.filter(item => item.IsActive == true).length == 0) {
                openMessageModal("Alerta", "Favor Inserir opções antes de salvar");
                isValid = false;
            }

        } else if (!formIsValid(id)) {

            isValid = false;

        }

        return isValid;
    }

    $('#btnVincular').on('click', function (e) {

        $('[href="#l3"]').trigger('click');
        $('[href="#l3_peso"]').trigger('click');

        let parLevel1_Id = parseInt($("#selectL1 :selected").val());
        let parLevel2_Id = parseInt($("#selectL2 :selected").val());
        let parLevel3_Id = parseInt($("#selectL3 :selected").val());

        $('#ParL3Peso').find('#selectL3PesoParLevel1').val(parLevel1_Id).change();
        $('#ParL3Peso').find('#selectL3PesoParLevel2').val(parLevel2_Id).change();
        $('#ParL3Peso').find('#selectL3PesoParLevel3').val(parLevel3_Id).change();

        @*let idLevel1 = $('#selectL1').val();
        let idLevel2 = $('#selectL2').val();
        let idLevel3 = $('#selectL3').val();
        let userId = getCookie('webControlCookie')[0].split('=')[1]

        if (idLevel1 <= 0) {
            openMessageModal(Resources("alert"), Resources("select_audit_first"));
            return;
        }

        if (idLevel2 <= 0) {
            openMessageModal(Resources("alert"), Resources("select_monitoring_first"));
            return;
        }

        if (idLevel3 <= 0) {
            openMessageModal(Resources("alert"), Resources("select_task_first"));
            return;
        }

        $.ajax({
            url: `@Url.Action("AddVinculoL1L2", "api/ParamsApi")/${idLevel1}/${idLevel2}/${idLevel3}/${userId}`,
            type: 'Get',
            dataType: "json",
            data: {},
            contentType: "application/json",
            success: function (data) {

                openMessageModal(Resources("done"), Resources("monitoring_task_linked_indicator_successfully"));

            }

        }).fail(function (e, h, x) {
            openMessageModal(Resources("alert"), e.responseJSON.Message);
        });*@
    });

    $(document).on('click', function () {

        setTimeout(function () {

            if ($('#l1').hasClass('active')) {
                $('#l1').parents('.border').css('border-color', '#d9edf7');
            }

            if ($('#l2').hasClass('active')) {
                $('#l2').parents('.border').css('border-color', '#faebcc');
            }

            if ($('#l3').hasClass('active')) {
                $('#l3').parents('.border').css('border-color', '#fed5d5');
            }

            if ($('#dc').hasClass('active')) {
                $('#dc').parents('.border').css('border-color', '#ff8821');
            }

        }, 150);

    });

</script>
