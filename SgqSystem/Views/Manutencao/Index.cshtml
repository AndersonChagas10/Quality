@model SgqSystem.ViewModels.FormularioParaRelatorioViewModel
@{
    ViewBag.Title = "Manutenção";
    var url1 = Url.Action("Index", "manDataCollectITs");
    var urlHome = Url.Action("Index", "ManPainelGestao");
    var urlGrupoPorPacote = Url.Action("getSelectGraficoRegionalGrupoPorPacote", "api/Manutencao");
    var UrlDespRegGrup = Url.Action("getSelectGrafDespRegGrup", "api/Manutencao");
}

<style>
    #LinkHome a:hover {
        text-decoration: none;
    }

    #LinkHome {
        float: right;
        font-size: 40px;
        margin-bottom: 10px;
        width: 100%;
        text-align: right;
        margin-right: 4%;
    }
</style>

<div class="page-content" style="min-height: 600px;">
    @Html.Partial("~/Views/Shared/_FormToQueryFullScreen.cshtml")
    <div id="formBodyContent">
        <div class="page-content-wrapper">
            <div id="LinkHome">
                <a class="fa fa-home" aria-hidden="true" href="@urlHome"></a>
            </div>
            <br />
            <br />
            <br />
            <!-- BEGIN CONTENT BODY -->
            @*<div>
                    <a id="linkGambiara" href="@url1">Coleta de Indicadores Técnicos</a>
                </div>*@

            <div class="page-content" style="min-height: 600px;">
                <!-- BEGIN PAGE HEADER-->
                <!-- BEGIN PAGE BAR -->
                <div class="page-bar">
                    <ul class="page-breadcrumb">

                        <li>
                            <span>Manutenção</span>
                        </li>
                    </ul>
                    <div class="page-toolbar">
                        <!--<div id="dashboard-report-range" class="pull-right tooltips btn btn-fit-height green" data-placement="top" data-original-title="Change dashboard date range">-->
                        <div id="dashboard-report-range" class="pull-right tooltips btn btn-fit-height green">
                            <i class="fa fa-calendar"></i>&nbsp;
                            <span class="thin uppercase" id="currentDate"></span>&nbsp;
                        </div>
                    </div>
                </div>
                <!-- END PAGE BAR -->
                <!-- END PAGE HEADER-->
                <div class="row">
                    <div class="col-xs-12">
                        <div class="portlet light bordered">
                            <div class="portlet-title tabbable-line">
                                <div class="caption">
                                    <i class="icon-share font-dark"></i>
                                    <span class="caption-subject font-dark bold uppercase">Manutenção</span>
                                </div>
                                <button type="button" onclick="toggleFullScreen();" class="btn btn-default fa fa-arrows-alt" style="float:right"></button>
                            </div>

                            <div class="portlet-body">
                                <div class="tab-content">
                                    <div class="tab-pane active" id="setup_tab">

                                        <div id="corpo" style="margin-left: auto; margin-right:auto; padding:20px; z-index:1;">

                                            <div id="balao" style="display:none; position:fixed; width:200px; height:100px; border:1px solid #000; top:100px; right:0; z-index:9999; background-color: white;"> Dados filtrados</div>

                                            <div id="mostrarBalao" style="display:none; position:fixed; width:20px; height:20px; border:1px solid #000; top:100px; right:0; z-index:9999; background-color: black; color:white;"><</div>

                                            <style>
                                                .graficoPainel4 {
                                                    /*margin-left: auto;
                                                    margin-right: auto;
                                                    width: 100%;*/
                                                    /*height: 200px;*/
                                                }
                                            </style>

                                            <div id="GraficoDespesaTodasRegionais1" class="graficoPainel4" style="float: left"></div>

                                            <div id="GraficoDespesaTodasRegionais" class="graficoPainel4" style="width: 50%; float: right"></div>

                                            <div id="GraficoDespesaTodasRegionaisPorPacote" class="graficoPainel4"></div>

                                            <div id="GrafDespReg" class="graficoPainel4"></div>

                                            <div id="TabelaDespesaTodasRegionais" style="display:none; cursor:pointer; position: relative; overflow: auto; width: 100%; margin-left: auto; margin-right: auto; "></div>

                                            <br /><br />

                                            <div id="GrafPacotePorRegional"></div>

                                            <div id="secoundTableTeste" style="display:none; cursor:pointer; position: relative; overflow: auto; width: 100%; margin-left: auto; margin-right: auto; "></div>

                                            <br /><br />

                                            <div id="GrafImpacFatTecDesv" style="display:none; cursor:pointer"></div>
                                            <div id="TabelaITPorUni" style="display:none; cursor:pointer; position: relative; overflow: auto; width: 100%; "></div>
                                            <div id="RegionalChart" style="display:none; cursor:pointer"></div>
                                            <div id="EvolutivoOrcamentoGeralChart" style="display:none; cursor:pointer"></div>
                                            <div id="EvolutivoDaContaPorUnidade" style="display:none; cursor:pointer"></div>
                                            <div id="DadosTecnicosContaChart" style="display:none; cursor:pointer"></div>
                                            <div id="UnitChart" style="display:none; cursor:pointer"></div>

                                        </div>

                                        <script>

                                            var regionalSelecionada = '';
                                            var unidadeSelecionada = '';
                                            var urlGrupoPorPacote = '@Html.Raw(@urlGrupoPorPacote)';
                                            var urlDespRegGrup = '@Html.Raw(@UrlDespRegGrup)';

                                            function buscaCor(posicao) {

                                                var listaCor = [];

                                                listaCor[0] = ['#00FF00', 0, 0];
                                                listaCor[1] = ['#11FF00', 1, 0.04];
                                                listaCor[2] = ['#22FF00', 2, 0.08];
                                                listaCor[3] = ['#77FF00', 3, 0.12];
                                                listaCor[4] = ['#88FF00', 4, 0.16];
                                                listaCor[5] = ['#99FF00', 5, 0.2];
                                                listaCor[6] = ['#AAFF00', 6, 0.24];
                                                listaCor[7] = ['#BBFF00', 7, 0.28];
                                                listaCor[8] = ['#CCFF00', 8, 0.32];
                                                listaCor[9] = ['#DDFF00', 9, 0.36];
                                                listaCor[10] = ['#EEFF00', 10, 0.4];
                                                listaCor[11] = ['#FFFF00', 11, 0.44];
                                                listaCor[12] = ['#FFEE00', 12, 0.48];
                                                listaCor[13] = ['#FFDD00', 13, 0.52];
                                                listaCor[14] = ['#FFCC00', 14, 0.56];
                                                listaCor[15] = ['#FFBB00', 15, 0.6];
                                                listaCor[16] = ['#FF9900', 16, 0.64];
                                                listaCor[17] = ['#FF8800', 17, 0.68];
                                                listaCor[18] = ['#FF7700', 18, 0.72];
                                                listaCor[19] = ['#FF6600', 19, 0.76];
                                                listaCor[20] = ['#FF5500', 20, 0.8];
                                                listaCor[21] = ['#FF4400', 21, 0.84];
                                                listaCor[22] = ['#FF3300', 22, 0.88];
                                                listaCor[23] = ['#FF2200', 23, 0.92];
                                                listaCor[24] = ['#FF1100', 24, 0.96];
                                                listaCor[25] = ['#FF0000', 25, 1];


                                                for (i = 0; i < listaCor.length; i++) {
                                                    if (posicao <= listaCor[i][2]) {
                                                        return listaCor[i][0];
                                                    }
                                                }
                                            }

                                            //monta a matriz
                                            function montaTabela(id, div, altura, colunaFixa1, titulosColunasCorpo, valoresColuna1, dadosPrincipais, footerColumn1, footerColumnsBody, footerTotal, titleTotal, columnsTotal) {

                                                $(div).empty();

                                                $(div).animate({
                                                    opacity: 1,
                                                }, 1500);

                                                $(div).empty();

                                                /******
                                                Todos os valores ficam aqui. Isso garante que todas as div e tables fiquem proporcionais
                                                *******/
                                                var alturaDaMatriz = altura; //Vem dos parâmetros
                                                var alturaDasCelulasDeValor = '40px';
                                                var larguraDasCelulasDeValor = '70px';
                                                var alturaDasCelulasDeMapaDeCalor = '39px';
                                                var larguraDoCorpo = '100%';
                                                var larguraDaColunaFixaEsquerda = '100%';
                                                var larguraDaColunaFixaDireita = '100%';
                                                var alturaDoTituloLinha1 = '30px';
                                                var alturaDoTituloLinha2 = '30px';
                                                var tamanhoDaLetra = '11px';
                                                var alturaDasCelulasDaColuna1 = '40px';
                                                var nivelDeTransparencia = '0.6';
                                                var corColunasAlternadas1 = '#D3D3D3';
                                                var corColunasAlternadas2 = '#DCDCDC';
                                                var corColunasAlternadas3 = '#CCCCCC';
                                                var corColunasAlternadas4 = '#DDDDDD';
                                                var colTituloERodapeFixo = '#DCDCDC';
                                                /****************************************************************************************************/

                                                /***********************************************************
                                                TABELA
                                                **************************************************/
                                                var tabela = "";
                                                tabela += "<div id=\"fixarColuna\" style=\"font-size:" + tamanhoDaLetra + "; style=\"width:100%; \">";
                                                tabela += "<style>";
                                                tabela += "#fixarcoluna table {border:none; background-color:none}";
                                                tabela += "#fixarColuna tr {border-bottom: 1px #eee solid;}";
                                                tabela += "#fixarColuna .content table {width:100%;}";
                                                tabela += "#fixarColuna .content tr {background-color: none;}";
                                                tabela += "#fixarColuna .content tr:hover {background-color: none;}";
                                                tabela += "#fixarColuna .content td {border-bottom:solid 1px #999; padding:0px;}";
                                                tabela += "#fixarColuna .contentHead td {border-bottom:solid 2px #CCC; padding:0px;}";
                                                tabela += "#fixarColuna .contentHead tr {background-color: none;}";
                                                tabela += "#fixarColuna .content" + id + " {display:block; width:100%; padding:0; margin:0; overflow-y: hidden; height:" + alturaDaMatriz + ";}";
                                                tabela += "fixarColuna .contentHead {display:block; width:98.5%; padding:0; margin:0; overflow: hidden; height:35px;}";
                                                tabela += "#fixarColuna .content div {display:inline; float: left; position: relative; border: none; width:100%;}";
                                                tabela += "#fixarColuna .contentHead div {display:inline; float: left; position: relative; border: none; width:100%;}";
                                                tabela += "#fixarColuna .content .contentHead .larguraP19 {width:" + larguraDaColunaFixaEsquerda + "; overflow-x: hidden;}";

                                                tabela += "#fixBody" + id + "::-webkit-scrollbar-track {";
                                                tabela += "    background-color: #FFFFFF;";
                                                tabela += "}";
                                                tabela += "  #fixBody" + id + "::-webkit-scrollbar {";
                                                tabela += "                                        width: 6px;";
                                                tabela += "                                        height: 6px;";
                                                tabela += "                                        background: #FFFFFF;";
                                                tabela += "                                    }";
                                                tabela += "#fixBody" + id + "::-webkit-scrollbar-thumb {";
                                                tabela += "                                        background: #bf0d0e;";
                                                tabela += "                                    }";
                                                tabela += "";
                                                tabela += "  #colUie" + id + "::-webkit-scrollbar-track {";
                                                tabela += "                                        background-color: #FFFFFF;";
                                                tabela += "                                    }";
                                                tabela += "  #colUie" + id + "::-webkit-scrollbar {";
                                                tabela += "                                        width: 6px;";
                                                tabela += "                                        height: 6px;";
                                                tabela += "                                        background: #FFFFFF;";
                                                tabela += "                                    }";
                                                tabela += "  #colUie" + id + "::-webkit-scrollbar-thumb {";
                                                tabela += "                                       background: #bf0d0e;";
                                                tabela += "                                   }";
                                                tabela += "";
                                                tabela += " #colUieFim" + id + "::-webkit-scrollbar-track {";
                                                tabela += "                                       background-color: #FFFFFF;";
                                                tabela += "                                   }";
                                                tabela += " #colUieFim" + id + "::-webkit-scrollbar {";
                                                tabela += "                                       width: 6px;";
                                                tabela += "                                       height: 6px;";
                                                tabela += "                                       background: #FFFFFF;";
                                                tabela += "                                   }";
                                                tabela += " #colUieFim" + id + "::-webkit-scrollbar-thumb {";
                                                tabela += "                                       background: #bf0d0e;";
                                                tabela += "                                   }";


                                                tabela += "</style>"

                                                tabela += "<div style=\"width:20%; height:" + alturaDaMatriz + "; float:left;\">";

                                                /***************************
                                                TITULOS ESQUERDA
                                                ***************************/
                                                tabela += "<div class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaEsquerda + "; overflow-x: hidden; float:left;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\">";
                                                tabela += "<thead>";
                                                tabela += "<tr>";
                                                tabela += "<td height=\"" + alturaDoTituloLinha1 + "\" width=\"" + larguraDaColunaFixaEsquerda + "\" rowspan=\"" + colunaFixa1[0][1] + "\">" + colunaFixa1[0][0] + "</td>";
                                                tabela += "</tr>";
                                                tabela += "<tr>";
                                                tabela += "<td height=\"" + alturaDoTituloLinha2 + "\" width=\"" + larguraDaColunaFixaEsquerda + "\" rowspan=\"" + colunaFixa1[1][1] + "\" style=\"background-color:" + colTituloERodapeFixo + ";\">" + colunaFixa1[1][0] + "</td>";
                                                tabela += "</tr>";
                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";


                                                /***************************
                                                COLUNA ESQUERDA
                                                ***************************/
                                                tabela += "<div class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaEsquerda + ";overflow-y:hidden;overflow-x:scroll; float:left; height:" + altura + ";\" id=\"colUie" + id + "\" >";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" >";

                                                for (var i = 0; i < valoresColuna1.length; i++) {
                                                    tabela += "<tr><td height=\"" + alturaDasCelulasDaColuna1 + "\" >" + valoresColuna1[i] + "</td></tr>";
                                                }


                                                tabela += "</table>";
                                                tabela += "</div>";

                                                /***************************
                                                RODAPE ESQUERDA
                                                ***************************/
                                                tabela += "<div class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaEsquerda + "; overflow-x: hidden; float:left;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\"   width=\"100%\" >";
                                                tabela += "<thead>";
                                                tabela += "<tr>";
                                                tabela += "<td style=\"background-color: " + colTituloERodapeFixo + "\" height=\"" + alturaDasCelulasDeValor + "\" rowspan=\"" + footerColumn1[0][1] + "\">" + footerColumn1[0][0] + "</td>";
                                                tabela += "</tr>";
                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";

                                                tabela += "</div>";

                                                /************************************************************************************/

                                                tabela += "<div style=\"width:50%; height:" + alturaDaMatriz + "; float:left;\">";

                                                /***************************
                                               TITULOS CORPO
                                               ***************************/
                                                tabela += "<div id=\"colHead" + id + "\" style=\"width:" + larguraDoCorpo + "; overflow-x: hidden; float: right;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">";
                                                tabela += "<thead>";
                                                tabela += "<tr>";

                                                for (var i = 0; i < titulosColunasCorpo[0].length; i++) {
                                                    var color = corColunasAlternadas3;
                                                    if (i % 2 == 0) {
                                                        color = corColunasAlternadas4;
                                                    }
                                                    tabela += "<td align=\"center\" style=\"height:" + alturaDoTituloLinha1 + "; min-width:" + larguraDasCelulasDeValor + "; background-color: " + color + ";\" colspan=\"" + titulosColunasCorpo[0][i][1] + "\"><b>" + titulosColunasCorpo[0][i][0] + "</b></td>";
                                                }

                                                tabela += "</tr>";
                                                tabela += "<tr>";

                                                var color = corColunasAlternadas1;

                                                for (var i = 0; i < titulosColunasCorpo[1].length - 4; i++) {

                                                    if (i % 4 == 0) {
                                                        color == corColunasAlternadas1 ? color = corColunasAlternadas2 : color = corColunasAlternadas1;
                                                    }
                                                    tabela += "<td align=\"center\" style=\"height:" + alturaDoTituloLinha2 + ";min-width:" + larguraDasCelulasDeValor + "; background-color: " + color + ";\" colspan=\"" + titulosColunasCorpo[1][i][1] + "\"><b>" + titulosColunasCorpo[1][i][0] + "</b></td>";
                                                }

                                                tabela += "</tr>";
                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";

                                                /***************************
                                                COLUNA CORPO
                                                ***************************/
                                                tabela += "<div id=\"fixBody" + id + "\" style=\"width:" + larguraDoCorpo + ";overflow: scroll;height:" + altura + ";z-index:2; float: right;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">";


                                                for (var i = 0; i < dadosPrincipais.length; i++) {
                                                    tabela += "<tr>";
                                                    var k = 0;
                                                    for (var j = 0; j < dadosPrincipais[i].length; j++) {
                                                        //tabela += "<td height=\"" + alturaDasCelulasDeValor + "\" onclick=\"secoundTable(this)\"align=\"center\" x=\"" + dadosPrincipais[i][j][1] + "\" y=\"" + dadosPrincipais[i][j][2] + "\"style=\"min-width:" + larguraDasCelulasDeValor + ";  background-color: " + dadosPrincipais[i][j][4] + "\">" + (dadosPrincipais[i][j][3] == '%' ? '<i>' + dadosPrincipais[i][j][0] + '<i>%' : float2moeda(Math.ceil(dadosPrincipais[i][j][0] / 1000))) + "</td>";

                                                        tabela += "<td onclick=\"clickTabela(" + id + ", this)\"align=\"center\" x=\"" + dadosPrincipais[i][j][1] + "\" y=\"" + dadosPrincipais[i][j][2] + "\" align=\"center\" style=\"min-width:" + larguraDasCelulasDeValor + "; padding:0px; height: " + alturaDasCelulasDeValor + ";\">";

                                                        if (dadosPrincipais[i][j][3] == '%') {

                                                            tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + dadosPrincipais[i][j][0] + "%</b><i></div> <div id=\"penis\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + dadosPrincipais[i][j][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                        }else if(dadosPrincipais[i][j][3] == '$'){

                                                            tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + float2moeda(Math.ceil(dadosPrincipais[i][j][0] / 1000)) + "</b><i></div> <div id=\"boceta\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + dadosPrincipais[i][j][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                        } else {

                                                            tabela += k == 1 && dadosPrincipais[i][j - 1][0] < dadosPrincipais[i][j][0] ? '<span style=\'color: red;\'>' + float2moeda(Math.ceil(dadosPrincipais[i][j][0] / 1000)) + '</span>' : float2moeda(Math.ceil(dadosPrincipais[i][j][0] / 1000));
                                                        }

                                                        tabela += "</td>";
                                                        
                                                        if (k == 3) {
                                                            k = 0;
                                                        } else {
                                                            k++;
                                                        }
                                                    }
                                                    k = 0;
                                                    tabela += "</tr>";
                                                }

                                                tabela += "</table>";
                                                tabela += "</div>";


                                                /***************************
                                               RODAPE CORPO
                                               ***************************/
                                                tabela += "<div id=\"footerBody" + id + "\" style=\"width:" + larguraDoCorpo + "; overflow-x: hidden; float: right;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">";
                                                tabela += "<thead>";
                                                tabela += "<tr>";

                                                var color = corColunasAlternadas1;
                                                var k = 0;
                                                for (var i = 0; i < footerColumnsBody[0].length; i++) {

                                                    if (i % 4 == 0) {
                                                        color == corColunasAlternadas1 ? color = corColunasAlternadas2 : color = corColunasAlternadas1;
                                                    }

                                                    tabela += "<td align=\"center\" style=\"background-color: " + color + "; min-width:" + larguraDasCelulasDeValor + "; padding:0px; height: " + alturaDasCelulasDeValor + ";\">";

                                                    if (footerColumnsBody[0][i][3] == '%') {

                                                        tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + footerColumnsBody[0][i][0] + "%</b><i></div> <div id=\"penis\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + footerColumnsBody[0][i][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                    } else if (footerColumnsBody[0][i][3] == '$') {

                                                        tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + float2moeda(Math.ceil(footerColumnsBody[0][i][0] / 1000)) + "</b><i></div> <div id=\"boceta\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + footerColumnsBody[0][i][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                    } else {

                                                        tabela += k == 1 && footerColumnsBody[0][i - 1][0] < footerColumnsBody[0][i][0] ? '<span style=\'color: red;\'>' + float2moeda(Math.ceil(footerColumnsBody[0][i][0] / 1000)) + '</span>' : float2moeda(Math.ceil(footerColumnsBody[0][i][0] / 1000));
                                                    }

                                                    tabela += "</td>";
                                                  
                                                    if (k == 3) {
                                                        k = 0;
                                                    } else {
                                                        k++;
                                                    }
                                                }

                                                tabela += "</tr>";

                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";

                                                tabela += "</div>";

                                                /************************************************************************************/

                                                tabela += "<div style=\"width:30%; " + alturaDaMatriz + "; float:left;\">";


                                                /***************************
                                                TITULOS DIREITA
                                                ***************************/
                                                tabela += "<div  id=\"headTotal" + id + "\" class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaDireita + "; overflow-x: hidden; float:left;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\">";
                                                tabela += "<thead>";

                                                tabela += "<tr>";

                                                for (var i = 0; i < titleTotal[0].length; i++) {
                                                    var color = corColunasAlternadas3;
                                                    if (i % 2 == 0) {
                                                        color = corColunasAlternadas4;
                                                    }
                                                    tabela += "<td align=\"center\" style=\"height:" + alturaDoTituloLinha1 + "; width:" + larguraDaColunaFixaDireita + "; background-color: " + color + ";\" colspan=\"" + titleTotal[0][i][1] + "\">" + titleTotal[0][i][0] + "</td>";
                                                }

                                                tabela += "</tr>";
                                                tabela += "<tr>";

                                                var color = corColunasAlternadas1;

                                                for (var i = 0; i < titleTotal[1].length; i++) {
                                                    if (i % 4 == 0) {
                                                        color == corColunasAlternadas1 ? color = corColunasAlternadas2 : color = corColunasAlternadas1;
                                                    }
                                                    tabela += "<td align=\"center\" style=\" height:" + alturaDoTituloLinha2 + "; min-width:" + larguraDasCelulasDeValor + "; background-color: " + color + ";\" colspan=\"" + titleTotal[1][i][1] + "\">" + titleTotal[1][i][0] + "</td>";
                                                }

                                                tabela += "</tr>";

                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";


                                                /***************************
                                                COLUNA DIREITA
                                                ***************************/
                                                tabela += "<div class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaDireita + ";overflow-y:hidden; float:left;overflow-x:scroll;height:" + altura + ";\" id=\"colUieFim" + id + "\" >";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\" >";


                                                for (var i = 0; i < columnsTotal.length; i++) {
                                                    tabela += "<tr>";
                                                    var k = 0;
                                                    for (var j = 0; j < columnsTotal[i].length; j++) {

                                                        tabela += "<td align=\"center\" style=\"min-width:" + larguraDasCelulasDeValor + "; padding:0px; height: " + alturaDasCelulasDeValor + ";\">";

                                                        if (columnsTotal[i][j][3] == '%') {

                                                            tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + columnsTotal[i][j][0] + "%</b><i></div> <div id=\"penis\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + columnsTotal[i][j][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                        } else if (columnsTotal[i][j][3] == '$') {

                                                            tabela += "<div style=\"position: relative; width:" + larguraDasCelulasDeValor + "; height: " + alturaDasCelulasDeMapaDeCalor + "; z-index:1; line-height: " + alturaDasCelulasDeMapaDeCalor + ";\"><i><b>" + float2moeda(Math.ceil(columnsTotal[i][j][0] / 1000)) + "</b><i></div> <div id=\"boceta\" style=\"margin-top: -" + alturaDasCelulasDeValor + ";width:" + larguraDasCelulasDeValor + ";height: " + alturaDasCelulasDeValor + "; position:relative ;background-color: " + columnsTotal[i][j][4] + "; opacity: " + nivelDeTransparencia + "; z-index:0;\"></div>";

                                                        } else {

                                                            tabela += k == 1 && columnsTotal[i][j - 1][0] < columnsTotal[i][j][0] ? '<span style=\'color: red;\'>' + float2moeda(Math.ceil(columnsTotal[i][j][0] / 1000)) + '</span>' : float2moeda(Math.ceil(columnsTotal[i][j][0] / 1000));
                                                        }

                                                        tabela += "</td>";


                                                        if (k == 3) {
                                                            k = 0;
                                                        } else {
                                                            k++;
                                                        }
                                                    }
                                                    tabela += "</tr>";
                                                }

                                                tabela += "</table>";
                                                tabela += "</div>";

                                                /***************************
                                                RODAPE DIREITA
                                                ***************************/
                                                tabela += "<div id=\"footerTotal" + id + "\" class=\"larguraP19\" style=\"width:" + larguraDaColunaFixaDireita + "; overflow-x: hidden;  float:left;\">";
                                                tabela += "<table cellspacing=\"0\" cellpadding=\"0\">";
                                                tabela += "<thead>";
                                                tabela += "<tr>";

                                                for (var i = 0; i < footerTotal[0].length; i++) {
                                                    tabela += "<td height=\"" + alturaDasCelulasDeValor + "\"  align=\"center\" style=\"min-width:" + larguraDasCelulasDeValor + "; background-color: " + colTituloERodapeFixo + "\" colspan=\"" + footerTotal[0][i][1] + "\">" + (footerTotal[0][i][3] == '%' ? footerTotal[0][i][0] + '%' : float2moeda(Math.ceil(footerTotal[0][i][0] / 1000))) + "</td>";
                                                }

                                                tabela += "</tr>";

                                                tabela += "</thead>";
                                                tabela += "</table>";
                                                tabela += "</div>";

                                                tabela += "</div>";
                                                /***************************************************/


                                                tabela += "</div>";

                                                $(div).append(tabela);


                                                $('#fixBody' + id).scroll(function () {
                                                    $("#colHead" + id).scrollLeft($(this).scrollLeft());
                                                    $("#colFoot" + id).scrollLeft($(this).scrollLeft());
                                                    $("#footerBody" + id).scrollLeft($(this).scrollLeft());
                                                });

                                                $('#colUieFim' + id).scroll(function () {
                                                    $("#headTotal" + id).scrollLeft($(this).scrollLeft());
                                                    $("#footerTotal" + id).scrollLeft($(this).scrollLeft());
                                                });

                                                $('#fixBody' + id).scroll(function () {
                                                    $("#colUie" + id).scrollTop($(this).scrollTop());
                                                    $("#colUieFim" + id).scrollTop($(this).scrollTop());
                                                });
                                                $('#colUieFim' + id).scroll(function () {
                                                    $("#colUie" + id).scrollTop($(this).scrollTop());
                                                    $("#fixBody" + id).scrollTop($(this).scrollTop());
                                                });
                                                $('#colUie' + id).scroll(function () {
                                                    $("#fixBody" + id).scrollTop($(this).scrollTop());
                                                    $("#colUieFim" + id).scrollTop($(this).scrollTop());
                                                });

                                                $(div).show();

                                            }

                                            //chamada ajax para montar primeiro gráfico
                                            function MountGraficoDespesaTodasRegionais1() {

                                                $.post('../api/Manutencao/getSelectGrafico0/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + '/', function (lista) {

                                                    var regional = [];

                                                    lista.forEach(function (entry) {
                                                        regional.push(entry.Regional);
                                                    });

                                                    var xOrcada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrcada[i]) / xOrcada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrcada[i]
                                                        desvio2 += xOrcada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        if (xOrcada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' }; //'#a00808' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' };// '#116606' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    GraficoDespesaTodasRegionais1(regional, xOrcada, xRealizada, mediaDesvio, media);

                                                    $btn.button('reset');

                                                });
                                            }

                                            //locação primeiro gráfico
                                            function GraficoDespesaTodasRegionais1(name, x1, x2, mediaDesvio, media) {
                                                $(function () {

                                                    (function (H) {
                                                        var Axis = H.Axis,
                                                            inArray = H.inArray,
                                                            wrap = H.wrap;

                                                        wrap(Axis.prototype, 'adjustTickAmount', function (proceed) {
                                                            var chart = this.chart,
                                                                primaryAxis = chart[this.coll][0],
                                                                primaryThreshold,
                                                                primaryIndex,
                                                                index,
                                                                newTickPos,
                                                                threshold;

                                                            // Find the index and return boolean result
                                                            function isAligned(axis) {
                                                                index = inArray(threshold, axis.tickPositions); // used in while-loop
                                                                return axis.tickPositions.length === axis.tickAmount && index === primaryIndex;
                                                            }

                                                            if (chart.options.chart.alignThresholds && this !== primaryAxis) {
                                                                primaryThreshold = (primaryAxis.series[0] && primaryAxis.series[0].options.threshold) || 0;
                                                                threshold = (this.series[0] && this.series[0].options.threshold) || 0;

                                                                primaryIndex = primaryAxis.tickPositions && inArray(primaryThreshold, primaryAxis.tickPositions);

                                                                if (this.tickPositions && this.tickPositions.length &&
                                                                        primaryIndex > 0 &&
                                                                        primaryIndex < primaryAxis.tickPositions.length - 1 &&
                                                                        this.tickAmount) {

                                                                    // Add tick positions to the top or bottom in order to align the threshold
                                                                    // to the primary axis threshold
                                                                    while (!isAligned(this)) {

                                                                        if (index < primaryIndex) {
                                                                            newTickPos = this.tickPositions[0] - this.tickInterval;
                                                                            this.tickPositions.unshift(newTickPos);
                                                                            this.min = newTickPos;
                                                                        } else {
                                                                            newTickPos = this.tickPositions[this.tickPositions.length - 1] + this.tickInterval;
                                                                            this.tickPositions.push(newTickPos);
                                                                            this.max = newTickPos;
                                                                        }
                                                                        proceed.call(this);
                                                                    }
                                                                }

                                                            } else {
                                                                proceed.call(this);
                                                            }
                                                        });
                                                    }(Highcharts));

                                                    Highcharts.chart('GraficoDespesaTodasRegionais1', {

                                                        credits: {
                                                            enabled: false
                                                        },

                                                        chart: {
                                                            height: 200,
                                                            zoomType: 'x, y',
                                                            alignThresholds: true,
                                                            type: 'column'
                                                        },

                                                        title: {
                                                            text: 'Despesas por Regional',
                                                            style: {
                                                                fontSize: 'small'
                                                            }
                                                        },

                                                        //legend: {
                                                        //    layout: 'vertical',
                                                        //    align: 'right',
                                                        //    verticalAlign: 'center',
                                                        //    borderWidth: 0,
                                                        //    floating: true,
                                                        //    backgroundColor: 'rgba(238, 238, 238,0.5)',
                                                        //    style: {
                                                        //        fontSize: 'x-small'
                                                        //    }
                                                        //},

                                                        xAxis: {
                                                            categories: name
                                                        },

                                                        yAxis: [{
                                                            allowDecimals: false,
                                                            title: {
                                                                text: 'Desvio %'
                                                            },

                                                            opposite: true,
                                                            gridLineWidth: 0

                                                        }, {
                                                            allowDecimals: false,
                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },
                                                            gridLineWidth: 0

                                                        }],

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}',
                                                                    style: {
                                                                        fontWeight: ' normal '
                                                                    }
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            name: 'Despesa Orçada',
                                                            data: x1,
                                                            //data: [1,2,3,4],
                                                            yAxis: 1,
                                                            color: ' #ADB4D8',


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        $('#GraficoDespesaTodasRegionais1').css('width', '50%');

                                                                        //$('#GraficoDespesaTodasRegionais').empty();
                                                                        if ($('#GraficoDespesaTodasRegionaisPorPacote').highcharts() != undefined) {
                                                                            $('#GraficoDespesaTodasRegionaisPorPacote').highcharts().destroy()
                                                                        }
                                                                        //$('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        if ($('#GrafDespReg').highcharts() != undefined) {
                                                                            $('#GrafDespReg').highcharts().destroy();
                                                                        }
                                                                        //$('#GrafDespReg').empty();
                                                                        if ($('#GraficoDespesaTodasRegionaisPorPacote').highcharts() != undefined) {
                                                                            $('#GraficoDespesaTodasRegionaisPorPacote').highcharts().destroy()
                                                                        }
                                                                        //$('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        if ($('#GrafDespReg').highcharts() != undefined) {
                                                                            $('#GrafDespReg').highcharts().destroy()
                                                                        }
                                                                        setTimeout(resizeHighcharts(), 200);
                                                                        MountGraficoDespesaTodasRegionais(this.category);
                                                                        MountGraficoDespesaTodasRegionaisGrupoPorPacote(this.category);
                                                                        MountGrafDespRegGrup(this.category, null);
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Despesa Real',
                                                            data: x2,
                                                            //data: [4,3,2,1],
                                                            yAxis: 1,
                                                            color: '#aef2ae',

                                                            point: {
                                                                events: {
                                                                    click: function () {

                                                                        $('#GraficoDespesaTodasRegionais1').css('width', '50%');

                                                                        //$('#GraficoDespesaTodasRegionais').empty();
                                                                        if ($('#GraficoDespesaTodasRegionaisPorPacote').highcharts() != undefined) {
                                                                            $('#GraficoDespesaTodasRegionaisPorPacote').highcharts().destroy()
                                                                        }
                                                                        //$('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        if ($('#GrafDespReg').highcharts() != undefined) {
                                                                            $('#GrafDespReg').highcharts().destroy();
                                                                        }
                                                                        //$('#GrafDespReg').empty();
                                                                        if ($('#GraficoDespesaTodasRegionaisPorPacote').highcharts() != undefined) {
                                                                            $('#GraficoDespesaTodasRegionaisPorPacote').highcharts().destroy()
                                                                        }
                                                                        //$('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        if ($('#GrafDespReg').highcharts() != undefined) {
                                                                            $('#GrafDespReg').highcharts().destroy()
                                                                        }
                                                                        setTimeout(resizeHighcharts(), 200);
                                                                        MountGraficoDespesaTodasRegionais(this.category);
                                                                        MountGraficoDespesaTodasRegionaisGrupoPorPacote(this.category);
                                                                        MountGrafDespRegGrup(this.category,null);
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Desvio %',
                                                            data: mediaDesvio,
                                                            //data: [-17.12454, -8.78, -2.46, -3.87],
                                                            yAxis: 0,
                                                            visible: false,
                                                            color: '#f7f580',
                                                            dataLabels: {
                                                                enabled: true,
                                                                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                formatter: function () {
                                                                    return this.y + '%';
                                                                }
                                                            },


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        $('#GraficoDespesaTodasRegionais').empty();
                                                                        $('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        $('#GrafDespReg').empty();
                                                                        MountGraficoDespesaTodasRegionais(this.category);
                                                                        MountGraficoDespesaTodasRegionaisGrupoPorPacote(this.category);
                                                                        MountGrafDespRegGrup(this.category,null);
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        ],

                                                        responsive: {
                                                            rules: [{
                                                                condition: {
                                                                    maxWidth: 500
                                                                },
                                                                chartOptions: {
                                                                    legend: {
                                                                        align: 'center',
                                                                        verticalAlign: 'bottom',
                                                                        layout: 'horizontal'
                                                                    },
                                                                    yAxis: {
                                                                        labels: {
                                                                            align: 'left',
                                                                            x: 0,
                                                                            y: -5
                                                                        },
                                                                        title: {
                                                                            text: null
                                                                        }
                                                                    },
                                                                    subtitle: {
                                                                        text: null
                                                                    },
                                                                    credits: {
                                                                        enabled: false
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    });
                                                });
                                            }

                                            //chamada ajax para montar terceiro gráfico
                                            function MountGraficoDespesaTodasRegionaisPorPacote(regional) {
                                                $.post('../api/Manutencao/getSelectGraficoRegionalPorPacote/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + getManutencaoRegional() + '/' + escape(regional.replace(/[/]/g, '|')) + '/', function (lista) {

                                                    var regional = [];

                                                    lista.forEach(function (entry) {
                                                        regional.push(entry.Regional);
                                                    });

                                                    var xOrcada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrcada[i]) / xOrcada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrcada[i]
                                                        desvio2 += xOrcada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        if (xOrcada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    var text = "Sub-Regional";

                                                    GraficoDespesaTodasRegionaisPorPacote(regional, xOrcada, xRealizada, mediaDesvio, media, text);

                                                    $btn.button('reset');

                                                });
                                            }

                                            //chamada ajax para montar terceiro grafico (regional)
                                            function MountGraficoDespesaTodasRegionaisGrupoPorPacote(regional) {

                                                var obj = {
                                                    'dataIni': enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2),
                                                    'dataFim': enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2),
                                                    'meses': getManutencaoMes(),
                                                    'anos': getManutencaoAno(),
                                                    'regFiltro': getManutencaoRegional(),
                                                    'regional': regional
                                                };

                                                $.post(urlGrupoPorPacote, obj, function (lista) {

                                                    var regional = [];

                                                    lista.forEach(function (entry) {
                                                        regional.push(entry.Regional);
                                                    });

                                                    var xOrcada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrcada[i]) / xOrcada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrcada[i]
                                                        desvio2 += xOrcada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        if (xOrcada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    var text = "Regional";

                                                    GraficoDespesaTodasRegionaisPorPacote(regional, xOrcada, xRealizada, mediaDesvio, media, text);

                                                    $btn.button('reset');
                                                });
                                            }

                                            //locação terceiro gráfico
                                            function GraficoDespesaTodasRegionaisPorPacote(name, x1, x2, mediaDesvio, media, text) {
                                                $(function () {


                                                    (function (H) {
                                                        var Axis = H.Axis,
                                                            inArray = H.inArray,
                                                            wrap = H.wrap;

                                                        wrap(Axis.prototype, 'adjustTickAmount', function (proceed) {
                                                            var chart = this.chart,
                                                                primaryAxis = chart[this.coll][0],
                                                                primaryThreshold,
                                                                primaryIndex,
                                                                index,
                                                                newTickPos,
                                                                threshold;

                                                            // Find the index and return boolean result
                                                            function isAligned(axis) {
                                                                index = inArray(threshold, axis.tickPositions); // used in while-loop
                                                                return axis.tickPositions.length === axis.tickAmount && index === primaryIndex;
                                                            }

                                                            if (chart.options.chart.alignThresholds && this !== primaryAxis) {
                                                                primaryThreshold = (primaryAxis.series[0] && primaryAxis.series[0].options.threshold) || 0;
                                                                threshold = (this.series[0] && this.series[0].options.threshold) || 0;

                                                                primaryIndex = primaryAxis.tickPositions && inArray(primaryThreshold, primaryAxis.tickPositions);

                                                                if (this.tickPositions && this.tickPositions.length &&
                                                                        primaryIndex > 0 &&
                                                                        primaryIndex < primaryAxis.tickPositions.length - 1 &&
                                                                        this.tickAmount) {

                                                                    // Add tick positions to the top or bottom in order to align the threshold
                                                                    // to the primary axis threshold
                                                                    while (!isAligned(this)) {

                                                                        if (index < primaryIndex) {
                                                                            newTickPos = this.tickPositions[0] - this.tickInterval;
                                                                            this.tickPositions.unshift(newTickPos);
                                                                            this.min = newTickPos;
                                                                        } else {
                                                                            newTickPos = this.tickPositions[this.tickPositions.length - 1] + this.tickInterval;
                                                                            this.tickPositions.push(newTickPos);
                                                                            this.max = newTickPos;
                                                                        }
                                                                        proceed.call(this);
                                                                    }
                                                                }

                                                            } else {
                                                                proceed.call(this);
                                                            }
                                                        });
                                                    }(Highcharts));

                                                    Highcharts.chart('GraficoDespesaTodasRegionaisPorPacote', {

                                                        credits: {
                                                            enabled: false
                                                        },

                                                        chart: {
                                                            height: 200,
                                                            zoomType: 'x, y',
                                                            alignThresholds: true,
                                                            type: 'column'
                                                        },

                                                        title: {
                                                            text: 'Despesas por ' + text + ' por Pacote',
                                                            style: {
                                                                fontSize: 'small'
                                                            }
                                                        },

                                                        legend: {
                                                            layout: 'vertical',
                                                            align: 'right',
                                                            verticalAlign: 'center',
                                                            borderWidth: 0,
                                                            floating: true,
                                                            backgroundColor: 'rgba(238, 238, 238,0.5)',
                                                            style: {
                                                                fontSize: 'x-small'
                                                            }
                                                        },

                                                        xAxis: {
                                                            categories: name
                                                        },

                                                        yAxis: [{
                                                            allowDecimals: false,
                                                            title: {
                                                                text: 'Desvio %'
                                                            },
                                                            gridLineWidth: 0,
                                                            opposite: true

                                                        }, {
                                                            allowDecimals: false,
                                                            gridLineWidth: 0,
                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },



                                                        }],

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}',
                                                                    style: {
                                                                        fontWeight: ' normal '
                                                                    }
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            name: 'Despesa Orçada',
                                                            data: x1,
                                                            //data: [1,2,3,4],
                                                            yAxis: 1,
                                                            color: ' #ADB4D8',

                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        console.log(this.category.split("<br><br>")[0] + "gabriel" + this.category.split("<br><br>")[1]),
                                                                        MountGrafDespReg(this.category.split("<br><br>")[0], this.category.split("<br><br>")[1])
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Despesa Real',
                                                            data: x2,
                                                            //data: [4,3,2,1],
                                                            yAxis: 1,
                                                            color: '#aef2ae',


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        console.log(this.category.split("<br><br>")[0] + "gabriel" + this.category.split("<br><br>")[1]),
                                                                        MountGrafDespReg(this.category.split("<br><br>")[0], this.category.split("<br><br>")[1])
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Desvio %',
                                                            data: mediaDesvio,
                                                            //data: [-17.12454, -8.78, -2.46, -3.87],
                                                            yAxis: 0,
                                                            visible: false,
                                                            color: '#f7f580',
                                                            dataLabels: {
                                                                enabled: true,
                                                                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                formatter: function () {
                                                                    return this.y + '%';
                                                                }
                                                            },


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        console.log(this.category.split("<br><br>")[0] + "gabriel" + this.category.split("<br><br>")[1]),
                                                                        MountGrafDespReg(this.category.split("<br><br>")[0], this.category.split("<br><br>")[1])
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        ],

                                                        responsive: {
                                                            rules: [{
                                                                condition: {
                                                                    maxWidth: 500
                                                                },
                                                                chartOptions: {
                                                                    legend: {
                                                                        align: 'center',
                                                                        verticalAlign: 'bottom',
                                                                        layout: 'horizontal'
                                                                    },
                                                                    yAxis: {
                                                                        labels: {
                                                                            align: 'left',
                                                                            x: 0,
                                                                            y: -5
                                                                        },
                                                                        title: {
                                                                            text: null
                                                                        }
                                                                    },
                                                                    subtitle: {
                                                                        text: null
                                                                    },
                                                                    credits: {
                                                                        enabled: false
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    });
                                                });
                                            }

                                            //chamada ajax para montar o segundo gráfico
                                            function MountGraficoDespesaTodasRegionais(regional) {
                                                $.post('../api/Manutencao/getSelectGrafico1/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + getManutencaoRegional() + '/' + regional + '/', function (lista) {


                                                    var regional = [];

                                                    lista.forEach(function (entry) {
                                                        regional.push(entry.Regional);
                                                    });

                                                    var xOrcada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrcada[i]) / xOrcada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrcada[i]
                                                        desvio2 += xOrcada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrcada.length; i++) {
                                                        if (xOrcada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    GraficoDespesaTodasRegionais(regional, xOrcada, xRealizada, mediaDesvio, media);

                                                    $btn.button('reset');

                                                });
                                            }

                                            //locação segundo gráfico
                                            function GraficoDespesaTodasRegionais(name, x1, x2, mediaDesvio, media) {
                                                $(function () {


                                                    (function (H) {
                                                        var Axis = H.Axis,
                                                            inArray = H.inArray,
                                                            wrap = H.wrap;

                                                        wrap(Axis.prototype, 'adjustTickAmount', function (proceed) {
                                                            var chart = this.chart,
                                                                primaryAxis = chart[this.coll][0],
                                                                primaryThreshold,
                                                                primaryIndex,
                                                                index,
                                                                newTickPos,
                                                                threshold;

                                                            // Find the index and return boolean result
                                                            function isAligned(axis) {
                                                                index = inArray(threshold, axis.tickPositions); // used in while-loop
                                                                return axis.tickPositions.length === axis.tickAmount && index === primaryIndex;
                                                            }

                                                            if (chart.options.chart.alignThresholds && this !== primaryAxis) {
                                                                primaryThreshold = (primaryAxis.series[0] && primaryAxis.series[0].options.threshold) || 0;
                                                                threshold = (this.series[0] && this.series[0].options.threshold) || 0;

                                                                primaryIndex = primaryAxis.tickPositions && inArray(primaryThreshold, primaryAxis.tickPositions);

                                                                if (this.tickPositions && this.tickPositions.length &&
                                                                        primaryIndex > 0 &&
                                                                        primaryIndex < primaryAxis.tickPositions.length - 1 &&
                                                                        this.tickAmount) {

                                                                    // Add tick positions to the top or bottom in order to align the threshold
                                                                    // to the primary axis threshold
                                                                    while (!isAligned(this)) {

                                                                        if (index < primaryIndex) {
                                                                            newTickPos = this.tickPositions[0] - this.tickInterval;
                                                                            this.tickPositions.unshift(newTickPos);
                                                                            this.min = newTickPos;
                                                                        } else {
                                                                            newTickPos = this.tickPositions[this.tickPositions.length - 1] + this.tickInterval;
                                                                            this.tickPositions.push(newTickPos);
                                                                            this.max = newTickPos;
                                                                        }
                                                                        proceed.call(this);
                                                                    }
                                                                }

                                                            } else {
                                                                proceed.call(this);
                                                            }
                                                        });
                                                    }(Highcharts));

                                                    Highcharts.chart('GraficoDespesaTodasRegionais', {

                                                        credits: {
                                                            enabled: false
                                                        },

                                                        chart: {
                                                            height: 200,
                                                            zoomType: 'x, y',
                                                            alignThresholds: true,
                                                            type: 'column'
                                                        },

                                                        title: {
                                                            text: 'Despesas por Sub-Regional',
                                                            style: {
                                                                fontSize: 'small'
                                                            }
                                                        },

                                                        //legend: {
                                                        //    layout: 'vertical',
                                                        //    align: 'right',
                                                        //    verticalAlign: 'center',
                                                        //    borderWidth: 0,
                                                        //    floating: true,
                                                        //    backgroundColor: 'rgba(238, 238, 238,0.5)',
                                                        //    style: {
                                                        //        fontSize: 'x-small'
                                                        //    }
                                                        //},

                                                        xAxis: {
                                                            categories: name
                                                        },

                                                        yAxis: [{
                                                            allowDecimals: false,
                                                            title: {
                                                                text: 'Desvio %'
                                                            },
                                                            gridLineWidth: 0,
                                                            opposite: true

                                                        }, {
                                                            allowDecimals: false,
                                                            gridLineWidth: 0,
                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },


                                                        }],

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}',
                                                                    style: {
                                                                        fontWeight: ' normal '
                                                                    }
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            name: 'Despesa Orçada',
                                                            data: x1,
                                                            //data: [1,2,3,4],
                                                            yAxis: 1,
                                                            color: ' #ADB4D8',

                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        $('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        $('#GrafDespReg').empty();
                                                                        MountGraficoDespesaTodasRegionaisPorPacote(this.category),
                                                                        MountGrafDespReg(this.category,null)
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Despesa Real',
                                                            data: x2,
                                                            //data: [4,3,2,1],
                                                            yAxis: 1,
                                                            color: '#aef2ae',


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        $('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        $('#GrafDespReg').empty();
                                                                        MountGraficoDespesaTodasRegionaisPorPacote(this.category),
                                                                        MountGrafDespReg(this.category, null)
                                                                    }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Desvio %',
                                                            data: mediaDesvio,
                                                            //data: [-17.12454, -8.78, -2.46, -3.87],
                                                            yAxis: 0,
                                                            visible: false,
                                                            color: '#f7f580',
                                                            dataLabels: {
                                                                enabled: true,
                                                                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                formatter: function () {
                                                                    return this.y + '%';
                                                                }
                                                            },


                                                            point: {
                                                                events: {
                                                                    click: function () {
                                                                        $('#GraficoDespesaTodasRegionaisPorPacote').empty();
                                                                        $('#GrafDespReg').empty();
                                                                        MountGraficoDespesaTodasRegionaisPorPacote(),
                                                                        MountGrafDespReg(this.category,null)
                                                                    }
                                                                }
                                                            }
                                                        }


                                                        ],

                                                        responsive: {
                                                            rules: [{
                                                                condition: {
                                                                    maxWidth: 500
                                                                },
                                                                chartOptions: {
                                                                    legend: {
                                                                        align: 'center',
                                                                        verticalAlign: 'bottom',
                                                                        layout: 'horizontal'
                                                                    },
                                                                    yAxis: {
                                                                        labels: {
                                                                            align: 'left',
                                                                            x: 0,
                                                                            y: -5
                                                                        },
                                                                        title: {
                                                                            text: null
                                                                        }
                                                                    },
                                                                    subtitle: {
                                                                        text: null
                                                                    },
                                                                    credits: {
                                                                        enabled: false
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    });
                                                });
                                            }

                                            //ajax - monta GRÁFICO DE DESPESA POR REGIONAL
                                            function MountGrafDespReg(regional, pacote) {
                                                $.post('../api/Manutencao/getSelectGrafDespReg/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(regional.replace(/[/]/g, '|')) +  '/' + escape(pacote.replace(/[/]/g, '|')) + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.Regional);
                                                    });

                                                    var xOrçada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrçada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrçada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrçada[i]) / xOrçada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrçada[i]
                                                        desvio2 += xRealizada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrçada.length; i++) {
                                                        if (xOrçada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    GrafDespReg(titleLine, xOrçada, xRealizada, mediaDesvio, media, regional, pacote);

                                                    $btn.button('reset');

                                                });
                                            }

                                            //ajax - monta GRÁFICO DE DESPESA POR REGIONAL GRUPO
                                            function MountGrafDespRegGrup(regional,pacote) {

                                                var obj = {

                                                    'dataIni': enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2),
                                                    'dataFim': enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2),
                                                    'meses': getManutencaoMes(),
                                                    'anos': getManutencaoAno(),
                                                    'regFiltro': getManutencaoRegional(),
                                                    'regional': regional,
                                                    'pacote': pacote
                                                };

                                                $.post(urlDespRegGrup, obj, function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.Regional);
                                                    });

                                                    var xOrçada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrçada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var mediaDesvio = [];
                                                    var desvio = 0
                                                    var desvio1 = 0
                                                    var desvio2 = 0

                                                    for (i = 0; i < xOrçada.length; i++) {
                                                        mediaDesvio[i] = Math.round(((xRealizada[i] - xOrçada[i]) / xOrçada[i] * 100)); // (real - orcado) / orçado * 100
                                                        desvio1 += xOrçada[i]
                                                        desvio2 += xRealizada[i]
                                                        //mediaDesvio[i] = mediaDesvio[i]
                                                    }
                                                    var media = (desvio2 / desvio1 - 1) * 100;

                                                    for (i = 0; i < xOrçada.length; i++) {
                                                        if (xOrçada[i] < xRealizada[i]) {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#ff7575' };  //fica vermelho que a despesa for maior que o orçado

                                                        } else {
                                                            xRealizada[i] = { y: xRealizada[i], color: '#aef2ae' }; //fica verde que a despesa for menor que o orçado
                                                        }
                                                    }

                                                    GrafDespReg(titleLine, xOrçada, xRealizada, mediaDesvio, media, regional);

                                                    $btn.button('reset');

                                                });
                                            }

                                            //locação e exibição do GRÁFICO DE DESPESA POR REGIONAL
                                            function GrafDespReg(name, xOrçada, xRealizada, mediaDesvio, media, regional, pacote) {
                                                $(function () {

                                                    var titPacote = "";
                                                    if (pacote != null) {
                                                        titPacote = " - " + pacote;
                                                    }

                                                    (function (H) {
                                                        var Axis = H.Axis,
                                                            inArray = H.inArray,
                                                            wrap = H.wrap;

                                                        wrap(Axis.prototype, 'adjustTickAmount', function (proceed) {
                                                            var chart = this.chart,
                                                                primaryAxis = chart[this.coll][0],
                                                                primaryThreshold,
                                                                primaryIndex,
                                                                index,
                                                                newTickPos,
                                                                threshold;

                                                            // Find the index and return boolean result
                                                            function isAligned(axis) {
                                                                index = inArray(threshold, axis.tickPositions); // used in while-loop
                                                                return axis.tickPositions.length === axis.tickAmount && index === primaryIndex;
                                                            }

                                                            if (chart.options.chart.alignThresholds && this !== primaryAxis) {
                                                                primaryThreshold = (primaryAxis.series[0] && primaryAxis.series[0].options.threshold) || 0;
                                                                threshold = (this.series[0] && this.series[0].options.threshold) || 0;

                                                                primaryIndex = primaryAxis.tickPositions && inArray(primaryThreshold, primaryAxis.tickPositions);

                                                                if (this.tickPositions && this.tickPositions.length &&
                                                                        primaryIndex > 0 &&
                                                                        primaryIndex < primaryAxis.tickPositions.length - 1 &&
                                                                        this.tickAmount) {

                                                                    // Add tick positions to the top or bottom in order to align the threshold
                                                                    // to the primary axis threshold
                                                                    while (!isAligned(this)) {

                                                                        if (index < primaryIndex) {
                                                                            newTickPos = this.tickPositions[0] - this.tickInterval;
                                                                            this.tickPositions.unshift(newTickPos);
                                                                            this.min = newTickPos;
                                                                        } else {
                                                                            newTickPos = this.tickPositions[this.tickPositions.length - 1] + this.tickInterval;
                                                                            this.tickPositions.push(newTickPos);
                                                                            this.max = newTickPos;
                                                                        }
                                                                        proceed.call(this);
                                                                    }
                                                                }

                                                            } else {
                                                                proceed.call(this);
                                                            }
                                                        });
                                                    }(Highcharts));

                                                    Highcharts.chart('GrafDespReg', {

                                                        credits: {
                                                            enabled: false
                                                        },

                                                        chart: {
                                                            height: 200,
                                                            zoomType: 'x, y',
                                                            alignThresholds: true,
                                                            type: 'column'
                                                        },

                                                        title: {
                                                            text: 'Despesas por Unidade - ' + regional + titPacote,
                                                            style: {
                                                                fontSize: 'small'
                                                            }
                                                        },

                                                        legend: {
                                                            layout: 'vertical',
                                                            align: 'right',
                                                            verticalAlign: 'center',
                                                            borderWidth: 0,
                                                            floating: true,
                                                            backgroundColor: 'rgba(238, 238, 238,0.5)',
                                                            style: {
                                                                fontSize: 'x-small'
                                                            }
                                                        },

                                                        xAxis: {
                                                            categories: name
                                                        },

                                                        yAxis: [{
                                                            allowDecimals: false,
                                                            title: {
                                                                text: 'Desvio %'
                                                            },
                                                            gridLineWidth: 0,
                                                            opposite: true

                                                        }, {
                                                            allowDecimals: false,
                                                            gridLineWidth: 0,
                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },

                                                        }],

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}',
                                                                    style: {
                                                                        fontWeight: ' normal '
                                                                    }
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            name: 'Despesa Orçada',
                                                            data: xOrçada,
                                                            //data: [1,2,3,4],
                                                            yAxis: 1,
                                                            color: ' #ADB4D8',

                                                            point: {
                                                                events: {
                                                                    click: function () { clickTabela(2, this.category) }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Despesa Real',
                                                            data: xRealizada,
                                                            //data: [4,3,2,1],
                                                            yAxis: 1,
                                                            color: '#aef2ae',


                                                            point: {
                                                                events: {
                                                                    click: function () { clickTabela(2, this.category) }
                                                                }
                                                            }
                                                        }, {
                                                            name: 'Desvio %',
                                                            data: mediaDesvio,
                                                            //data: [-17.12454, -8.78, -2.46, -3.87],
                                                            yAxis: 0,
                                                            visible: false,
                                                            color: '#f7f580',
                                                            dataLabels: {
                                                                enabled: true,
                                                                color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                formatter: function () {
                                                                    return this.y + '%';
                                                                }
                                                            },


                                                            point: {
                                                                events: {
                                                                    click: function () { clickTabela(2, this.category) }
                                                                }
                                                            }
                                                        }


                                                        ],

                                                        responsive: {
                                                            rules: [{
                                                                condition: {
                                                                    maxWidth: 500
                                                                },
                                                                chartOptions: {
                                                                    legend: {
                                                                        align: 'center',
                                                                        verticalAlign: 'bottom',
                                                                        layout: 'horizontal'
                                                                    },
                                                                    yAxis: {
                                                                        labels: {
                                                                            align: 'left',
                                                                            x: 0,
                                                                            y: -5
                                                                        },
                                                                        title: {
                                                                            text: null
                                                                        }
                                                                    },
                                                                    subtitle: {
                                                                        text: null
                                                                    },
                                                                    credits: {
                                                                        enabled: false
                                                                    }
                                                                }
                                                            }]
                                                        }
                                                    });
                                                });


                                            }

                                            //locação primeira matriz (loca e exibe primeira tabela)
                                            function firstTable(name) {

                                                $('#firstTable .table').remove('table');
                                                $('#TabelaDespesaTodasRegionais').show();
                                                $('#TabelaDespesaTodasRegionais').empty();
                                                $('#TabelaDespesaTodasRegionais').html('Carregando...');
                                                $("#TabelaDespesaTodasRegionais").animate({
                                                    opacity: 0.4,
                                                }, 1500);
                                                var tabela1;
                                                $.post('../api/Manutencao/getTabela1/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + getManutencaoRegional() + '/', function (lista) {


                                                    // titleColumn1 - Mostrar na primeira coluna a primeira linha em branco e a segunda com nome fixo PACOTE
                                                    var titleColumn1 = [];
                                                    titleColumn1[0] = ['&nbsp;', 1];
                                                    titleColumn1[1] = ['Pacotes', 1];

                                                    //titleColumnsBody - [0] Indica as regionais obtidas, [1] Indica os subtítulos dos resultados
                                                    var titleColumns = [];
                                                    lista[0].ListaRegionais.forEach(function (nameReg) {
                                                        listRegional = [];
                                                        listRegional.push(nameReg.Regional);
                                                        listRegional.push(4);
                                                        titleColumns.push(listRegional);
                                                    });
                                                    var subTitle = [];
                                                    var subTitle1 = ['Orçada', 1];
                                                    var subTitle2 = ['Real', 1];
                                                    var subTitle3 = ['Desvio %', 1];
                                                    var subTitle4 = ['Desvio $', 1];
                                                    //Insere 4 colunas (citadas acima) por regional + 1 do total
                                                    for (i = 0; i <= lista[0].ListaRegionais.length; i++) {
                                                        subTitle.push(subTitle1);
                                                        subTitle.push(subTitle2);
                                                        subTitle.push(subTitle3);
                                                        subTitle.push(subTitle4);
                                                    }
                                                    var titleColumnsBody = [];
                                                    titleColumnsBody[0] = titleColumns;
                                                    titleColumnsBody[1] = subTitle;

                                                    // column1 - é inserido nessa variável o nome dos pacotes que ficam na primeira coluna
                                                    var column1 = [];
                                                    lista.forEach(function (pacotes) {
                                                        column1.push(pacotes.Name);
                                                    });

                                                    // dataColumn
                                                    var name;
                                                    var dataColumn = [];

                                                    /***INI MAPA DE CALOR***/
                                                    var valorMapaDeCalor = [];
                                                    var orderMapaDeCalor = [];
                                                    var i = 0;
                                                    /***FIM MAPA DE CALOR***/

                                                    lista.forEach(function (entry) {
                                                        var line = [];
                                                        i = 0;

                                                        name = entry.Name;

                                                        /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                        entry.ListaRegionais.forEach(function (valor) {
                                                            //atribui valores de porcentagem nas variáveis
                                                            valorMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                            orderMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                            i++;

                                                        });

                                                        //a partir da ordenação, atribui os valores mínimos e máximos do array e seu tamanho
                                                        orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });
                                                        var minVal = orderMapaDeCalor[0];
                                                        var tamanhoArray = orderMapaDeCalor.length;
                                                        var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                        //preparando valores para a cor
                                                        var corPercent = [];
                                                        var i = 0;

                                                        orderMapaDeCalor.forEach(function (valor) {
                                                            corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                            i++;
                                                        });
                                                        var arrayCor = [];
                                                        var local = 0;
                                                        for (var i = 0; i < valorMapaDeCalor.length; i++) {

                                                            local = 0;

                                                            for (var j = 0; j < orderMapaDeCalor.length; j++) {

                                                                if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                    local = j;
                                                                }

                                                            }

                                                            arrayCor[i] = corPercent[local];

                                                        }

                                                        /****** FIM GERAÇÃO DO MAPA DE CALOR *********/

                                                        for (i = 0; i < entry.ListaRegionais.length; i++) {
                                                            var orcada = [];
                                                            var real = [];
                                                            var desvioP = [];
                                                            var desvioR = [];
                                                            orcada.push(entry.ListaRegionais[i].Orçada);
                                                            orcada.push(name);
                                                            orcada.push(entry.ListaRegionais[i].Regional);
                                                            orcada.push(0);
                                                            orcada.push(0);
                                                            real.push(entry.ListaRegionais[i].Realizada);
                                                            real.push(name);
                                                            real.push(entry.ListaRegionais[i].Regional);
                                                            real.push(0);
                                                            real.push(corPercent[i]);
                                                            desvioP.push(entry.ListaRegionais[i].DesvioPorc);
                                                            desvioP.push(name);
                                                            desvioP.push(entry.ListaRegionais[i].Regional);
                                                            desvioP.push('%');
                                                            desvioP.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                            desvioR.push(entry.ListaRegionais[i].DesvioReal);
                                                            desvioR.push(name);
                                                            desvioR.push(entry.ListaRegionais[i].Regional);
                                                            desvioR.push('$');
                                                            desvioR.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                            line.push(orcada);
                                                            line.push(real);
                                                            line.push(desvioP);
                                                            line.push(desvioR);
                                                        }
                                                        //});
                                                        dataColumn.push(line);
                                                    });

                                                    // Trabalha os resultados dos totais
                                                    // columnsTotal
                                                    var columnsTotal = [];

                                                    /***INI MAPA DE CALOR***/
                                                    valorMapaDeCalor = [];
                                                    orderMapaDeCalor = [];
                                                    i = 0;
                                                    /***FIM MAPA DE CALOR***/

                                                    /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                    lista.forEach(function (valor) {
                                                        valorMapaDeCalor[i] = valor.total == null ? 0 : parseFloat(-1 * valor.total.DesvioReal);
                                                        orderMapaDeCalor[i] = valor.total == null ? 0 : parseFloat(-1 * valor.total.DesvioReal);
                                                        i++;

                                                    });

                                                    orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });

                                                    var minVal = orderMapaDeCalor[0];
                                                    var tamanhoArray = orderMapaDeCalor.length;
                                                    var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                    var corPercent = [];

                                                    var i = 0;
                                                    orderMapaDeCalor.forEach(function (valor) {
                                                        corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                        i++;
                                                    });

                                                    var arrayCor = [];
                                                    var local = 0;

                                                    for (var i = 0; i < valorMapaDeCalor.length; i++) {
                                                        local = 0;

                                                        for (var j = 0; j < orderMapaDeCalor.length; j++) {
                                                            if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                local = j;
                                                            }
                                                        }
                                                        arrayCor[i] = corPercent[local];
                                                    }

                                                    var i = 0
                                                    lista.forEach(function (entry) {
                                                        var dataColumn = [];
                                                        var orcada = [];
                                                        var real = [];
                                                        var desvioP = [];
                                                        var desvioR = [];
                                                        orcada.push(entry.total == null ? 0 : entry.total.Orçada);
                                                        orcada.push(0);
                                                        orcada.push(0);
                                                        orcada.push(0);
                                                        orcada.push(0);
                                                        real.push(entry.total == null ? 0 : entry.total.Realizada);
                                                        real.push(0);
                                                        real.push(0);
                                                        real.push(0);
                                                        real.push(0);
                                                        desvioP.push(entry.total == null ? 0 : entry.total.DesvioPorc);
                                                        desvioP.push(0);
                                                        desvioP.push(0);
                                                        desvioP.push('%');
                                                        desvioP.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                        desvioR.push(entry.total == null ? 0 : entry.total.DesvioReal);
                                                        desvioR.push(0);
                                                        desvioR.push(0);
                                                        desvioR.push('$');
                                                        desvioR.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                        dataColumn.push(orcada);
                                                        dataColumn.push(real);
                                                        dataColumn.push(desvioP);
                                                        dataColumn.push(desvioR);
                                                        columnsTotal.push(dataColumn);
                                                        i++;
                                                    });

                                                    i = 0;
                                                    // titleTotal
                                                    var titleTotal = [];
                                                    titleTotal[0] = [['Total', 4]];
                                                    titleTotal[1] = [['Orçada', 1], ['Real', 1], ['Desvio %', 1], ['Desvio $', 1]];

                                                    // footerColumn1
                                                    var footerColumn1 = [];
                                                    footerColumn1[0] = ['Total', 1];


                                                    ////resultado dos totais
                                                    var footerTotal = [];
                                                    var lineO = [];
                                                    var lineR = [];
                                                    var lineDP = [];
                                                    var lineDR = [];
                                                    var orcada = 0;
                                                    var real = 0;
                                                    var desvioP = 0;
                                                    var desvioR = 0;
                                                    var dados = [];

                                                    lista.forEach(function (entry) {
                                                        orcada += entry.total == null ? 0 : entry.total.Orçada;
                                                        real += entry.total == null ? 0 : entry.total.Realizada;
                                                        desvioP += entry.total == null ? 0 : entry.total.DesvioPorc;
                                                        desvioR += entry.total == null ? 0 : entry.total.DesvioReal;
                                                    });
                                                    lineO.push(orcada);
                                                    lineO.push(0);
                                                    lineO.push(0);
                                                    lineO.push(0);

                                                    lineR.push(real);
                                                    lineR.push(0);
                                                    lineR.push(0);
                                                    lineR.push(0);

                                                    //desvioP
                                                    lineDP.push(Math.round(real / orcada * 100) - 100);
                                                    lineDP.push(0);
                                                    lineDP.push(0);
                                                    lineDP.push('%');

                                                    lineDR.push(desvioR);
                                                    lineDR.push(0);
                                                    lineDR.push(0);
                                                    lineDR.push('$');

                                                    dados.push(lineO);
                                                    dados.push(lineR);
                                                    dados.push(lineDP);
                                                    dados.push(lineDR);
                                                    footerTotal.push(dados);

                                                    var footerColumnsBody = [];
                                                    var line = [];

                                                    /***INI MAPA DE CALOR***/
                                                    valorMapaDeCalor = [];
                                                    orderMapaDeCalor = [];
                                                    i = 0;
                                                    /***FIM MAPA DE CALOR***/


                                                    /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                    lista[0].totalColunaReg.forEach(function (valor) {
                                                        valorMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                        orderMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                        i++;
                                                    });

                                                    orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });

                                                    var minVal = orderMapaDeCalor[0];
                                                    var tamanhoArray = orderMapaDeCalor.length;
                                                    var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                    var corPercent = [];

                                                    i = 0;
                                                    orderMapaDeCalor.forEach(function (valor) {
                                                        corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                        i++;
                                                    });
                                                    var arrayCor = [];
                                                    var local = 0;

                                                    for (i = 0; i < valorMapaDeCalor.length; i++) {
                                                        local = 0;

                                                        for (j = 0; j < orderMapaDeCalor.length; j++) {
                                                            if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                local = j;
                                                            }
                                                        }
                                                        arrayCor[i] = corPercent[local];
                                                    }
                                                    /****** FIM GERAÇÃO DO MAPA DE CALOR *********/

                                                    for (i = 0; i < lista[0].totalColunaReg.length; i++) {
                                                        var orcada = [];
                                                        var real = [];
                                                        var desvioP = [];
                                                        var desvioR = [];
                                                        orcada.push(lista[0].totalColunaReg[i].Orçada);
                                                        orcada.push(0);
                                                        orcada.push(lista[0].totalColunaReg[i].Regional);
                                                        orcada.push(0);
                                                        orcada.push(0);
                                                        real.push(lista[0].totalColunaReg[i].Realizada);
                                                        real.push(0);
                                                        real.push(lista[0].totalColunaReg[i].Regional);
                                                        real.push(0);
                                                        real.push(0);
                                                        desvioP.push(lista[0].totalColunaReg[i].DesvioPorc);
                                                        desvioP.push(0);
                                                        desvioP.push(lista[0].totalColunaReg[i].Regional);
                                                        desvioP.push('%');
                                                        desvioP.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                        desvioR.push(lista[0].totalColunaReg[i].DesvioReal);
                                                        desvioR.push(0);
                                                        desvioR.push(lista[0].totalColunaReg[i].Regional);
                                                        desvioR.push('$');
                                                        desvioR.push(buscaCor(arrayCor[i]));/****** GERAÇÃO DO MAPA DE CALOR *********/
                                                        line.push(orcada);
                                                        line.push(real);
                                                        line.push(desvioP);
                                                        line.push(desvioR);
                                                    }
                                                    footerColumnsBody[0] = line;

                                                    montaTabela('1', '#TabelaDespesaTodasRegionais', '125px', titleColumn1, titleColumnsBody, column1, dataColumn, footerColumn1, footerColumnsBody, footerTotal, titleTotal, columnsTotal);
                                                });
                                            }

                                            //quando clicar nas tabelas
                                            function clickTabela(id, obj) {
                                                //quando clicar na primeira tabela será montado e exibida a segunda tabela
                                                if (id == 1) {

                                                    $('#secoundTableTeste').empty();
                                                    $('#GrafImpacFatTecDesv').empty();
                                                    $('#RegionalChart').empty();
                                                    $('#UnitChart').empty();
                                                    $('#GrafPacotePorRegional').empty();
                                                    $('#EvolutivoOrcamentoGeralChart').empty();
                                                    $('#EvolutivoDaContaPorUnidade').empty();
                                                    $('#DadosTecnicosContaChart').empty();
                                                    $('#secoundTableTeste .table').remove('table');
                                                    $('#secoundTableTeste').show();
                                                    $('#secoundTableTeste').empty();
                                                    $('#secoundTableTeste').html('Carregando...');
                                                    $("#secoundTableTeste").animate({
                                                        opacity: 0.4,
                                                    }, 1500);

                                                    var pacote = obj.getAttribute("x");
                                                    var regional = obj.getAttribute("y");

                                                    regionalSelecionada = regional;
                                                    var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? "null" : $('#cbxlistaRegionais select').val();

                                                    $.post('../api/Manutencao/getTabela2/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(pacote.replace(/[/]/g, '|')) + '/' + escape(regional.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {
                                                        // titleColumn1 - Mostrar na primeira coluna a primeira linha em branco e a segunda com nome fixo PACOTE
                                                        var titleColumn1 = [];
                                                        titleColumn1[0] = ['&nbsp;', 1];
                                                        titleColumn1[1] = ['Pacotes', 1];

                                                        //titleColumnsBody - [0] Indica as regionais obtidas, [1] Indica os subtítulos dos resultados
                                                        var titleColumns = [];
                                                        lista[0].ListaRegionais.forEach(function (nameReg) {
                                                            listRegional = [];
                                                            listRegional.push(nameReg.Regional);
                                                            listRegional.push(4);
                                                            titleColumns.push(listRegional);
                                                        });
                                                        var subTitle = [];
                                                        var subTitle1 = ['Orçada', 1];
                                                        var subTitle2 = ['Real', 1];
                                                        var subTitle3 = ['Desvio %', 1];
                                                        var subTitle4 = ['Desvio $', 1];
                                                        //Insere 4 colunas (citadas acima) por regional + 1 do total
                                                        for (i = 0; i <= lista[0].ListaRegionais.length; i++) {
                                                            subTitle.push(subTitle1);
                                                            subTitle.push(subTitle2);
                                                            subTitle.push(subTitle3);
                                                            subTitle.push(subTitle4);
                                                        }
                                                        var titleColumnsBody = [];
                                                        titleColumnsBody[0] = titleColumns;
                                                        titleColumnsBody[1] = subTitle;

                                                        // column1 - é inserido nessa variável o nome dos pacotes que ficam na primeira coluna
                                                        var column1 = [];
                                                        lista.forEach(function (pacotes) {
                                                            column1.push(pacotes.Name);
                                                        });

                                                        // dataColumn
                                                        var name;
                                                        var dataColumn = [];

                                                        /***INI MAPA DE CALOR***/
                                                        var valorMapaDeCalor = [];
                                                        var orderMapaDeCalor = [];
                                                        var i = 0;
                                                        /***FIM MAPA DE CALOR***/

                                                        lista.forEach(function (entry) {
                                                            var line = [];
                                                            i = 0;

                                                            name = entry.Name;

                                                            /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                            entry.ListaRegionais.forEach(function (valor) {
                                                                //atribui valores de porcentagem nas variáveis
                                                                valorMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                                orderMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                                i++;

                                                            });

                                                            //a partir da ordenação, atribui os valores mínimos e máximos do array e seu tamanho
                                                            orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });
                                                            var minVal = orderMapaDeCalor[0];
                                                            var tamanhoArray = orderMapaDeCalor.length;
                                                            var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                            //preparando valores para a cor
                                                            var corPercent = [];
                                                            var i = 0;

                                                            orderMapaDeCalor.forEach(function (valor) {
                                                                corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                                i++;
                                                            });
                                                            var arrayCor = [];
                                                            var local = 0;
                                                            for (var i = 0; i < valorMapaDeCalor.length; i++) {

                                                                local = 0;

                                                                for (var j = 0; j < orderMapaDeCalor.length; j++) {

                                                                    if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                        local = j;
                                                                    }

                                                                }

                                                                arrayCor[i] = corPercent[local];

                                                            }

                                                            /****** FIM GERAÇÃO DO MAPA DE CALOR *********/

                                                            for (i = 0; i < entry.ListaRegionais.length; i++) {
                                                                var orcada = [];
                                                                var real = [];
                                                                var desvioP = [];
                                                                var desvioR = [];
                                                                orcada.push(entry.ListaRegionais[i].Orçada);
                                                                orcada.push(name);
                                                                orcada.push(entry.ListaRegionais[i].Regional);
                                                                orcada.push(0);
                                                                orcada.push(0);
                                                                real.push(entry.ListaRegionais[i].Realizada);
                                                                real.push(name);
                                                                real.push(entry.ListaRegionais[i].Regional);
                                                                real.push(0);
                                                                real.push(corPercent[i]);
                                                                desvioP.push(entry.ListaRegionais[i].DesvioPorc);
                                                                desvioP.push(name);
                                                                desvioP.push(entry.ListaRegionais[i].Regional);
                                                                desvioP.push('%');
                                                                desvioP.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                                desvioR.push(entry.ListaRegionais[i].DesvioReal);
                                                                desvioR.push(name);
                                                                desvioR.push(entry.ListaRegionais[i].Regional);
                                                                desvioR.push('$');
                                                                desvioR.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                                line.push(orcada);
                                                                line.push(real);
                                                                line.push(desvioP);
                                                                line.push(desvioR);
                                                            }
                                                            //});
                                                            dataColumn.push(line);
                                                        });

                                                        // Trabalha os resultados dos totais
                                                        // columnsTotal
                                                        var columnsTotal = [];

                                                        /***INI MAPA DE CALOR***/
                                                        valorMapaDeCalor = [];
                                                        orderMapaDeCalor = [];
                                                        i = 0;
                                                        /***FIM MAPA DE CALOR***/

                                                        /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                        lista.forEach(function (valor) {
                                                            valorMapaDeCalor[i] = valor.total == null ? 0 : parseFloat(-1 * valor.total.DesvioReal);
                                                            orderMapaDeCalor[i] = valor.total == null ? 0 : parseFloat(-1 * valor.total.DesvioReal);
                                                            i++;

                                                        });

                                                        orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });

                                                        var minVal = orderMapaDeCalor[0];
                                                        var tamanhoArray = orderMapaDeCalor.length;
                                                        var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                        var corPercent = [];

                                                        var i = 0;
                                                        orderMapaDeCalor.forEach(function (valor) {
                                                            corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                            i++;
                                                        });

                                                        var arrayCor = [];
                                                        var local = 0;

                                                        for (var i = 0; i < valorMapaDeCalor.length; i++) {
                                                            local = 0;

                                                            for (var j = 0; j < orderMapaDeCalor.length; j++) {
                                                                if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                    local = j;
                                                                }
                                                            }
                                                            arrayCor[i] = corPercent[local];
                                                        }

                                                        var i = 0

                                                        lista.forEach(function (entry) {
                                                            var x = [];
                                                            var orcada = [];
                                                            var real = [];
                                                            var desvioP = [];
                                                            var desvioR = [];
                                                            orcada.push(entry.total == null ? 0 : entry.total.Orçada);
                                                            orcada.push(0);
                                                            orcada.push(0);
                                                            orcada.push(0);
                                                            orcada.push(0);
                                                            real.push(entry.total == null ? 0 : entry.total.Realizada);
                                                            real.push(0);
                                                            real.push(0);
                                                            real.push(0);
                                                            real.push(0);
                                                            desvioP.push(entry.total == null ? 0 : entry.total.DesvioPorc);
                                                            desvioP.push(0);
                                                            desvioP.push(0);
                                                            desvioP.push('%');
                                                            desvioP.push(buscaCor(arrayCor[i])); /* GERAÇÃO DO MAPA DE CALOR ***/
                                                            desvioR.push(entry.total == null ? 0 : entry.total.DesvioReal);
                                                            desvioR.push(0);
                                                            desvioR.push(0);
                                                            desvioR.push('$');
                                                            desvioR.push(buscaCor(arrayCor[i])); /* GERAÇÃO DO MAPA DE CALOR ***/
                                                            x.push(orcada);
                                                            x.push(real);
                                                            x.push(desvioP);
                                                            x.push(desvioR);
                                                            columnsTotal.push(x);
                                                            i++;

                                                        });


                                                        i = 0;
                                                        // titleTotal
                                                        var titleTotal = [];
                                                        titleTotal[0] = [['Total', 4]];
                                                        titleTotal[1] = [['Orçada', 1], ['Real', 1], ['Desvio %', 1], ['Desvio $', 1]];

                                                        // footerColumn1
                                                        var footerColumn1 = [];
                                                        footerColumn1[0] = ['Total', 1];


                                                        ////resultado dos totais
                                                        var footerTotal = [];
                                                        var lineO = [];
                                                        var lineR = [];
                                                        var lineDP = [];
                                                        var lineDR = [];
                                                        var orcada = 0;
                                                        var real = 0;
                                                        var desvioP = 0;
                                                        var desvioR = 0;
                                                        var dados = [];

                                                        lista.forEach(function (entry) {
                                                            orcada += entry.total == null ? 0 : entry.total.Orçada;
                                                            real += entry.total == null ? 0 : entry.total.Realizada;
                                                            desvioP += entry.total == null ? 0 : entry.total.DesvioPorc;
                                                            desvioR += entry.total == null ? 0 : entry.total.DesvioReal;
                                                        });
                                                        lineO.push(orcada);
                                                        lineO.push(0);
                                                        lineO.push(0);
                                                        lineO.push(0);

                                                        lineR.push(real);
                                                        lineR.push(0);
                                                        lineR.push(0);
                                                        lineR.push(0);

                                                        //desvioP
                                                        lineDP.push(Math.round(real / orcada * 100) - 100);
                                                        lineDP.push(0);
                                                        lineDP.push(0);
                                                        lineDP.push('%');

                                                        lineDR.push(desvioR);
                                                        lineDR.push(0);
                                                        lineDR.push(0);
                                                        lineDR.push('$');

                                                        dados.push(lineO);
                                                        dados.push(lineR);
                                                        dados.push(lineDP);
                                                        dados.push(lineDR);
                                                        footerTotal.push(dados);

                                                        var footerColumnsBody = [];
                                                        var line = [];

                                                        /***INI MAPA DE CALOR***/
                                                        valorMapaDeCalor = [];
                                                        orderMapaDeCalor = [];
                                                        i = 0;
                                                        /***FIM MAPA DE CALOR***/


                                                        /****** INI GERAÇÃO DO MAPA DE CALOR *********/
                                                        lista[0].totalColunaReg.forEach(function (valor) {
                                                            valorMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                            orderMapaDeCalor[i] = valor == null ? 0 : parseFloat(-1 * valor.DesvioReal);
                                                            i++;
                                                        });

                                                        orderMapaDeCalor = orderMapaDeCalor.sort(function (a, b) { return a - b; });

                                                        var minVal = orderMapaDeCalor[0];
                                                        var tamanhoArray = orderMapaDeCalor.length;
                                                        var maxVal = orderMapaDeCalor[tamanhoArray - 1];

                                                        var corPercent = [];

                                                        i = 0;
                                                        orderMapaDeCalor.forEach(function (valor) {
                                                            corPercent[i] = ((valor - minVal) / (maxVal - minVal));
                                                            i++;
                                                        });
                                                        var arrayCor = [];
                                                        var local = 0;

                                                        for (i = 0; i < valorMapaDeCalor.length; i++) {
                                                            local = 0;

                                                            for (j = 0; j < orderMapaDeCalor.length; j++) {
                                                                if (valorMapaDeCalor[i] == orderMapaDeCalor[j]) {
                                                                    local = j;
                                                                }
                                                            }
                                                            arrayCor[i] = corPercent[local];
                                                        }
                                                        /****** FIM GERAÇÃO DO MAPA DE CALOR *********/

                                                        for (i = 0; i < lista[0].totalColunaReg.length; i++) {
                                                            var orcada = [];
                                                            var real = [];
                                                            var desvioP = [];
                                                            var desvioR = [];
                                                            orcada.push(lista[0].totalColunaReg[i].Orçada);
                                                            orcada.push(0);
                                                            orcada.push(lista[0].totalColunaReg[i].Regional);
                                                            orcada.push(0);
                                                            orcada.push(0);
                                                            real.push(lista[0].totalColunaReg[i].Realizada);
                                                            real.push(0);
                                                            real.push(lista[0].totalColunaReg[i].Regional);
                                                            real.push(0);
                                                            real.push(0);
                                                            desvioP.push(lista[0].totalColunaReg[i].DesvioPorc);
                                                            desvioP.push(0);
                                                            desvioP.push(lista[0].totalColunaReg[i].Regional);
                                                            desvioP.push('%');
                                                            desvioP.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                            desvioR.push(lista[0].totalColunaReg[i].DesvioReal);
                                                            desvioR.push(0);
                                                            desvioR.push(lista[0].totalColunaReg[i].Regional);
                                                            desvioR.push('$');
                                                            desvioR.push(buscaCor(arrayCor[i])); /****** GERAÇÃO DO MAPA DE CALOR *********/
                                                            line.push(orcada);
                                                            line.push(real);
                                                            line.push(desvioP);
                                                            line.push(desvioR);
                                                        }
                                                        footerColumnsBody[0] = line;

                                                        GrafPacotePorRegional(titleColumnsBody, footerColumnsBody, pacote, regional);

                                                        montaTabela('2', '#secoundTableTeste', '170px', titleColumn1, titleColumnsBody, column1, dataColumn, footerColumn1, footerColumnsBody, footerTotal, titleTotal, columnsTotal);

                                                    });

                                                }
                                                    //quando clicar na tabela 2 será montado o gráfico ferramentas de manutenção
                                                else if (id == 2) {

                                                    $('#GrafImpacFatTecDesv').empty();
                                                    $('#RegionalChart').empty();
                                                    $('#UnitChart').empty();
                                                    $('#EvolutivoOrcamentoGeralChart').empty();
                                                    $('#EvolutivoDaContaPorUnidade').empty();
                                                    $('#DadosTecnicosContaChart').empty();

                                                    var conta = obj.getAttribute("x");
                                                    var unidade = obj.getAttribute("y");
                                                    var regional = regionalSelecionada;
                                                    var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? "null" : $('#cbxlistaRegionais select').val();
                                                    $.post('../api/Manutencao/getGraficoRegionalTecnico/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(regional.replace(/[/]/g, '|')) + '/' + escape(conta.replace(/[/]/g, ' | ')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                        var reg = regional

                                                        var titleLine = [];

                                                        lista.forEach(function (entry) {
                                                            titleLine.push(entry.EmpresaSigla);
                                                        });

                                                        var xDesvQtdeBoi = [];

                                                        lista.forEach(function (entry) {
                                                            xDesvQtdeBoi.push(Math.round(entry.DesvQtdeBoi * 100));
                                                        });

                                                        var xDesvQtdeConsumoUN = [];

                                                        lista.forEach(function (entry) {
                                                            xDesvQtdeConsumoUN.push(Math.round(entry.DesvQtdeConsumoUN * 100));
                                                        });

                                                        var xDesvPrecoUN = [];

                                                        lista.forEach(function (entry) {
                                                            xDesvPrecoUN.push(Math.round(entry.DesvPrecoUN * 100));
                                                        });

                                                        var xDesvUNBoi = [];

                                                        lista.forEach(function (entry) {
                                                            xDesvUNBoi.push(Math.round(entry.DesvUNBoi * 100));
                                                        });

                                                        GrafImpacFatTecDesv(titleLine, xDesvQtdeBoi, xDesvQtdeConsumoUN, xDesvPrecoUN, xDesvUNBoi, reg, conta);

                                                    })

                                                    MountEvolutivoOrcamentoGeralChart(unidade, conta);
                                                    MountDadosTecnicosContaChart(unidade, conta);
                                                }
                                            } MountEvolutivoOrcamentoGeralChart

                                            //locação e exibição do GRÁFICO PACOTE POR REGIONAL
                                            function GrafPacotePorRegional(titleColumnsBody, footerColumnsBody, pacote, subRegional) {

                                                var unidades = [];
                                                var real = [];
                                                var orcado = [];
                                                var desvio = [];
                                                var i = 0;

                                                for (i = 0; i < titleColumnsBody[0].length; i++) {
                                                    unidades.push(titleColumnsBody[0][i][0]);
                                                }

                                                i = 0;

                                                do {

                                                    orcado.push(Math.ceil(footerColumnsBody[0][i][0] / 1000))
                                                    real.push(Math.ceil(footerColumnsBody[0][i + 1][0] / 1000))
                                                    desvio.push(Math.ceil(footerColumnsBody[0][i + 3][0] / 1000))

                                                    i = i + 4;
                                                }
                                                while (i < footerColumnsBody[0].length);



                                                for (i = 0; i < orcado.length; i++) {
                                                    if (orcado[i] < real[i]) {
                                                        real[i] = { y: real[i], color: '#ff7575' }; //fica vermelho que a despesa for maior que o orçado
                                                    }
                                                }

                                                Highcharts.chart('GrafPacotePorRegional', {

                                                    credits: {
                                                        enabled: false
                                                    },

                                                    chart: {
                                                        height: 200,
                                                        zoomType: 'x, y',
                                                        alignThresholds: true,
                                                        type: 'column'
                                                    },

                                                    title: {
                                                        text: 'Despesas ' + pacote + ' em ' + subRegional,
                                                        style: {
                                                            fontSize: 'small'
                                                        }
                                                    },

                                                    legend: {
                                                        layout: 'vertical',
                                                        align: 'right',
                                                        verticalAlign: 'center',
                                                        borderWidth: 0,
                                                        floating: true,
                                                        backgroundColor: 'rgba(238, 238, 238,0.5)',
                                                        style: {
                                                            fontSize: 'x-small'
                                                        }
                                                    },

                                                    xAxis: {
                                                        categories: unidades
                                                    },

                                                    yAxis: [{
                                                        allowDecimals: false,
                                                        title: {
                                                            text: 'Desvio %'
                                                        },
                                                        gridLineWidth: 0,
                                                        opposite: true

                                                    }, {
                                                        allowDecimals: false,
                                                        gridLineWidth: 0,
                                                        title: {
                                                            text: 'R$ em milhares'
                                                        },

                                                    }],

                                                    plotOptions: {
                                                        series: {
                                                            borderWidth: 0,
                                                            dataLabels: {
                                                                enabled: true,
                                                                format: '{point.y:.,0f}',
                                                                style: {
                                                                    fontWeight: ' normal '
                                                                }
                                                            }
                                                        }
                                                    },

                                                    series: [{
                                                        name: 'Despesa Orçada',
                                                        data: orcado,
                                                        //data: [1,2,3,4],
                                                        yAxis: 1,
                                                        color: ' #ADB4D8',

                                                        //point: {
                                                        //    events: {
                                                        //        click: function () { clickTabela(2, this.category) }
                                                        //    }
                                                        //}
                                                    }, {
                                                        name: 'Despesa Real',
                                                        data: real,
                                                        yAxis: 1,
                                                        color: '#aef2ae',


                                                        //point: {
                                                        //    events: {
                                                        //        click: function () { clickTabela(2, this.category) }
                                                        //    }
                                                        //}
                                                    }, {
                                                        name: 'Desvio %',
                                                        data: desvio,
                                                        yAxis: 0,
                                                        visible: false,
                                                        color: '#f7f580',
                                                        dataLabels: {
                                                            enabled: true,
                                                            color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                            formatter: function () {
                                                                return this.y + '%';
                                                            }
                                                        },


                                                        //point: {
                                                        //    events: {
                                                        //        click: function () { clickTabela(2, this.category) }
                                                        //    }
                                                        //}
                                                    }


                                                    ],

                                                    responsive: {
                                                        rules: [{
                                                            condition: {
                                                                maxWidth: 500
                                                            },
                                                            chartOptions: {
                                                                legend: {
                                                                    align: 'center',
                                                                    verticalAlign: 'bottom',
                                                                    layout: 'horizontal'
                                                                },
                                                                yAxis: {
                                                                    labels: {
                                                                        align: 'left',
                                                                        x: 0,
                                                                        y: -5
                                                                    },
                                                                    title: {
                                                                        text: null
                                                                    }
                                                                },
                                                                subtitle: {
                                                                    text: null
                                                                },
                                                                credits: {
                                                                    enabled: false
                                                                }
                                                            }
                                                        }]
                                                    }
                                                });

                                            }

                                            //locação e exibição do gráfico de ferramentas de Manutenção
                                            function GrafImpacFatTecDesv(name, xDesvQtdeBoi, xDesvQtdeConsumoUN, xDesvPrecoUN, xDesvUNBoi, regional, conta) {

                                                if (conta == 'ENERGIA ELÉTRICA CONTRATADA') {
                                                    UnidadeMedida = 'KW';
                                                    UnidadeMedidaPorBoi = 'KW/BOI';
                                                    PrecoUnidadeMedida = 'Preço KW';

                                                } else if (conta == 'COMBUSTÍVEL PARA CALDEIRA') {

                                                    UnidadeMedida = 'MCAL';
                                                    UnidadeMedidaPorBoi = 'MCAL/BOI';
                                                    PrecoUnidadeMedida = 'Preço MCAL';

                                                } else if (conta == 'ÁGUA') {

                                                    UnidadeMedida = 'M³';
                                                    UnidadeMedidaPorBoi = 'M³/BOI';
                                                    PrecoUnidadeMedida = 'Preço M³';

                                                } else {

                                                    UnidadeMedida = 'UnidadeMedida';
                                                    UnidadeMedidaPorBoi = 'UnidadeMedidaPorBoi';
                                                    PrecoUnidadeMedida = 'PrecoUnidadeMedida';

                                                }

                                                var frase = "";

                                                if (xDesvQtdeBoi.length < 1) {
                                                    frase = "<p align=\"center\"><b>Não existem dados técnicos para a conta " + conta + "</b></p><br><br>";
                                                    $('#GrafImpacFatTecDesv').show();
                                                    $('#GrafImpacFatTecDesv').html(frase);
                                                } else {


                                                    $('#GrafImpacFatTecDesv').show();

                                                    $(function () {
                                                        Highcharts.chart('GrafImpacFatTecDesv', {
                                                            credits: {
                                                                enabled: false
                                                            },
                                                            chart: {
                                                                zoomType: 'x, y',
                                                                type: 'column',
                                                                backgroundColor: null
                                                            },
                                                            title: {
                                                                text: 'Impacto dos Fatores Técnicos de Desvio - ' + regional + ' Conta: ' + conta,
                                                            },
                                                            xAxis: {
                                                                categories: name
                                                            },
                                                            yAxis: {

                                                                title: {
                                                                    text: 'Desvio %'
                                                                },
                                                                stackLabels: {
                                                                    enabled: false,
                                                                    style: {
                                                                        fontWeight: 'bold',
                                                                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                    }
                                                                }
                                                            },
                                                            legend: {
                                                                align: 'center',

                                                                verticalAlign: 'bottom',
                                                                shadow: false
                                                            },
                                                            tooltip: {
                                                                headerFormat: '<b>{point.x}</b><br/>',
                                                                pointFormat: '{series.name}: {point.y}<br/>Destacar a fórmula de cálculo!'
                                                            },
                                                            plotOptions: {
                                                                column: {
                                                                    stacking: 'normal',
                                                                    dataLabels: {
                                                                        enabled: true,
                                                                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                        formatter: function () {
                                                                            return this.y + '%';
                                                                        },
                                                                        total: false,
                                                                    }
                                                                }
                                                            },
                                                            series: [{
                                                                name: UnidadeMedida,



                                                                data: xDesvQtdeConsumoUN,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountRegionalChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Δ% = Despesa Real / Despesa Orçada -1',
                                                                    valueSuffix: '%'
                                                                }


                                                            }, {
                                                                name: UnidadeMedidaPorBoi, //'KW/BOI',
                                                                data: xDesvUNBoi,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountRegionalChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> ' + UnidadeMedidaPorBoi + ' = Qtde de ' + UnidadeMedida + ' Consumidos / Qtde de Bois',
                                                                    valueSuffix: '%'
                                                                }
                                                            }, {
                                                                name: 'Bois/Proc',
                                                                data: xDesvQtdeBoi,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountRegionalChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Δ% = Qtde de Bois Real / Qtde de Bois Orçada -1',
                                                                    valueSuffix: '%'
                                                                }
                                                            }, {
                                                                name: PrecoUnidadeMedida, //'Preço KW',
                                                                data: xDesvPrecoUN,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountRegionalChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Preço do ' + UnidadeMedida + ' = Despesa de ' + UnidadeMedida + ' / Qtde de ' + UnidadeMedida + ' Consumidos',
                                                                    valueSuffix: '%'
                                                                }
                                                            }]
                                                        });
                                                    });

                                                }
                                            }

                                            //Tabela de INDICADORES TECNICOS POR UNIDADE
                                            function TabelaITPorUni() {

                                            }

                                            //chamada ajax unit gráfico
                                            function MountRegionalChart(u, conta) {
                                                var tipo = u.series.name;
                                                var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? "null" : $('#cbxlistaRegionais select').val();
                                                $.post('../api/Manutencao/getSelectGraficoFatoresTecnicoMateriaPrimaRegionalEConta/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(regionalSelecionada.replace(/[/]/g, '|')) + '/' + escape(conta.replace(/[/]/g, '|')) + '/' + escape(tipo.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.EmpresaSigla);
                                                    });

                                                    var xOrcado = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcado.push(entry.Orcado);
                                                    });

                                                    var xRealizado = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizado.push(entry.Realizado);
                                                    });

                                                    RegionalChart(titleLine, xOrcado, xRealizado, tipo);

                                                });

                                            }

                                            //locação unit gráfico
                                            function RegionalChart(name, xOrcado, xRealizado, tipo) {
                                                $('#RegionalChart').show();

                                                $(function () {
                                                    Highcharts.chart('RegionalChart', {
                                                        credits: {
                                                            enabled: false
                                                        },

                                                        title: {
                                                            text: 'Visão por Unidades de Medida - ' + tipo
                                                        },
                                                        chart: {
                                                            zoomType: 'x, y',
                                                            backgroundColor: null
                                                        },
                                                        xAxis: {
                                                            categories: name
                                                        },
                                                        yAxis: {

                                                            title: {
                                                                text: ''
                                                            },
                                                            subtitle: {
                                                                text: document.ontouchstart === undefined ?
                                                                        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
                                                            }
                                                            ,
                                                            stackLabels: {
                                                                enabled: true,
                                                                style: {
                                                                    fontWeight: 'bold',
                                                                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                }
                                                            }
                                                        },

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}'
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            type: 'column',
                                                            name: 'Orçada',
                                                            data: xOrcado,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Real',
                                                            data: xRealizado,


                                                        }]
                                                    });
                                                });
                                            }

                                            //chamada ajax terceiro gráfico
                                            function MountEvolutivoOrcamentoGeralChart(u, conta) {

                                                var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? "null" : $('#cbxlistaRegionais select').val();
                                                unidadeSelecionada = u;
                                                var unidade = u;
                                                $.post('../api/Manutencao/getSelectGraficoEvolutivoPorUnidade/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(unidade.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.MesAno);
                                                    });

                                                    var xOrçada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrçada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var xDesvioReal = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvioReal.push(entry.DesvioReal);
                                                    });

                                                    var desvioAcumulado = [];
                                                    var desvio = 0

                                                    for (i = 0; i < xDesvioReal.length; i++) {
                                                        desvio += xDesvioReal[i];
                                                        desvioAcumulado[i] = desvio
                                                    }

                                                    EvolutivoOrcamentoGeralChart(titleLine, xOrçada, xRealizada, xDesvioReal, desvioAcumulado, unidade);

                                                });

                                                $.post('../api/Manutencao/getSelectGraficoEvolutivoPorUnidadeEConta/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(unidade.replace(/[/]/g, '|')) + '/' + escape(conta.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.MesAno);
                                                    });

                                                    var xOrçada = [];

                                                    lista.forEach(function (entry) {
                                                        xOrçada.push(entry.Orçada);
                                                    });

                                                    var xRealizada = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizada.push(entry.Realizada);
                                                    });

                                                    var xDesvioReal = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvioReal.push(entry.DesvioReal);
                                                    });

                                                    var desvioAcumulado = [];
                                                    var desvio = 0

                                                    for (i = 0; i < xDesvioReal.length; i++) {
                                                        desvio += xDesvioReal[i];
                                                        desvioAcumulado[i] = desvio
                                                    }

                                                    EvolutivoDaContaPorUnidade(titleLine, xOrçada, xRealizada, xDesvioReal, desvioAcumulado, unidade, conta);

                                                });
                                            }

                                            //locação terceiro gráfico
                                            function EvolutivoOrcamentoGeralChart(name, xOrçada, xRealizada, xDesvioReal, line, unidade) {
                                                $('#EvolutivoOrcamentoGeralChart').show();
                                                $('#EvolutivoOrcamentoGeralChartMeses').show();

                                                $(function () {
                                                    Highcharts.chart('EvolutivoOrcamentoGeralChart', {
                                                        credits: {
                                                            enabled: false
                                                        },

                                                        title: {
                                                            text: 'Evolutivo do orçamento geral - ' + unidade
                                                        },
                                                        chart: {
                                                            zoomType: 'x, y',
                                                            backgroundColor: null
                                                        },
                                                        xAxis: {
                                                            categories: name
                                                        },
                                                        yAxis: {

                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },
                                                            subtitle: {
                                                                text: document.ontouchstart === undefined ?
                                                                        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
                                                            }
                                                            ,
                                                            stackLabels: {
                                                                enabled: true,
                                                                style: {
                                                                    fontWeight: 'bold',
                                                                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            type: 'column',
                                                            name: 'Despesa Orçada',
                                                            data: xOrçada,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Despesa Real',
                                                            data: xRealizada,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Desvio R$',
                                                            data: xDesvioReal,

                                                        }, {
                                                            type: 'spline',
                                                            name: 'Desvio R$ Acumulado',
                                                            data: line,
                                                            marker: {
                                                                lineWidth: 2,
                                                                lineColor: Highcharts.getOptions().colors[3],
                                                                fillColor: 'white'
                                                            }
                                                        }]
                                                    });
                                                });
                                            }

                                            function EvolutivoDaContaPorUnidade(name, xOrçada, xRealizada, xDesvioReal, line, unidade, conta) {
                                                $('#EvolutivoDaContaPorUnidade').show();
                                                $('#EvolutivoOrcamentoGeralChartMeses').show();

                                                $(function () {
                                                    Highcharts.chart('EvolutivoDaContaPorUnidade', {
                                                        credits: {
                                                            enabled: false
                                                        },

                                                        title: {
                                                            text: 'Evolutivo da conta ' + conta + ' - ' + unidade
                                                        },
                                                        chart: {
                                                            zoomType: 'x, y',
                                                            backgroundColor: null
                                                        },
                                                        xAxis: {
                                                            categories: name
                                                        },
                                                        yAxis: {

                                                            title: {
                                                                text: 'R$ em milhares'
                                                            },
                                                            subtitle: {
                                                                text: document.ontouchstart === undefined ?
                                                                        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
                                                            }
                                                            ,
                                                            stackLabels: {
                                                                enabled: true,
                                                                style: {
                                                                    fontWeight: 'bold',
                                                                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            type: 'column',
                                                            name: 'Despesa Orçada',
                                                            data: xOrçada,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Despesa Real',
                                                            data: xRealizada,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Desvio R$',
                                                            data: xDesvioReal,

                                                        }, {
                                                            type: 'spline',
                                                            name: 'Desvio R$ Acumulado',
                                                            data: line,
                                                            marker: {
                                                                lineWidth: 2,
                                                                lineColor: Highcharts.getOptions().colors[3],
                                                                fillColor: 'white'
                                                            }
                                                        }]
                                                    });
                                                });
                                            }

                                            //chamada ajax gráfico de DADOS TECNICOS POR CONTA SELECIONADA
                                            function MountDadosTecnicosContaChart(unidade, conta) {
                                                var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? "null" : $('#cbxlistaRegionais select').val();
                                                //fazer ajax
                                                $.post('../api/Manutencao/getGraficoUnidadeTecnico/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(unidade.replace(/[/]/g, '|')) + '/' + escape(conta.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.AnoMes);
                                                    });

                                                    var xDesvQtdeBoi = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvQtdeBoi.push(Math.round(entry.DesvQtdeBoi * 100));
                                                    });

                                                    var xDesvQtdeConsumoUN = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvQtdeConsumoUN.push(Math.round(entry.DesvQtdeConsumoUN * 100));
                                                    });

                                                    var xDesvPrecoUN = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvPrecoUN.push(Math.round(entry.DesvPrecoUN * 100));
                                                    });

                                                    var xDesvUNBoi = [];

                                                    lista.forEach(function (entry) {
                                                        xDesvUNBoi.push(Math.round(entry.DesvUNBoi * 100));
                                                    });

                                                    DadosTecnicosContaChart(titleLine, xDesvQtdeBoi, xDesvQtdeConsumoUN, xDesvPrecoUN, xDesvUNBoi, unidade, conta);

                                                })


                                            }

                                            //locação do gráfico de DADOS TECNICOS POR CONTA SELECIONADA
                                            function DadosTecnicosContaChart(name, xDesvQtdeBoi, xDesvQtdeConsumoUN, xDesvPrecoUN, xDesvUNBoi, unidade, conta) {

                                                if (conta == 'ENERGIA ELÉTRICA CONTRATADA') {
                                                    UnidadeMedida = 'KW';
                                                    UnidadeMedidaPorBoi = 'KW/BOI';
                                                    PrecoUnidadeMedida = 'Preço KW';

                                                } else if (conta == 'COMBUSTÍVEL PARA CALDEIRA') {

                                                    UnidadeMedida = 'MCAL';
                                                    UnidadeMedidaPorBoi = 'MCAL/BOI';
                                                    PrecoUnidadeMedida = 'Preço MCAL';

                                                } else if (conta == 'ÁGUA') {

                                                    UnidadeMedida = 'M³';
                                                    UnidadeMedidaPorBoi = 'M³/BOI';
                                                    PrecoUnidadeMedida = 'Preço M³';

                                                } else {

                                                    UnidadeMedida = 'UnidadeMedida';
                                                    UnidadeMedidaPorBoi = 'UnidadeMedidaPorBoi';
                                                    PrecoUnidadeMedida = 'PrecoUnidadeMedida';

                                                }

                                                var frase = "";

                                                if (xDesvQtdeBoi.length < 1) {
                                                    frase = "<p align=\"center\"><b>Não existem dados técnicos para a conta " + conta + "</b></p><br><br>";
                                                    $('#DadosTecnicosContaChart').show();
                                                    $('#DadosTecnicosContaChart').html(frase);
                                                } else {
                                                    $('#DadosTecnicosContaChart').show();
                                                    $(function () {
                                                        Highcharts.chart('DadosTecnicosContaChart', {
                                                            credits: {
                                                                enabled: false
                                                            },
                                                            chart: {
                                                                zoomType: 'x, y',
                                                                type: 'column',
                                                                backgroundColor: null
                                                            },
                                                            title: {
                                                                text: 'Evolução do impacto dos fatores de desvio (Real vs Orçado) ' + unidade + ' Conta: ' + conta
                                                            },
                                                            xAxis: {
                                                                categories: name
                                                            },
                                                            yAxis: {

                                                                title: {
                                                                    text: 'Desvio %'
                                                                },

                                                                stackLabels: {
                                                                    enabled: false,
                                                                    style: {
                                                                        fontWeight: 'bold',
                                                                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                    }
                                                                }
                                                            },
                                                            legend: {
                                                                align: 'center',

                                                                verticalAlign: 'bottom',

                                                                shadow: false
                                                            },
                                                            tooltip: {
                                                                headerFormat: '<b>{point.x}</b><br/>',
                                                                pointFormat: '{series.name}: {point.y}<br/>Total {point.stackTotal}'
                                                            },
                                                            plotOptions: {
                                                                column: {
                                                                    stacking: 'normal',
                                                                    dataLabels: {
                                                                        enabled: true,
                                                                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'black',
                                                                        formatter: function () {
                                                                            return this.y + '%';
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            series: [{

                                                                name: UnidadeMedida,
                                                                data: xDesvQtdeConsumoUN,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountUnitChart(this, conta) }
                                                                    }
                                                                }

                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Δ% = Despesa Real / Despesa Orçada -1',
                                                                    valueSuffix: '%'
                                                                }



                                                            }, {
                                                                name: UnidadeMedidaPorBoi,
                                                                data: xDesvUNBoi,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountUnitChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> ' + UnidadeMedidaPorBoi + ' = Qtde de ' + UnidadeMedida + ' Consumidos / Qtde de Bois',
                                                                    valueSuffix: '%'
                                                                }
                                                            }, {
                                                                name: 'Bois/Proc',
                                                                data: xDesvQtdeBoi,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountUnitChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Δ% = Qtde de Bois Real / Qtde de Bois Orçada -1',
                                                                    valueSuffix: '%'
                                                                }
                                                            }, {
                                                                name: PrecoUnidadeMedida,
                                                                data: xDesvPrecoUN,
                                                                point: {
                                                                    events: {
                                                                        click: function () { MountUnitChart(this, conta) }
                                                                    }
                                                                }
                                                                , tooltip: {
                                                                    headerFormat: '<b>{point.x}</b><br/>',
                                                                    pointFormat: '{series.name}: <i>{point.y}<i/><br/> Preço do ' + UnidadeMedida + ' = Despesa de ' + UnidadeMedida + ' / Qtde de ' + UnidadeMedida + ' Consumidos',
                                                                    valueSuffix: '%'
                                                                }
                                                            }]
                                                        });
                                                    });
                                                }
                                            }

                                            //chamada ajax unit gráfico
                                            function MountUnitChart(u, conta) {

                                                var tipo = u.series.name;
                                                $.post('../api/Manutencao/getSelectGraficoFatoresTecnicoMateriaPrimaUnidadeEConta/' + enviar.startDate.substring(6, 10) + enviar.startDate.substring(3, 5) + enviar.startDate.substring(0, 2) + '/' + enviar.endDate.substring(6, 10) + enviar.endDate.substring(3, 5) + enviar.endDate.substring(0, 2) + '/' + getManutencaoMes() + '/' + getManutencaoAno() + '/' + escape(unidadeSelecionada.replace(/[/]/g, '|')) + '/' + escape(conta.replace(/[/]/g, '|')) + '/' + escape(tipo.replace(/[/]/g, '|')) + '/' + getManutencaoRegional() + '/', function (lista) {

                                                    var titleLine = [];

                                                    lista.forEach(function (entry) {
                                                        titleLine.push(entry.AnoMes);
                                                    });

                                                    var xOrcado = [];

                                                    lista.forEach(function (entry) {
                                                        xOrcado.push(entry.Orcado);
                                                    });

                                                    var xRealizado = [];

                                                    lista.forEach(function (entry) {
                                                        xRealizado.push(entry.Realizado);
                                                    });

                                                    var x3 = [];

                                                    UnitChart(titleLine, xOrcado, xRealizado, x3, x3, unidadeSelecionada, tipo);

                                                });

                                            }

                                            //locação unit gráfico
                                            function UnitChart(name, xOrcado, xRealizado, x3, line, unidade, tipo) {
                                                $('#UnitChart').show();
                                                $('#UnitChartMeses').show();

                                                $(function () {
                                                    Highcharts.chart('UnitChart', {
                                                        credits: {
                                                            enabled: false
                                                        },

                                                        title: {
                                                            text: 'Visão por Unidades de Medida - ' + tipo + ' - ' + unidade
                                                        },
                                                        chart: {
                                                            zoomType: 'x, y',
                                                            backgroundColor: null
                                                        },
                                                        xAxis: {
                                                            categories: name
                                                        },
                                                        yAxis: {

                                                            title: {
                                                                text: ''
                                                            },
                                                            subtitle: {
                                                                text: document.ontouchstart === undefined ?
                                                                        'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
                                                            }
                                                            ,
                                                            stackLabels: {
                                                                enabled: true,
                                                                style: {
                                                                    fontWeight: 'bold',
                                                                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                                                                }
                                                            }
                                                        },

                                                        plotOptions: {
                                                            series: {
                                                                borderWidth: 0,
                                                                dataLabels: {
                                                                    enabled: true,
                                                                    format: '{point.y:.,0f}'
                                                                }
                                                            }
                                                        },

                                                        series: [{
                                                            type: 'column',
                                                            name: 'Orçado',
                                                            data: xOrcado,

                                                        }, {
                                                            type: 'column',
                                                            name: 'Real',
                                                            data: xRealizado,


                                                        }]
                                                    });
                                                });
                                            }

                                        </script>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- END CONTENT BODY -->
        </div>
    </div>
</div>

@section Scripts {

    <script type="text/javascript">


        /*******INICIO MODEL RELATÓRIO*******/

        var $btn = $('#btnSend');
        $('#simpleCallendar').hide().attr('disabled', true);

        function ValidaDadosParaEnvio() {
            GuardJs.resetForValidation();
            GuardJs.CheckRangeDateTime(enviar.endDate, enviar.startDate, "Initial date", "End date");
            /*Especifico*/
            //if (!($('#unitId :selected').val() > 0)) {
            //    GuardJs.exibirMensagemAlerta("Por favor selecione uma unidade.");
            //    return false;
            //}
            //if (!GuardJs.isValid)
            //    return !GuardJs.isValid;
            //GuardJs.esconderMensagem();

            return true;
        }

        function Send() {

            $btn.button('loading');
            $('#results').empty();


            resizeHighcharts()
            $('#GraficoDespesaTodasRegionais1').css('width', '100%');

            if (!ValidaDadosParaEnvio()) {
                $btn.button('reset');
                return;
            }

            destroyChart('#GraficoDespesaTodasRegionais');
            //$('#GraficoDespesaTodasRegionais').empty();
            $('#firstTable').empty();
            //$('#GrafDespReg').empty();
            destroyChart('#GrafDespReg');

            $('#TabelaDespesaTodasRegionais').empty();
            $('#secoundTableTeste').empty();

            //$('#GraficoDespesaTodasRegionaisPorPacote').empty();
            destroyChart('#GraficoDespesaTodasRegionaisPorPacote');
            destroyChart('#GrafPacotePorRegional');

            $('#GrafImpacFatTecDesv').empty();
            $('#TabelaITPorUni').empty();

            $('#GrafPacotePorRegional').empty();
            $('#UnitChart').empty();
            $('#EvolutivoOrcamentoGeralChart').empty();
            $('#EvolutivoDaContaPorUnidade').empty();
            $('#DadosTecnicosContaChart').empty();

            MountGraficoDespesaTodasRegionais1();
            //MountGraficoDespesaTodasRegionaisPorPacote();
            //MountGraficoDespesaTodasRegionais();
            firstTable("");


        };

        /*******FIM MODEL RELATÓRIO*******/

        function float2moeda(num) {

            x = 0;

            if (num < 0) {
                num = Math.abs(num);
                x = 1;
            }

            if (isNaN(num)) num = "0";

            num = Math.floor((num * 100 + 0.5) / 100).toString();

            for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3) ; i++)

                num = num.substring(0, num.length - (4 * i + 3)) + '.'
                     + num.substring(num.length - (4 * i + 3));
            ret = num;

            if (x == 1) ret = ' - ' + ret;

            return ret;
        }

        $('body > div > div.page-header.navbar.navbar-fixed-top > div > div.page-logo > div').click();

        $('#balao').click(function () {

            $('#balao').hide();
            $('#mostrarBalao').show();

        })

        $('#mostrarBalao').click(function () {

            $('#balao').show();
            $('#mostrarBalao').hide();

        })

        $(document).ready(function () {
            $("#btnSend").click(function (e) {
                Send();
            });
            formControl.showFullCallendar();
            formControl.showManutencao();
            formControl.loadManutencaoParametros();

        });

        function getManutencaoAno() {

            return $('#cbxlistaAnos select').val().length == 0 ? "null" : $('#cbxlistaAnos select').val();

        };

        function getManutencaoMes() {

            return $('#cbxlistaMeses select').val().length == 0 ? "null" : $('#cbxlistaMeses select').val();

        };

        function getManutencaoRegional() {
            var regFiltro = $('#cbxlistaRegionais select').val().length == 0 ? null : $('#cbxlistaRegionais select').val();

            if (regFiltro != null) {
                for (var i = 0; i < regFiltro.length; i++) {
                    regFiltro[i] = escape(regFiltro[i].replace(/[/]/g, '|'))
                }
            }

            return regFiltro;

        }

        function milhar(n) {
            var n = '' + n, t = n.length - 1, novo = '';

            for (var i = t, a = 1; i >= 0; i--, a++) {
                var ponto = a % 3 == 0 && i > 0 ? '.' : '';
                novo = ponto + n.charAt(i) + novo;
            }
            return novo;
        }

        function resizeHighcharts() {
            $(Highcharts.charts).each(function (c, chart) {
                if (chart != undefined) {
                    chart.reflow()
                }
            });
        }

        function destroyChart(id) {
            if ($(id).highcharts() != undefined) {
                $(id).highcharts().destroy();
            }
        }

    </script>

}
