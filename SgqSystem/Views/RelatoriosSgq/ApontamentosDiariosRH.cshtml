@model SgqService.ViewModels.FormularioParaRelatorioViewModel
@{
    Layout = "_FilterReports.cshtml";
    ViewBag.Title = Resources.Resource.daily_apointments; //"Apontamentos Diarios";

    ViewBag.pivotTable = true;
    ViewBag.ShowCurrentDate = false;
    ViewBag.ShowRangeDate = true;

    ViewBag.ShowParClusterGroup = true;

    ViewBag.ShowParStructure2 = true;

    ViewBag.ShowParStructure3 = true;

    ViewBag.ShowUserSgqAuditor = true;

    ViewBag.ShowParStructure = false;
    ViewBag.ShowParCompany = true;
    ViewBag.ShowShift = false;
    ViewBag.ShowParDepartment = true;
    ViewBag.ShowParSecao = true;
    ViewBag.ShowParCargo = true;
    ViewBag.ShowParLevel1 = true;
    ViewBag.ShowParLevel2 = true;
    ViewBag.ShowParLevel3 = true;
    ViewBag.ShowParCluster = true;

    ViewBag.ShowUserCompanies = true; //Exibe somente as unidades do usuário no filtro

    var urlGet = Url.Action("GetApontamentosDiariosRH", "api/ApontamentosDiarios");
    var urlSave = Url.Action("Save", "api/ApontamentosDiarios");
    var urlLogTrack = Url.Action("Get", "api/LogTrack");
}

@section Content {

    @Html.Partial("~/Views/RelatoriosSgq/_ResultLevel3Edit.cshtml")
    <div id="divApontamentosDiarios"></div>
    <div id="divTable">
        <table id="resultsApontamentos" class="table table-striped"></table>
        <div id="PivotTable" class="display" style="display:none"></div>
    </div>

    @Html.Partial("~/Views/RelatoriosSgq/_PivotTable.cshtml")
}


@section Scripts {

    <script>

        var urlGet = '@Html.Raw(@urlGet)';
        var RoleUser = @Html.Raw(Json.Encode(ViewBag.Roles));
        var urlSave = '@Html.Raw(@urlSave)';
        var urlLogTrack = '@Html.Raw(urlLogTrack)';

        function enviarFiltro() {
            openLoader('Aguarde...');
            $('#resultsApontamentos').empty();
            $('#divApontamentosDiarios').empty();

            $('#divTable').hide();

            $.ajax({
                url: urlGet,
                type: 'post',
                data: JSON.stringify(objFiltro),
                dataType: "JSON",
                contentType: "APPLICATION/JSON; CHARSET=UTF-8",
                beforeSend: function () {
                }
            })
                .done(function (data) {
                GerarTabela(data);
                closeLoader();
            })
            .fail(function (jqXHR, textStatus, msg) {
                console.log(msg);
                preencheRetornoGrafico("Ocorreu um erro ao buscar os dados. Erro: " + msg);
                closeLoader();
            });
        }

        function preencheRetornoGrafico(msg) {
            $('#divApontamentosDiarios').html("<div class='alert alert-info'>" + msg + "</div>");
        }

        function GerarTabela(retornoArray) {

            if (retornoArray.length == 0) {

                preencheRetornoGrafico(@Html.Raw(Json.Encode(Resources.Resource.no_appointments_in_this_period)))
            }

            else {

                $('#tabelaAnaliticoButtons').show();
                //Regra para habilitar o botão de edição somente para quem contiver as roles 366 e 346 e Admin
                var regraEdit = false;

                var roles = $.grep(getCookie('webControlCookie'), function (a, b) {
                    return a.indexOf('roles') != -1;
                })[0].split('=')[1].split(',');

                var role = roles.find(function(e) {
                    return e === 'Admin';
                });

                if (RoleUser.indexOf("366") >= 0 || RoleUser.indexOf("346") >= 0 || RoleUser.indexOf("1885") >= 0 || role == 'Admin') {
                    regraEdit = true ;
                }else{
                    regraEdit = false;
                }

                //Fim Regra
                var Tipo1 = {};
                var Tipo2 = {};

                if (retornoArray[0].HashKey == 1 || retornoArray[0].HashKey == 5) {

                    Tipo1 = { title: "@Resources.Resource.sequential", mData: "Sequencial" };
                    Tipo2 = { title: "@Resources.Resource.side_banda", mData: "Banda" };
                } else {
                    Tipo1 = { title: "@Resources.Resource.evaluation", mData: "Avaliacao" };
                    Tipo2 = { title: "@Resources.Resource.sample", mData: "Amostra" };
                }

                $('#divTable').show();

                var colunas =
                    [
                        {
                            title: "@Resources.Resource.edit", mData: null, mRender: function (data, type, full) {
                                if (data.ParLevel3InputType_Id == 11) {
                                    return '<button class="btn btn-link custom-button" disabled style="cursor: not-allowed;">' + "@Resources.Resource.edit" + '</button>';
                                } else {
                                    return '<button id="edit" data-ParLevel3InputType_Id="' + data.ParLevel3InputType_Id + '" class="btn btn-link custom-button" data-toggle="modal" data-target="#myModal">' + "@Resources.Resource.edit" + '</button>';
                                }
                            }, "visible": regraEdit
                        },
                        { title: "@Resources.Resource.unit", mData: "Unidade" },
                        { title: "Cluster", mData: "ClusterName" },
                        //{ title: "@Resources.Resource.cluster", mData: "Processo" },
                        //{ title: "@Resources.Resource.shift", mData: "Turno" },
                        //{ title: "@Resources.Resource.period", mData: "Periodo" },
                        { title: "@Resources.Resource.frequency", mData: "Frequencia" },
                        { title: "@Resources.Resource.user", mData: "Auditor" },
                        { title: "@Resources.Resource.date", mData: "_Data" },
                        { title: "@Resources.Resource.time", mData: "_Hora" },
                        { title: "@Resources.Resource.costcenter", mData: "CentroCusto" },
                        { title: "@Resources.Resource.department", mData: "Secao" },
                        { title: "@Resources.Resource.company_group", mData: "GrupoEmpresa" },
                        { title: "@Resources.Resource.structure", mData: "regional" },
                        { title: "@Resources.Resource.cluster_group1", mData: "GrupoCluster" },
                        { title: "Cargo", mData: "Cargo" },
                        { title: "@Resources.Resource.audit", mData: "Indicador" },
                        { title: "@Resources.Resource.monitoring", mData: "Monitoramento" },
                        { title: "@Resources.Resource.task", mData: "Tarefa" },
                        { title: "@Resources.Resource.weight", mData: "Peso" },
                        {
                            title: "@Resources.Resource.min_interval", mData: "IntervaloMinimo", mRender: function (data, type, full) {

                                if (isNaN(parseFloat(data))) {

                                    return data;

                                } else {

                                    return data.toString().match(/^-?\d+(\.\d{1,2})?/g)[0];
                                }

                            }
                        },
                        {
                            title: "@Resources.Resource.max_interval ", mData: "IntervaloMaximo", mRender: function (data, type, full) {

                                if (isNaN(parseFloat(data))) {

                                    return data;

                                } else {

                                    return data.toString().match(/^-?\d+(\.\d{1,2})?/g)[0];
                                }

                            }
                        },
                        { title: "@Resources.Resource.value", mData: "Lancado" },
                        { title: "@Resources.Resource.textfield", mData: "ValueText" },
                        { title: "@Resources.Resource.deviation ?", mData: "_Conforme" },
                        { title: "@Resources.Resource.weighted_defects", mData: "NC_Peso" },
                        { title: "@Resources.Resource.Qualification_Group", mData: "Qualification_Group"},
                        { title: "@Resources.Resource.na ?", mData: "_NA" },
                        { title: "@Resources.Resource.weighted_ev", mData: "AV_Peso" },
                        Tipo1,
                        Tipo2,
                        { title: "@Resources.Resource.header_fields", mData: "HeaderFieldList", "width": "50%" },
                        //{ title: "@Resources.Resource.platform", mData: "Platform", "width": "50%" },
                        { title: "@Resources.Resource.add_date", mData: "_AddDate", "width": "50%" },
                        {
                            title: "@Resources.Resource.type ", mData: "Type", mRender: function (data, type, full) {

                                if (data == "2") {
                                    return '@Resources.Resource.retroactive';
                                } else if (data == "3") {
                                    return '@Resources.Resource.anticipated';
                                } else if (data == "4") {
                                    return '@Resources.Resource.import';
                                } else if (data == '1') {
                                    return '@Resources.Resource.edited';
                                } else {
                                    return '@Resources.Resource.normal';
                                }
                            }
                        },
                        {

                            title: "Histórico Resultado", mData: null, mRender: function (data, type, full) {
                                return full.HasHistoryResult_Level3 ?
                                    '<button class="btn btn-info btn-sm" id="viewHistory" class="btn btn-link custom-button" height="60" style="width:80px;"  data-toggle="modal" data-target="#modalLogTrackHistory">' + "Visualizar" + '</button>'
                                    :
                                    '<button class="btn btn-default btn-sm" disabled="" title="Não há edições" style="width:80px;">-</button>';
                            }
                        }
                    ];

                var initDatatable = function () {

                    $('#loading').hide();
                    setTimeout(function (e) {
                        var oTable = $('#resultsApontamentos').dataTable();
                        if (oTable.length > 0) {
                            oTable.fnAdjustColumnSizing();
                        }
                    }, 100);
                    $('#resultsApontamentos tbody').on('click', 'button#edit', function (data) {

                        var data = table.row($(this).parents('tr')).data();
                        $('#myModal #changeConform').empty();
                        $('#myModal #estName').html(data.Unidade + " > " + data.Indicador + " > " + data.Monitoramento + " > " + data.Tarefa);

                        if (data.ParLevel3InputType_Id != 10) {
                            $('#myModal #ResultLevel3_Id').val(data.ResultLevel3Id);
                            $('#myModal #changeConform').append(montaHtmlEdicao(data));
                            $("#botaoSalvar").show();
                            InitiMasksDefaults();
                        } else {
                            $("#myModal #Level3Name").append("<div class='alert alert-warning' id='mensagemErro'>O item selecionado possui vínculos de resultado. A edição está desabilitada.</div>");
                            $("#botaoSalvar").hide();
                        }
                    });

                    $('#resultsApontamentos tbody').on('click', 'button#viewHistory', function (data) {

                        var data = table.row($(this).parents('tr')).data();

                        var tableLogTrack = $('#modalLogTrackHistory .modal-body');
                        $(tableLogTrack).html('');

                        $.get(urlLogTrack + "/Result_Level3/" + data.ResultLevel3Id, function (r) {

                            var htmlHead = "<thead><tr>";
                            htmlHead += "<th></th>";
                            htmlHead += "<th>Data Alteração</th>";
                            htmlHead += "<th>Quem</th>";
                            htmlHead += "<th>Resultado</th>";
                            htmlHead += "<th>Valor</th>";
                            htmlHead += "<th>Valor do Texto</th>";
                            htmlHead += "<th>Não avaliado</th>";
                            htmlHead += "<th>Tipo Motivo</th>";
                            htmlHead += "<th>Motivo</th>";
                            htmlHead += "</tr></thead>";

                            var htmlBody = "";
                            var quantidadeNaLista = r.length;
                            r.splice(0, 0, r[r.length - 1]);
                            r = r.slice(0, -1);
                            $.each(r, function (i, o) {

                                if (i == 0) {
                                    htmlBody += "<tr style='background-color:#ddd;' title='Original'>";
                                    htmlBody += "<td>Original</td>";
                                } else if(i == 1){
                                    htmlBody += "<tr style='background-color:#5cb85c;' title='Atual'>";
                                    htmlBody += "<td>Edição "+(quantidadeNaLista-i)+"</td>";
                                } else {
                                    htmlBody += "<tr>";
                                    htmlBody += "<td>Edição "+(quantidadeNaLista-i)+"</td>";
                                }

                                htmlBody += "<td>"+o.addDate+"</td>";
                                htmlBody += "<td>"+o.userSgq_Name+"</td>";
                                htmlBody += "<td>"+(o.obj.IsConform ? "Conforme" : "Não Conforme")+"</td>";
                                htmlBody += "<td>"+o.obj.Value+"</td>";
                                htmlBody += "<td>"+(o.obj.ValueText == 'null' || o.obj.ValueText == 'undefined' ? "" : o.obj.ValueText)+"</td>";
                                htmlBody += "<td>"+(o.obj.IsNotEvaluate ? "Não Avaliado" : "Avaliado")+"</td>";
                                htmlBody += "<td>"+o.parReason+"</td>";
                                htmlBody += "<td>"+o.motivo+"</td>";
                                htmlBody += "</tr>";
                            });

                            var tableHtml = "<table>"+htmlHead+"<tbody>"+htmlBody+"</tbody>"+"</table>"
                            $(tableLogTrack).html(tableHtml);

                            $(tableLogTrack).find('table').dataTable({
                                "ordering": false,
                                "pageLength": 25,
                                "scrollX": true,
                                "initComplete": function (settings, json) {
                                    setTimeout(function () {$.fn.dataTable.tables({ visible: true, api: true }).columns.adjust(); },500)
                                }
                            } );

                        })
                    });

                }

                var table = datatableGRT.Inicializar({
                    idTabela: "resultsApontamentos",
                    listaDeDados: retornoArray,
                    colunaDosDados: colunas,
                    numeroLinhasNaTabela: 25,
                    aplicarResponsividade: true,
                    tamanhosDoMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "-"]],
                    loadingRecords: true,
                    destroy: true,
                    info: true,
                    initComplete: initDatatable,
                    createdRow: function (row, data, index) {
                    }
                });
            }

        }

        function makeArrayData(arr) {
            var arrayData = [];
            $(arr).each(function () {
                arrayData.push(this);
            });
            return arrayData;
        }

        $("#tabela").on('click', function () {
                $("#PivotTable").css("display", "none");
                $("#resultsApontamentos_wrapper").css("display","block");
         });

        $("#pivot-table").on('click', function () {
            $('#divFilterReports').addClass('hide');
            $('#divReportContent').attr('class', 'col-sm-12');
            $('#btnToggleDivFilterReports').text('> Mostrar Filtros');
            var arrayData = makeArrayData($('#resultsApontamentos').DataTable().rows({ search: 'applied', page: 'all' }).data());
            $("#resultsApontamentos_wrapper").css("display", "none");
            CarregaPivotTable(arrayData, "PivotTable");
            $("#PivotTable").css("display", "block");
        });

        function montaHtmlEdicao(o) {
            html = '<div>';
            var inputTypeId = o.ParLevel3InputType_Id;
            if (inputTypeId == 2 || inputTypeId == 3 || inputTypeId == 4 || inputTypeId == 7 || inputTypeId == 9 || inputTypeId == 15) {
                var intervalMax = o.IntervaloMaximo == null ? "" : parseFloat(o.IntervaloMaximo.replace(',', '.'));
                var intervalMin = o.IntervaloMinimo == null ? "" : parseFloat(o.IntervaloMinimo.replace(',', '.'));
                var valorAtual = parseFloat(o.Lancado.replace(',', '.'));
                html += "<label'> @Resources.Resource.max_interval : </label> " +
                    "<label id='intervalMax'>"+ intervalMax +"</label>" +
                    "<br>" +
                    "<label'> @Resources.Resource.min_interval : </label>" +
                    "<label id='intervalMin'>"+ intervalMin +"</label>" +
                    "<br>" +
                    "<label>  @Resources.Resource.current_value : </label>" +
                    "<label>&nbsp"+ valorAtual +"</label>" +
                    "<br>" +
                    "<label>  @Resources.Resource.new_value : </label>" +
                    "<input type='number' id='intervaloValor' class='form-control' value="+ valorAtual +" />" +
                    "<br>";
            }
            if (inputTypeId == 1 || inputTypeId == 6) {
                var checkedAttr = o.Conforme == true ? "checked='checked'" : "";
                html += "<label for='Conforme: '> @Resources.Resource.conform2 : </label>" +
                        "<input class='.check-box' id='conform' name='conform'  "+ checkedAttr +"  type='checkbox' value='true'><input name='conform' type='hidden' value='false'>" +
                        "<br>";
            }
            if (inputTypeId == 5) {
                var valueText = o.ValueText == "undefined" || o.ValueText == null ? "" : o.ValueText;
                html += "<label for='Conforme: '> @Resources.Resource.current_value : </label>" + valueText +
                        "<br>" +
                        "<label for='Conforme: '> @Resources.Resource.new_value : </label>" +
                         "<input type='text' id='texto' class='form-control text' value='" + valueText + "' />"
            }

            var naoAvaliado = o.NA == true ? "checked='checked'" : "";
            html += "<label for='Conforme: '> @Resources.Resource.unvalued : </label>" +
                    "<input type='checkbox' id='IsEvaluated' "+ naoAvaliado +" class='.check-box' />";
            html += '</div>';
            return html;
        }

    </script>

}