@model SgqService.ViewModels.FormularioParaRelatorioViewModel
@using DTO
@{
    ViewBag.Title = Resources.Resource.defects_reports; //"Não Conformidades";
    var url = Url.Action("Index", "Home");
    var urlGraficoUnidades = Url.Action("GraficoUnidades", "api/NaoConformidade");
    var urlGraficoDepartamentos = Url.Action("GraficoDepartamentos", "api/NaoConformidade");
    var urlGetPanelResultSet = Url.Action("GetPanelResultSet", "api/NaoConformidade");
    var urlGraficoNcPorUnidadeIndicador = Url.Action("GraficoIndicador", "api/NaoConformidade");
    var urlGraficoMonitoramento = Url.Action("GraficoMonitoramento", "api/NaoConformidade");
    var urlGraficoTarefasAcumuladas = Url.Action("GraficoTarefasAcumuladas", "api/NaoConformidade");
    var urlGraficoTarefa = Url.Action("GraficoTarefa", "api/NaoConformidade");
    var urlFtaGet = Url.Action("GetUrl", "api/Fta");
    var UrlGraficoDepartamentosPorShift = Url.Action("GraficoDepartamentosPorShift", "api/NaoConformidade");
    var UrlPivotTable = Url.Action("PivotTable", "api/NaoConformidade");
    var UrlGraficoIndicadorPorShift = Url.Action("GraficoIndicadorPorShift", "api/NaoConformidade");
    var UnidadeUsuario = ViewBag.UnidadeUsuario;
    ViewBag.UnitIdArr = true;
}

<style>
    .panel-info {
        border-color: #999;
    }

        .panel-info > .panel-heading {
            background-color: #ccc;
            border-color: #999;
            color: #333;
        }

    .chart-inner {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    #CustomPopover {
        z-index: 1040;
        border-width: 2px;
        padding: 8px;
        border-radius: 2px !important;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        position: absolute;
        background: white;
    }

        #CustomPopover .btn {
            margin-left: 1px;
            margin-right: 1px;
        }
</style>

<div class="page-content-wrapper">
    <div class="page-content">
        @Html.Partial("~/Views/Shared/_FormToQueryFullScreen.cshtml","")


        <div id="CustomPopover" class="hide">
            <h5>@Resources.Resource.next_unfolding</h5>
            <div>
                <button class="btn btn-sm btn-default" id="btnIndicador">@Resources.Resource.level1</button>
                <button class="btn btn-sm btn-default" id="btnMonitoramento">Level 2</button>
                <button class="btn btn-sm btn-default" id="btnTarefasAcumuladas">Level 2 do Level 1</button>
                <button class="btn btn-sm btn-default" id="btnShift">Shift</button>
                <button class="btn btn-sm btn-default" id="btnDepartamento">@Resources.Resource.department</button>
            </div>
        </div>

        <div id="formBodyContent">
            @Html.Partial("~/Views/Shared/_mensagemObrigatorio.cshtml")

            <div id="RGUnidadesGrafico"></div>
            <div id="RGDepartamentosGrafico"></div>
            <div id="RGDepartamentosShiftGrafico"></div>
            <div id="RGOperacoesGrafico"></div>
            <div id="RGOperacoesShiftGrafico"></div>

            <div id="loading"></div>

            <div class="panel panel-info" id="PanelFull0" style="display:none">
                <div class="panel-heading"></div>
                <div class="panel-body" id="g0">
                    <div id="RGMonitoramentosGrafico"></div>
                    <div id="RGMonitoramentosShiftGrafico"></div>
                    <div id="RGTarefasAcumuladasGrafico"></div>
                    <div id="RGTarefasGrafico"></div>

                    <div id="RGTarefasPivotTable"></div>

                </div>
            </div>
        </div>
    </div>

    @* ADICIONA PIVOTTABLE *@
    @Html.Partial("~/Views/RelatoriosSgq/_PivotTable.cshtml")

    @Html.Partial("~/Views/RelatoriosSgq/_Fta.cshtml")
</div>

@section Scripts {

<script type="text/javascript">

        $('button').button({ loadingText: '@Resources.Resource.loading...' });

        //var Grafico1 = '@Resources.Resource.defects_per_unit'; //'NC por unidade';
        var Department = '@Resources.Resource.department'
        var GraficoDepto = '@Resources.Resource.defects_per_deparment'; //'NC por departamento';
        var GraficoIndic = '@Resources.Resource.defects_per_audit'; //'NC por Indicador: ';
        var GraficoMon = '@Resources.Resource.defects_per_monitoring'; //'NC por Monitoramento: ';
        var GraficoTarefa = '@Resources.Resource.defects_per_tasks'; //'NC por Tarefa: ';
        var GraficoTarefasAcumuladasTit ='@Resources.Resource.derivations_per_defects'; // 'NC por Tarefas acumuladas: ';
        var GraficoMoncomTarefa = '@Resources.Resource.defects_per_monitoring_at_tasks'; //'NC por Monitoramento na Tarefa: ';
        var $btn = $('#btnSend');
        var urlGraficoUnidades = @Html.Raw(Json.Encode(urlGraficoUnidades));
        var urlGraficoIndicador = @Html.Raw(Json.Encode(urlGraficoNcPorUnidadeIndicador));
        var urlGraficoMonitoramento = @Html.Raw(Json.Encode(urlGraficoMonitoramento));
        var urlGraficoTarefasAcumuladas = @Html.Raw(Json.Encode(urlGraficoTarefasAcumuladas));
        var urlGraficoTarefa = @Html.Raw(Json.Encode(urlGraficoTarefa));
        var UnidadeUsuario = (@Html.Raw(Json.Encode(ViewBag.UnidadeUsuario)));
        var urlGetFta = @Html.Raw(Json.Encode(urlFtaGet));
        var urlGraficoDepartamentos = @Html.Raw(Json.Encode(urlGraficoDepartamentos));
        var UrlGraficoDepartamentosPorShift = @Html.Raw(Json.Encode(UrlGraficoDepartamentosPorShift));
        var UrlPivotTable = @Html.Raw(Json.Encode(UrlPivotTable));
        var urlGraficoIndicadorPorShift = @Html.Raw(Json.Encode(UrlGraficoIndicadorPorShift));
        var urlGetUnitId = '@Url.Action("GetUnitId","api/Fta")'
        var popoverMain;
        var Aux;
        var subtitle = "";
        var pathDirect = 0; // sum 1 se user optao por departamento, se continuar 0 ele optou por indicador e pulou um método
        var IsDepartment = false;
        var IsDepartmentShift = false;
        var idGrafico = "";
        var desdobramento = "";
        var ShiftSelected;

        $('#simpleCallendar').hide().attr('disabled', true);

        $(document).ready(function () {

            closeLeftSidebar();
            $(".sidebar-toggler").removeClass("hide");
            $(".page-sidebar-wrapper").removeClass("hide");

            $("#btnSend").click(function (e) {
                Send(true);
            });

            $('.levels').hide();

            formControl.showFullCallendar();

            if (@Json.Encode(GlobalConfig.Eua)) {
                formControl.showShift();
            }

            formControl.showClustRegUnitCriticalLevel123();



            //setTimeout(function () {
            $("#clusterGroupId").find("option").eq(0).remove();
            $("#clusterGroupId").val(8).change();

            if ($("#clusterGroupId").val() == null) {
                $("#clusterGroupId").val(2).change();
            }
                //}, 3);

            popoverMain = $('#CustomPopover').addClass('hide');

            $('.sidebar-nav select').select2();
            });

        function Send(toggle) {

            $btn.button('loading');
            $('#results').empty();
            $("#RGOperacoesGrafico").empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            $("#PanelFull0").hide();

            ShiftSelected = $('#shift :selected').val();

            enviar["departmentName"] = $('#criticalLevelId :selected').val();


            if (@Json.Encode(GlobalConfig.Eua)) {
                enviar["shift"] = ShiftSelected;
            } else {
                enviar["shift"] = $('#shiftIdV :selected').val()
            }

            //$('#unitIdV').change();

            popoverMain.addClass('hide');

            if (!ValidaDadosParaEnvio()) {
                $btn.button('reset');
                return;
            }

            enviar["auditorId"] = GetUsuarioId();
            console.log(enviar);
            EasyAjax(urlGraficoUnidades, enviar, GraficoUnidade, "RGUnidadesGrafico", toggle);//AJAX
            $('#RGTarefasPivotTable').hide();

        };

        function ValidaDadosParaEnvio() {
            GuardJs.resetForValidation();
            GuardJs.CheckRangeDateTime(enviar.endDate, enviar.startDate, "Initial date", "End date");

            if (!GuardJs.isValid)
                return !GuardJs.isValid;
            GuardJs.esconderMensagem();

            return true;
        }

        /*GET*/

        function GetGraficoDepartamento(unidade){
            $("#PanelFull0").hide();
            $("RGDepartamentosShiftGrafico").empty();
            enviar["unitName"] = unidade;
            if (@Json.Encode(GlobalConfig.Eua)) {
                enviar["shift"] = ShiftSelected;
            } else {
                enviar["shift"] = $('#shiftIdV :selected').val()
            }
            console.log(enviar);
            EasyAjax(urlGraficoDepartamentos, enviar, GraficoDepartamento, "RGDepartamentosGrafico");
            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoIndicadorDepartamento(departamento){
            enviar["departmentName"] = departamento;
            $("#PanelFull0").hide();
            pathDirect = 1;
            console.log(enviar);
            EasyAjax(urlGraficoIndicador, enviar, GraficoIndicadorUnidade, "RGOperacoesGrafico");
            $('#RGTarefasPivotTable').hide();
        }

        function GetGraficoIndicadorUnidade(unidade) {
            $("#PanelFull0").hide();
            enviar["unitName"] = unidade;
            if (@Json.Encode(GlobalConfig.Eua)) {
                enviar["shift"] = ShiftSelected;
            } else {
                enviar["shift"] = $('#shiftIdV :selected').val()
            }
            pathDirect = 0;
            console.log(enviar);
            EasyAjax(urlGraficoIndicador, enviar, GraficoIndicadorUnidade, "RGOperacoesGrafico");
            $('#RGTarefasPivotTable').hide();
        }

        function GetPopover(param, grafico, shift) {

            popoverMain.addClass('hide');

            hidePopoverItems();

            IsDepartment = false;
            Aux = null;
            Aux = param;
            desdobramento = grafico;

            popoverMain.css("top", y);
            popoverMain.css("left", x);

            if (desdobramento == "Departamento") {
                if (@Json.Encode(GlobalConfig.Eua)) {
                    enviar["shift"] = ShiftSelected;
                } else {
                    enviar["shift"] = $('#shiftIdV :selected').val()
                }
                IsDepartmentShift = false;
            }

            switch (grafico) {

                case "DepartamentoShift":

                    enviar["shift"] = shift;
                    IsDepartmentShift = true;
                    GetGraficoIndicadorDepartamento(Aux);
                    return;

                case "IndicadorShift":

                    enviar["shift"] = shift;
                    GetMonitoramento(Aux);
                    GetTarefasAcumuladas(Aux);
                    return;

                case "Departamento":

                    IsDepartment = true;

                    if (ShiftSelected || @Json.Encode(GlobalConfig.Brasil)) {
                        GetGraficoIndicadorDepartamento(Aux);
                    return;
            } else {
                        showPopover2();
            break;
        }

                case "Indicador":

        if (IsDepartmentShift || ShiftSelected || @Json.Encode(GlobalConfig.Brasil)) {
            GetMonitoramento(Aux);
        GetTarefasAcumuladas(Aux);
        return;
        }

        enviar["shift"] = shift;
        IsIndicador = true;
        showPopover3();
        break;

                default:
        IsDepartmentShift = false;
        showPopover1();
        break;
        }

        popoverMain.removeClass('hide');

        }

        function GetMonitoramento(indicador){
            //$("#PanelFull0").hide();
            $("#RGTarefasGrafico").empty();
            enviar["level1Name"] = removeFtaDaLabel(indicador);
            console.log(enviar);
            EasyAjax(urlGraficoMonitoramento, enviar, GraficoMonitoramento, "RGMonitoramentosGrafico");
            $('#RGTarefasPivotTable').hide();
        };

        function GetTarefasAcumuladas(indicador) {
            //$("#PanelFull0").hide();
            $("#RGTarefasAcumuladasGrafico").empty();
            enviar["level1Name"] = removeFtaDaLabel(indicador);
            console.log(enviar);
            EasyAjax(urlGraficoTarefasAcumuladas, enviar, GraficoTarefasAcumuladas, "RGTarefasAcumuladasGrafico");
            $('#RGTarefasPivotTable').hide();
        };

        function GetTarefa(monitoramento){
            enviar["level2Name"] = removeFtaDaLabel(monitoramento);
            console.log(enviar);
            EasyAjax(urlGraficoTarefa, enviar, GraficoTarefas, "RGTarefasGrafico");
            $('#RGTarefasPivotTable').hide();
            pivotTableId = "RGTarefasPivotTable";
            EasyAjax(UrlPivotTable, enviar, CarregaPivotTable, "RGTarefasPivotTable");
            $('#RGTarefasPivotTable').show();
        };

        function GetGraficoGenerico() {
            if (desdobramento == "Departamento") {
                IsDepartment = true;
                idGrafico = "RGDepartamentosShiftGrafico";
                $('#RGOperacoesGrafico').empty();
                console.log(enviar);
                EasyAjax(UrlGraficoDepartamentosPorShift, enviar, GraficoDepartamentoPorShift, "RGDepartamentosShiftGrafico");
                $('#RGTarefasPivotTable').hide();
            } else if (desdobramento == "Indicador") {
                idGrafico = "RGOperacoesShiftGrafico";
                console.log(enviar);
                EasyAjax(urlGraficoIndicadorPorShift, enviar, GraficoIndicadorPorShift, "RGOperacoesShiftGrafico");
                $('#RGTarefasPivotTable').hide();
            }
        }

        /*END GET*/

        /*Charts*/
        function GraficoUnidade(data) {
            if(!(data.length > 0)){
                GuardJs.exibirMensagemAlerta(Resources('no_data_to_show'));
                return;
            }

            var dataX = MapeiaValorParaHC(data, "UnidadeName");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");

            $('#RGUnidadesGrafico').empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(setNameTitulos(Resources('defects_per_unit'))),
                subtitle: Chart.Subtitulo(setNameSubtitulos(Resources('defects_per_unit'))),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(Proc, GetPopover, null, "", dataX),
                    Chart.NC(Nc, GetPopover, null, null, null, "", dataX),
                    Chart.Av(Av, GetPopover, null, null, null, "", dataX)
                ]
            });

            $('.body-content').css('height', '3350px');

        }

        function GraficoDepartamento(data) {
            pathDirect = 1;
            var dataX = MapeiaValorParaHC(data, "DepartamentoName");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var selector = "RGDepartamentosGrafico";

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(Resources("defects_per_deparment")),
                subtitle: Chart.Subtitulo(Resources("unit"), enviar["unitName"]),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "Departamento", dataX),
                    Chart.NC(Nc, GetPopover, null, null, null, "Departamento", dataX),
                    Chart.Av(Av, GetPopover, null, null, null, "Departamento", dataX),
                ]
            })
        }

        function GraficoDepartamentoPorShift(data) {
            pathDirect = 1;
            var dataX = MapeiaValorParaHC(data, "dataX");
            var Name = MapeiaValorParaHC(data, "DepartamentoName");
            var Nc = MapeiaValorParaHC(data, "Nc");
            var Av = MapeiaValorParaHC(data, "Av");
            var Proc = MapeiaValorParaHC(data, "Proc");
            var Shift = MapeiaValorParaHC(data, "Shift");
            var selector = "RGDepartamentosShiftGrafico";

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(Resources("defects_per_deparment") + " | " + Resources("shift")),
                subtitle: Chart.Subtitulo(Resources("unit"), enviar["unitName"]),
                xAxis: Chart.Xaxis(dataX),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(Proc, GetGraficoIndicadorDepartamento),
                    //Chart.NC(Nc, GetGraficoIndicadorDepartamento),
                    //Chart.Av(Av, GetGraficoIndicadorDepartamento),
                    Chart.ProcNc(Proc, GetPopover, null, "DepartamentoShift", Name ,Shift),
                    Chart.NC(Nc, GetPopover, null, null, null, "DepartamentoShift", Name ,Shift),
                    Chart.Av(Av, GetPopover, null, null, null, "DepartamentoShift", Name,Shift),
                ]
            })
        }

        function pathChart(data, nameChart) {
            Subtitle = "";
            if (nameChart == "Unidade") {
                Subtitle += Resources("unit") + ": " + data[0].UnidadeName + " | ";
            }
            if (data.unitId != '' && data.unitId != undefined) {
                Subtitle += Resources("unit") + ": " + $('#unitIdV :selected').text() + " | ";
            }
            if (data.structureId != '' && data.structureId != undefined) {
                Subtitle += Resources("structure") + ": " + $('#structureId :selected').text() + " | ";
            }
            if (data.auditorId != '' && data.auditorId != undefined) {
                if (!$('#auditorId :selected').text() == "All")
                    Subtitle += Resources("auditor") + ": " + $('#auditorId :selected').text() + " | ";
            }
            if (data.criticalLevelId != '' && data.criticalLevelId != undefined) {
                Subtitle += Resources("criticalLevel") + ": " + $('#criticalLevelId :selected').text() + " | ";
            }
            if (data.level1Id != '' && data != undefined && !isNaN(data.level1Id)) {
                Subtitle += Resources("level1") + ": " + $('#level1Idv :selected').text() + " | ";
            }
            if (enviar.level2Id != '' && enviar.level2Id != undefined && !isNaN(enviar.level2Id)) {
                Subtitle += Resources("level2") + ": " + $('#level2Idv :selected').text() + " | ";
            }
            if ((enviar.level3Id != '' && enviar.level3Id != undefined && !isNaN(enviar.level3Id))) {
                Subtitle += Resources("level3") + ": " + $('#level3Idv :selected').text() + " | ";
            }
        }

        function GraficoIndicadorUnidade(data) {

            subtitle = Resources("unit") + ": " + enviar["unitName"];

            if (pathDirect == 1)
                subtitle += " | " + Resources("department") + ": " + enviar["departmentName"];

            if (enviar["shift"] != "" && enviar["shift"] != undefined)
                subtitle += " | " + Resources("shift") + ": " + (enviar["shift"] == 1 ? "1" : "2");


            var nc = MapeiaValorParaHC(data, "Nc");
            var nome = MapeiaValorParaHC(data, "IndicadorName");
            var porc = MapeiaValorParaHC(data, "Proc");
            var qtdAv = MapeiaValorParaHC(data, "Av");
            var meta = MapeiaValorParaHC(data, "Meta");
            var selector = "RGOperacoesGrafico";
            //enviar["level1names"] = nome
            enviar.isLevel = 1

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoIndic),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(porc, GetMonitoramento),
                    //Chart.NC(nc, GetMonitoramento),
                    //Chart.Av(qtdAv, GetMonitoramento),
                    //Chart.Meta(meta, GetMonitoramento),
                    Chart.ProcNc(porc, GetPopover, null, "Indicador", nome),
                    Chart.NC(nc, GetPopover, null, null, null, "Indicador", nome),
                    Chart.Av(qtdAv, GetPopover, null, null, null, "Indicador", nome),
                    Chart.Meta(meta, GetPopover, null, null, null, "Indicador"),
                ]
            })
        }

        function GraficoIndicadorPorShift(data) {

            if (pathDirect == 1)
                subtitle = Resources("unit") + ": " + enviar["unitName"] + " | " + Resources("department") + ": " + enviar["departmentName"];
            else
                subtitle = Resources("unit") + ": " + enviar["unitName"];

            var nc = MapeiaValorParaHC(data, "Nc");
            var dataX = MapeiaValorParaHC(data, "IndicadorName");
            var shift = MapeiaValorParaHC(data, "Shift");
            var nome = MapeiaValorParaHC(data, "dataX");
            var porc = MapeiaValorParaHC(data, "Proc");
            var qtdAv = MapeiaValorParaHC(data, "Av");
            var meta = MapeiaValorParaHC(data, "Meta");
            var selector = "RGOperacoesShiftGrafico";
            //enviar["level1names"] = nome
            enviar.isLevel = 1

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoIndic + " | " + Resources("shift")),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(porc, GetPopover, null, "IndicadorShift", dataX, shift),
                    Chart.NC(nc, GetPopover, null, null, null, "IndicadorShift", dataX, shift),
                    Chart.Av(qtdAv, GetPopover, null, null, null, "IndicadorShift", dataX, shift),
                    Chart.Meta(meta, GetPopover, null, null, null, "IndicadorShift"),
                ]
            })
        }

        function GraficoMonitoramento(data) {

            $('#PanelFull0').show();

            var nc = MapeiaValorParaHC(data, "Nc")
            var nome = MapeiaValorParaHC(data, "MonitoramentoName")
            var qtdAv = MapeiaValorParaHC(data, "Av")
            var porc = MapeiaValorParaHC(data, "Proc")
            var selector = "RGMonitoramentosGrafico";
            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;
            //enviar["level2names"] = nome
            enviar.isLevel = 2;

            subtitle = Resources('unit') + ": " + enviar["unitName"];

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + enviar["departmentName"];

            subtitle += " | " + Resources('level1') + ": " + enviar["level1Name"];

            if (enviar["shift"] != "" && enviar["shift"] != undefined)
                subtitle += " | " + Resources("shift") + ": " + (enviar["shift"] == 1 ? "1" : "2");

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoMon),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    Chart.ProcNc(porc, GetTarefa, null, "", nome),
                    Chart.NC(nc, GetTarefa, null, null, null, "", nome),
                    Chart.Av(qtdAv, GetTarefa, null, null, null, "", nome),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            })


        }

        function GraficoTarefasAcumuladas(data) {

            var nc = MapeiaValorParaHC(data, "Nc")
            var nome = MapeiaValorParaHC(data, "TarefaName")
            //var qtdAv = MapeiaValorParaHC(data, "Av")
            //var porc = MapeiaValorParaHC(data, "Proc")
            var selector = "RGTarefasAcumuladasGrafico";
            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;
            //enviar["level2names"] = nome
            enviar.isLevel = 2;

            subtitle = Resources('unit') + ": " + enviar["unitName"];

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + enviar["departmentName"];

            subtitle += " | " + Resources('level1') + ": " + enviar["level1Name"];

            if (enviar["shift"] != "" && enviar["shift"] != undefined)
                subtitle += " | " + Resources("shift") + ": " + (enviar["shift"] == 1 ? "1" : "2");

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoTarefasAcumuladasTit),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    //Chart.ProcNc(porc, GetTarefa, null, "", nome),
                    Chart.NC(nc, null, null, null, null, "", nome),
                    //Chart.Av(qtdAv, GetTarefa, null, null, null, "", nome),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            })


        }

        function GraficoTarefas(data, monitoramento) {

            $('#PanelFull0').show();

            var nc = MapeiaValorParaHC(data, "Nc")
            var nome = MapeiaValorParaHC(data, "TarefaName")
            var qtdAv = MapeiaValorParaHC(data, "Av")
            var porc = MapeiaValorParaHC(data, "Proc")
            var selector = "RGTarefasGrafico";
            //enviar["level3names"] = nome
            enviar.isLevel = 3;

            subtitle = Resources('unit') + ": " + enviar["unitName"];

            if (pathDirect == 1)
                subtitle += " | " + Resources('department') + ": " + enviar["departmentName"];

            subtitle += " | " + Resources('level1') + ": " + enviar["level1Name"] + " | " + Resources('level2') + ": " + enviar["level2Name"];

            if (enviar["shift"] != "" && enviar["shift"] != undefined)
                subtitle += " | " + Resources("shift") + ": " + (enviar["shift"] == 1 ? "1" : "2");

            var sentido = 'desc';
            var inverse = sentido == 'desc' ? undefined : 1;

            $('#' + selector).empty().highcharts({
                credits: Chart.Credits(),
                chart: Chart.Chart('column', 'xy'),
                title: Chart.Titulo(GraficoTarefa),
                subtitle: {
                    text: subtitle
                },
                xAxis: Chart.Xaxis(nome),
                yAxis: Chart.yAxisPadraoRelNc(),
                legend: {
                    shadow: false
                },
                tooltip: {
                    shared: true
                },
                plotOptions: {
                    column: {
                        shadow: false,
                        borderWidth: 0
                    }
                },
                series: [
                    {
                        name: '% ' + Resources("nonconformity"),
                        color: Chart.CorTotalProcNc(),
                        data: porc,
                        yAxis: 1,
                        tooltip: {
                            valueSuffix: ' %'
                        },
                        dataLabels: Chart.DataLabelPadrao('%'),
                        point: {
                            events: {
                                click: function () {
                                    enviar['level3Name'] = removeFtaDaLabel(this.category);
                                    enviar['PercentualNCFTA'] = porc[this.x];
                                    enviar['ReincidenciaDesvioFTA'] = nc[this.x];
                                    enviar['Evaluated'] = qtdAv[this.x];
                                    enviar['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
                                    enviar['byName'] = true;
                                    $.post(urlGetUnitId, enviar, function(c){
                                        enviar["unitId"] = c.unitId;
                                        //enviar["MetaFTA"] = "0";
                                        RedirecionaParaFTA(enviar);
                                    });
                                    //EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
                                    //RedirecionaParaFTA(enviar);
                                }
                            }
                        },
                        tooltip: {
                            valueDecimals: 2,
                            valueSuffix: ' % (' + Resources("nonconformity") + ' * ' + Resources("weight")
                        }
                    },
                    {
                        name: Resources('nonconformity'),
                        color: Chart.CorTotalNc(),
                        data: nc,
                        yAxis: 0,
                        dataLabels: Chart.DataLabelPadrao(),
                        point: {
                            events: {
                                click: function () {
                                    enviar['level3Name'] = removeFtaDaLabel(this.category);
                                    enviar['PercentualNCFTA'] = porc[this.x];
                                    enviar['ReincidenciaDesvioFTA'] = nc[this.x];
                                    enviar['Evaluated'] = qtdAv[this.x];
                                    enviar['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
                                    enviar['byName'] = true;
                                    $.post(urlGetUnitId, enviar, function(c){
                                        enviar["unitId"] = c.unitId;
                                        //enviar["MetaFTA"] = "0";
                                        RedirecionaParaFTA(enviar);
                                    });
                                    //EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
                                    //RedirecionaParaFTA(enviar);
                                }
                            }
                        },
                        tooltip: {
                            valueDecimals: 2,
                            valueSuffix: ' qtd'
                        }
                    },

                    Chart.Av(qtdAv, function() {}),
                    Chart.curvaPareto(data, nc, 1, inverse)
                ]
            })

        }

        function btnOrdenacao(id, func, btn, sentido) {
            var inputTag = document.createElement("div");
            if (btn == undefined) {
                inputTag.innerHTML = '<input type = "button"  id="Nc"  value="NC " >';
                inputTag.innerHTML += '<input type = "button" id="ProcNc"  value = "% NC " >';
                $("#" + id).empty();
                document.getElementById(id).appendChild(inputTag);
            } else {
                var result = sentido == 'asc' ? "↓": "↑";
                btn[0].value = btn[0].value.replace("↓", "").replace("↑", "");
                btn[0].value = btn[0].value + result;
                $("#" + id + " input").not(btn).val($("#" + id + " input").not(btn).val().replace("↓", "").replace("↑", ""));
            }

            if (sentido == 'asc') {
                $("#" + id + " #Nc").off('click').on("click", function () {
                    func("desc", 0, null, $("#" + id + " #Nc"));
                });
                $("#" + id + " #ProcNc").off('click').on("click", function () {
                    func("desc", 3, null, $("#" + id + " #ProcNc"));
                });
            } else {
                $("#" + id + " #Nc").off('click').on("click", function () {
                    func("asc", 0, null, $("#" + id + " #Nc"));
                })
                $("#" + id + " #ProcNc").off('click').on("click", function () {
                    func("asc", 3, null, $("#" + id + " #ProcNc"));
                })
            }
        }

        function requisitaDadosSGQparaGerarFta(tarefa) {
            enviar['level3Name'] = tarefa;
            enviar['auditorId'] = getCookie("webControlCookie")[0].split('=')[1];
            //enviar['unitId'] =
            EasyAjax(urlGetFta, enviar, RedirecionaParaFTA);
        }

        function setNameTitulos(NomeGrafico){

            if (parseInt(enviar.departmentId) > 0) {
                return NomeGrafico + " | " + Department + ": " + $('#departmentId option:selected').text();
            }else if (enviar['departmentName'] != "" && enviar['departmentName'] != undefined && enviar['departmentName'] != null) {
                return NomeGrafico + " | " + Department + ": " + enviar['departmentName'];
            }else{
                return NomeGrafico
            }
        }

        function setNameSubtitulos(NomeGrafico) {

            if (parseInt(enviar.departmentId) > 0) {
                return Resources('department') + ": " + $('#departmentId option:selected').text();
            } else if (enviar['departmentName'] != "" && enviar['departmentName'] != undefined && enviar['departmentName'] != null) {
                return Resources('department') + ": " + enviar['departmentName'];
            } else {
                return "";
            }
        }

        //http://jsfiddle.net/highcharts/3bDMe/1/
        $('#sort').click(function(chart) {
            chart.series[0].data.sort(function(a, b) {
                return b.y + a.y;
            });

            var newData = {};

            for (var i = 0; i < chart.series[0].data.length; i++) {
                newData.x = i;
                newData.y = chart.series[0].data[i].y;
                newData.color = Highcharts.getOptions().colors[i];

                chart.series[0].data[i].update(newData, false);

                // Workaround:
                chart.legend.colorizeItem(chart.series[0].data[i], chart.series[0].data[i].visible);
            }

            chart.redraw({ duration: 2000 });
        });

        var Chart = {
            criaTitulo:  function(prefix, sufix){
                return prefix + sufix;
            },
            curvaPareto: function (dados, dadosNC, axis, inverse) {

                var totalNC = dadosNC.reduce(function (a, b) { return a + b; }, 0);
                var porcentagemAcumuladaNC  = 0;
                var data = []
                dadosNC.forEach(function (a) {
                    porcentagemAcumuladaNC += a / totalNC * 100;
                    data.push(Math.round(porcentagemAcumuladaNC, 2));
                });

                return {
                    type: 'line',
                    yAxis: 1,
                    name: Resources('pareto_chart'),
                    color: "Red",
                    data: data,
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    },
                    zones: [{
                        value: 80,
                        color: inverse == undefined ? 'Red' : 'Black'
                    }, {
                        color: inverse == undefined ? 'Black' : 'Red'
                    }],
                }
            },
            serie: function (tipo, nomeDaSerie, corDaSerie, dados, suffix, axis, paddin1, padding2, pointFunc,nome, id) {

                var serieType = tipo == undefined ? 'line' : tipo;
                var sufix = suffix == undefined ? '' : suffix
                var padding1 =  0.3;
                var padding2 = -0.2;


                return  {
                    type: serieType,
                    yAxis: 1,
                    name: nomeDaSerie,
                    color: corDaSerie,
                    data: dados,
                    pointPadding: paddin1,
                    pointPlacement: padding2,
                    dataLabels: {
                        enabled: true,
                        color: 'black',
                        align: 'center',
                        style: {
                            fontSize: '10px',
                        }
                    },
                    point: {
                        events: {
                            click: function () {
                                if(typeof (pointFunc) == 'function'){
                                    pointFunc(nome[this.x], id[this.x]);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueSuffix: sufix
                    }
                }


            },
            CorTotalNc: function () { return '#F7BCB0' },
            CorTotalAv: function () { return '#ccc' },
            CorTotalPareto: function () { return '#900000' },
            CorMeta: function () { return '#67D184' },
            CorTotalProcNc: function () { return '#FF6347' },
            Legend: function () {
                return {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom',
                    borderWidth: 0
                };
            },
            ToolTip: function (isShared, isCrosshairs) {
                return {
                    valueDecimals: 2,
                    shared: isShared,
                    crosshairs: isCrosshairs
                }
            },
            Titulo: function (data, sufix) {

                if(!!sufix)
                    data = data + " | " + sufix;

                return {

                    text: data,
                    x: -20 //center
                };

            },
            Subtitulo: function (data, sufix) {

                if (!!sufix)
                    data = data + ": " + sufix;

                return {

                    text: data,
                    x: -20 //center
                };

            },
            Credits: function () {
                return {
                    enabled: false
                }
            },
            Zones: function () {
                return {
                    enabled: false
                }
            },
            Chart: function (tipo, zoon) {
                return {
                    type: tipo,
                    zoomType: (!!zoon) ? zoon : ''
                }
            },
            yAxisPadraoRelNc: function () {

                return [{
                    allowDecimals: false,
                    min: 0,
                    title: {
                        text: Resources('number_samplers')
                    },
                    labels: {
                        format: '{value}',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    },
                }, {
                    allowDecimals: false,
                    labels: {
                        format: '{value} %',
                        style: {
                            color: Highcharts.getOptions().colors[1]
                        }
                    },
                    title: {
                        text: '% ' +  Resources('nonconformity'),
                    },
                    opposite: true
                }];

            },
            Xaxis: function (dados) {
                return [{
                    categories: dados
                }];
            },
            NC: function (data, func, nome, id, funcParaAcumuladas, grafico, arr, arr2) {
                return {
                    name: Resources('nonconformity'),
                    color: Chart.CorTotalNc(),//'rgba(77,143,189,1)',
                    data: data,
                    yAxis: 0,
                    //pointPadding: 0.3,
                    //pointPlacement: -0.2,
                    dataLabels: Chart.DataLabelPadrao(),
                    point: {
                        events: {
                            click: function () {
                                if (!!arr2) {
                                    func(arr[this.x], grafico, arr2[this.x]);
                                } else {
                                    func(arr[this.x], grafico);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' qtd'
                    }
                }

            },
            ProcNc: function (data, func, funcParaAcumuladas, grafico, arr, arr2){
                $.each(data, function(a, b){
                    data[a] = parseFloat(b) > 100 ? 100 : b;
                });
                return {
                    name: '% ' + Resources('nonconformity'),
                    color: Chart.CorTotalProcNc(),//'rgba(240,124,0,1)',
                    data: data,
                    yAxis: 1,
                    tooltip: {
                        valueSuffix: ' %'
                    },
                    //pointPadding: 0.4,
                    //pointPlacement: -0.2,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {
                            click: function () {
                                if (!!arr2) {
                                    func(arr[this.x], grafico, arr2[this.x]);
                                } else {
                                    func(arr[this.x], grafico);
                                }
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' % ('+ Resources('nonconformity') + ' * ' + Resources('weight')
                    }
                };

            },
            Meta: function (data, func, nome, id, funcParaAcumuladas){

                return {
                    visible: false,
                    name: '% ' + Resources('goal'),
                    data: data,
                    color: Chart.CorMeta(),//'rgba(81,207,64,1)',
                    //pointPadding: 0.4,
                    //pointPlacement: 0.4,
                    yAxis: 1,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {
                            click: function () {
                                if(!!func)
                                    func(this.category);
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    }
                };

            },
            Av: function (data, func, nome, id, funcParaAcumuladas, grafico, arr, arr2){

                return {
                    visible: false,
                    name: Resources('evaluation'),
                    data: data,
                    color: Chart.CorTotalAv(),//'rgba(81,207,64,1)',
                    //pointPadding: 0.4,
                    //pointPlacement: 0.2,
                    yAxis: 0,
                    dataLabels: Chart.DataLabelPadrao(),
                    point: {
                        events: {
                            click: function () {
                                if (!!func)
                                    if (!!arr2) {
                                        func(arr[this.x], grafico, arr2[this.x]);
                                    } else {
                                        func(arr[this.x], grafico);
                                    }

                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' qtd'
                    }

                };

            },
            DataLabelPadrao: function (affix) {

                return  {
                    format: !!affix ? '{y:.2f} '+ affix : '{y:.2f}',
                    enabled: true,
                    color: 'black',
                    align: 'center',
                    rotation: 270,
                    x: 2,
                    y: -25,
                    style: {
                        fontSize: '12px',
                        fontWeight: 'Arial'
                    }
                };
            },

        }

        $(document).mousemove(function(e) {
            window.x = e.pageX;
            window.y = e.pageY;
        });

        $('#btnIndicador').on('click', function(){
            popoverMain.addClass('hide');
            if (!IsDepartment) {
                $('#RGDepartamentosGrafico').empty();
                $('#RGDepartamentosShiftGrafico').empty();
                $('#RGOperacoesShiftGrafico').empty();
                enviar['departmentName'] = "";
                GetGraficoIndicadorUnidade(Aux);
            } else {
                $('#RGDepartamentosShiftGrafico').empty();
                $("#PanelFull0").hide();
                GetGraficoIndicadorDepartamento(Aux);
            }
        });

        $('#btnDepartamento').on('click', function(){
            popoverMain.addClass('hide');
            $('#RGOperacoesGrafico').empty();
            $('#RGDepartamentosGrafico').empty();
            $('#RGDepartamentosShiftGrafico').empty();
            $('#RGOperacoesShiftGrafico').empty();
            GetGraficoDepartamento(Aux);
        });

        $('#btnMonitoramento').on('click', function () {
            popoverMain.addClass('hide');
            $('#RGOperacoesShiftGrafico').empty();
            GetMonitoramento(Aux);
        });

        $('#btnTarefasAcumuladas').on('click', function () {
            popoverMain.addClass('hide');
            $('#RGOperacoesShiftGrafico').empty();
            GetTarefasAcumuladas(Aux);
        });

        $('#btnShift').on('click', function () {
            $("#PanelFull0").hide();
            if (desdobramento == "Indicador") {
                $('#RGOperacoesShiftGrafico').empty();
            }

            $('#RGOperacoesShiftGrafico').empty();
            popoverMain.addClass('hide');
            GetGraficoGenerico();
        });

        function hidePopoverItems() {
            $('#btnIndicador').hide();
            $('#btnMonitoramento').hide();
            $('#btnTarefasAcumuladas').hide();
            $('#btnShift').hide();
            $('#btnDepartamento').hide();
        }

        function showPopover1() {
            $('#btnIndicador').show();
            $('#btnDepartamento').show();
        }

        function showPopover2() {
            $('#btnIndicador').show();
            $('#btnShift').show();
        }

        function showPopover3() {
            $('#btnMonitoramento').show();
            $('#btnTarefasAcumuladas').show();
            $('#btnShift').show();
        }

</script>

}
