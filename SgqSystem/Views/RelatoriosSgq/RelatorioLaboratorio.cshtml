@model SgqService.ViewModels.FormularioParaRelatorioViewModel
@using DTO
@{
    Layout = "~\\Views\\Relatorios\\GQ\\Laboratorio\\_FilterReportsLaboratorio.cshtml";
    ViewBag.Title = "Laboratorio";

    var url = Url.Action("Index", "Home");

}

@section Content {

    <style>
        .panel-info {
            border-color: #999;
        }

            .panel-info > .panel-heading {
                background-color: #ccc;
                border-color: #999;
                color: #333;
            }

        .chart-inner {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        #CustomPopover {
            z-index: 1040;
            border-width: 2px;
            padding: 8px;
            border-radius: 2px !important;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            position: absolute;
            background: white;
        }

            #CustomPopover .btn {
                margin-left: 1px;
                margin-right: 1px;
            }

        .geral-note {
            padding: 2px;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            background-color: #ebe9e8;
            text-align: center;
            width: 60%;
            margin: auto;
            margin-bottom: 10px;
        }

        #tituloDesdobramento {
            text-align: center;
            font-size: 20px;
        }

        .matriz {
            min-width: auto !important;
        }

        #container {
            max-width: 100%;
        }

        .select-filter {
            padding-top: 15px;
        }

        .column3 {
            float: left !important;
        }

        .margin-left-6px {
            margin-left: 6px !important;
        }

        .btnExibirEixos {
            float: right;
            display: table;
            height: 100%;
        }

        #btnShowFilterChart {
            float: right;
        }

        #divChangeFilterChart {
            float: left;
        }
    </style>

    <div class="page-content-wrapper">
        <div class="page-content">

            <div class="loader" hidden></div>

            @*Grafico*@
            <div id="filtroGrafico" class="select-filter"></div>
            <div id="container"></div>

            @* Matriz *@
            <div id="placeholder"></div>

            @*Alerta de fim de desdobramento*@
            <div class="alert alert-info" role="alert" id="divAlertFim" hidden></div>

        </div>
    </div>

}


@section Scripts {

    @Scripts.Render("~/Scripts/heatmap.js")

<script type="text/javascript">

    let urlBuscaDados = '@Html.Raw(Url.Action("Get", "api/Laboratorio"))';

    let arrObjDados = [];
    let arrTitulo = [];

    let chart = null;

    function buscarDados() {

        arrObjDados = [];
        arrTitulo = [];

        $('#container').html("");
        $('#placeholder').html("");
        $('#filtroGrafico').html("");

        hideMessage();
        exibirLoader();

        window.scrollTo(0, 0);

        if (!$("#divFilterReports").is(":hidden"))
            toggleDivFilterReports();

        $.ajax({
            data: JSON.stringify(objFiltro),
            url: urlBuscaDados,
            type: 'POST',
            dataType: "JSON",
            success: retornoAjax,
            timeout: 600000,
            contentType: "APPLICATION/JSON; CHARSET=UTF-8",
            error: function (a, b, c) {
                console.log(a);
                console.log(b);
                console.log(c);
                esconderLoader();
            }
        });

    }

    function retornoAjax(data) {

        let linha = "cNmVeiculos";
        let coluna = "cNmRegional";

        esconderLoader();

        if (!data.length) {
            showMessage("Sem dados.");
        } else {
            
            appendChartFilter(Object.keys(data[0]), "cNmVeiculos");
            gerarGrafico(data, "cNmVeiculos");
            gerarMapaCalor(data, 0, linha, coluna, false);
        }
    }

    //Gráfico
    function gerarGrafico(data, serie) {

        const categories = getCategories(data, "dColetaAmostra");
        const series = getSeriesByCategories(data, categories, serie);

        chart = Highcharts.chart('container', {
            chart: {
                type: 'line'
            },
            credits: {
                enabled: false
            },
            title: {
                text: '% DE NC ANÁLISES MICROBIOLÓGICAS POR TIPO DE VEÍCULO'
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: categories
            },
            yAxis: {
                title: {
                    text: '% NC'
                },
                labels: {
                    formatter: function () {
                        return this.value + '%'
                    }
                }
            },
            tooltip: {
                crosshairs: true,
                shared: true
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true,
                        format: '{y} %'
                    },
                    enableMouseTracking: true
                }
            },
            series: series
        });
    }

    //Matriz de calor
    function gerarMapaCalor(data, numeroDesdobramento, linha, coluna) {

        let tituloDesdobramento = "Mapa de Calor " + linha + " por " + coluna + "</br>" + arrTitulo.slice(0, numeroDesdobramento).join(" | ");

        removeDivs(numeroDesdobramento);
        appendDiv(numeroDesdobramento, Object.keys(data[0]), tituloDesdobramento);
        appendDataArr(data, numeroDesdobramento);
        setTituloMatriz(numeroDesdobramento, tituloDesdobramento);
        gerarMatriz(data, numeroDesdobramento, linha, coluna);

        $(`#selectLinha_${numeroDesdobramento}`).val(linha);
        $(`#selectColuna_${numeroDesdobramento}`).val(coluna);

        $(".select-filter select").select2({ width: '245px' });
    }

    //Ultis
    function exibirLoader() {
        $('.loader').show();
    }

    function esconderLoader() {
        $('.loader').hide();
    }

    function getPorcentagem(amostragem, quantidade) {

        amostragem = parseFloat(amostragem);
        quantidade = parseFloat(quantidade);

        let porcentagemNC = (quantidade * 100) / amostragem;

        porcentagemNC = parseFloat((porcentagemNC).toFixed(2));

        return porcentagemNC

    }

    function getCategories(data, categoriesColumDataName) {

        if (!data)
            return [];

        //retornar mes e ano
        const categoriesArr = [... new Set(data.map(x => convertDateToYearMouth(x[categoriesColumDataName])))]

        categoriesArr.sort();

        return categoriesArr;
    }

    function getSeriesByCategories(data, categories, serie) {

        const series = [];

        seriesName = [... new Set(data.map(x => x[serie]))];

        seriesName.forEach((serieName) => { //seriesName

            const obj = {};
            obj.name = serieName;
            obj.data = [];

            categories.forEach((o) => { //datas

                let arrFiltrado = data.filter(x => convertDateToYearMouth(x['dColetaAmostra']) == o && x[serie] == serieName);

                if (arrFiltrado.length == 0) {

                    obj.data.push(null);

                } else {

                    let arrAv = arrFiltrado.map(x => x.AV);
                    let amostragem = arrAv.reduce((accumulator, currentValue) => accumulator + currentValue);
                    let arrNc = arrFiltrado.map(x => x.NC);
                    let qtdNC = arrNc.reduce((accumulator, currentValue) => accumulator + currentValue)

                    obj.data.push(getPorcentagem(amostragem, qtdNC));
                }

            });

            series.push(obj);

        });

        return series;

    }

    function convertDateToYearMouth(date) {

        let mes = (parseInt(new Date(date).getMonth().toString()) + 1).toString();
        let ano = parseInt(new Date(date).getFullYear().toString());

        if (mes.length == 1)
            mes = "0" + mes;

        return ano + "-" + mes;

    }

    function appendDiv(numeroDesdobramento, keys, titulo = "") {

        let options = keys.reduce((accumulator, currentValue) => accumulator += `<option value="${currentValue}">${currentValue}</option>`);

        let botaoTrocarEixos = `<button type="button" id-desdobramento="${numeroDesdobramento}" class="btnChangeEixos btn btn-primary" onclick="changeEixos(this);" title="Trocar eixos">Trocar</button>`;
        let botaoExibirEixos = `<button type="button" id-desdobramento="${numeroDesdobramento}" class="btnExibirEixos btn-sm btn-default" onclick="exibirBtnEixo(this);" title="Avançado"><i class="fa fa-cog"></i></button>`;

        let htmlDiv = `
        <div class="panel panel-primary" id-desdobramento="${numeroDesdobramento}">
            <div class="panel-heading">${botaoExibirEixos} <div class="titulo-desdobramento">${titulo}</div></div>
            <div class="panel-body">
              <div class="row select-filter" select-filter-eixos="${numeroDesdobramento}" hidden>
                    <div class="col-sm-12">
                        <form class="form-inline">
                          <strong>A matriz atual exibirá: </strong>
                          <div class="form-group">
                            <label for="coluna">Linha</label>
                            <select class="form-control" id="selectLinha_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                          <div class="form-group">
                            <label for="coluna">Coluna</label>
                            <select class="form-control" id="selectColuna_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                          <div class="form-group">
                            ${botaoTrocarEixos}
                          </div>
                        </form>
                    </div>
                </div>
                <div class="matriz" id="placeholder_${numeroDesdobramento}" data-numer-div="${numeroDesdobramento}"></div>
                <div class="row select-filter" select-filter>
                    <div class="col-sm-12">
                        <form class="form-inline">
                          <strong>A próxima matriz exibirá: </strong>
                          <div class="form-group">
                            <label for="coluna">Linha</label>
                            <select class="form-control" id="select1_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                          <div class="form-group">
                            <label for="coluna">Coluna</label>
                            <select class="form-control" id="select2_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>`;

        $('#placeholder').append(htmlDiv);
    }

    function removeDivs(numeroDesdobramento) {

        $('#placeholder').find('.matriz').each(function (index) {

            let numeroDiv = parseInt($(this).attr('data-numer-div'));

            if (numeroDiv >= numeroDesdobramento) {
                $(this).remove();
                $("[id-desdobramento=" + numeroDiv + "]").remove();
            }

        });
    }

    function appendDataArr(data, numeroDesdobramento) {

        arrObjDados.splice(numeroDesdobramento, arrObjDados.length);

        arrObjDados[numeroDesdobramento] = data;

    }

    function desdobraMatriz(newData, numeroDesdobramento, linha, coluna) {

        let matrizAnterior = JSON.stringify(arrObjDados[numeroDesdobramento - 1]);
        let matrizAtual = JSON.stringify(newData);

        hideMessage();

        if (matrizAnterior === matrizAtual || newData.length === 0) {
            showMessage("Fim do desdobramento.");
            removeDivs(numeroDesdobramento);
            removeLoading();
            return;
        }

        gerarMapaCalor(newData, numeroDesdobramento, linha, coluna);

    }

    function showMessage(mensagem) {
        $("#divAlertFim").html(mensagem);
        $("#divAlertFim").show()
    }

    function hideMessage() {
        $("#divAlertFim").hide();
    }

    function goScroll(elemId) {

        document.querySelector(elemId).scrollIntoView({ behavior: 'smooth' });
    }

    function enviarFiltro() {
        buscarDados();
    }

    function setTituloArr(titulo, numeroDesdobramento) {

        arrTitulo.splice(numeroDesdobramento, arrTitulo.length);

        arrTitulo.push(titulo);

    }

    function aplicarDistinctNaLista(lista, listaDePropriedades, listaDeValores) {

        return new Promise(async resolve => {

            let listaDistinct = [];

            let arrColuna = await new Promise(resolve => {

                let arrColuna = [... new Set(lista.map(x => x[listaDePropriedades[1]]))];
                arrColuna.sort();

                resolve(arrColuna);

            });

            let arrLinha = await new Promise(resolve => {

                let arrLinha = [... new Set(lista.map(x => x[listaDePropriedades[0]]))];
                arrLinha.sort();
                resolve(arrLinha);
            });

            for (const [index, coluna] of arrColuna.entries()) {

                for (const [index, linha] of arrLinha.entries()) {

                    let arrFiltrados = lista.filter(x => x[listaDePropriedades[1]] == coluna && x[listaDePropriedades[0]] == linha);

                    let qtdeNC = null;
                    let amostragem = null;
                    let percNC = null

                    if (arrFiltrados.length > 0) {
                        qtdeNC = arrFiltrados.map(x => x.NC).reduce((accumulator, currentValue) => accumulator += currentValue);
                        amostragem = arrFiltrados.map(x => x.AV).reduce((accumulator, currentValue) => accumulator += currentValue);
                        percNC = parseFloat(((qtdeNC / amostragem) * 100).toFixed(2));
                    }

                    listaDistinct.push({ [listaDePropriedades[0]]: linha, [listaDePropriedades[1]]: coluna, PercNC: percNC, QtdeNC: qtdeNC, Amostragem: amostragem });

                }

            }

            resolve(listaDistinct);

        });
    }

    $('#btnToggleDivFilterReports').on('click', () => {

        if (chart) {
            chart.reflow();
            chart.redraw();
        }

    });

    function changeEixos(thiss) {

        setLoading(thiss);

        let numeroDesdobramento = parseInt($(thiss).attr("id-desdobramento"));
        let linha = $('#selectLinha_' + numeroDesdobramento + ' :selected').val();
        let coluna = $('#selectColuna_' + numeroDesdobramento + ' :selected').val();

        let data = arrObjDados[numeroDesdobramento];

        let tituloDesdobramento = "Mapa de Calor " + linha + " por " + coluna + "</br>" + arrTitulo.slice(0, numeroDesdobramento).join(" | ");

        setTituloMatriz(numeroDesdobramento, tituloDesdobramento);

        gerarMatriz(data, numeroDesdobramento, linha, coluna);

    }

    function exibirBtnEixo(thiss) {

        const numeroDesdobramento = $(thiss).attr("id-desdobramento");
        const isHidden = $(`[select-filter-eixos="${numeroDesdobramento}"]`).is(":hidden");

        if (isHidden) {
            $(`[select-filter-eixos="${numeroDesdobramento}"]`).show();
        } else {
            $(`[select-filter-eixos="${numeroDesdobramento}"]`).hide();
        }
    }

    function ajustaMatriz(idMatriz) {

        const height = $(idMatriz).find("#listaCabecalho > th:nth-child(1)").css("height");
        const hasOverflow = $(idMatriz).find("#listaInidicador > tr").length > 5;
        const hasoverflowx = $(idMatriz).find("#listaCabecalho > th").length > 6;

        $(idMatriz).find(" > div > div.row.row1.linha > div.column1.removeMargin.titleHeatMap > table > tbody > tr:nth-child(1)").css("height", height);

        $(idMatriz).find("#cabecalhoTotal > tbody > tr:nth-child(1) > th").css("height", height);

        if (hasOverflow && !hasoverflowx) {
            $(idMatriz).find(".column3.removeMargin.titleHeatMap").each(function () {
                $(this).removeClass("removeMargin");
                $(this).addClass("margin-left-6px");
            });
        }
    }

    async function gerarMatriz(data, numeroDesdobramento, linha, coluna) {

        let dados = await aplicarDistinctNaLista(data, [linha, coluna]);

        let w = $('#container').innerWidth();
        let idMatriz = "#placeholder_" + numeroDesdobramento;

        let config = {
            maxWidth: "98%",
            widthColumn1: "18%",
            widthColumn2: "60%",
            widthColumn3: "20%",
            colorMin: "00e600",
            colorMid: "fef104",
            colorMax: "ff0000",
            isGradient: true,
            colorMain: "dddddd",
            colorEmptyTd: "f9f9f9",
            jsonName: "Data",
            valorVazio: "-",
        };

        config.tituloDesdobramento = "";
        config.Cabecalho = `<a class="cabecalho" data-key="${coluna}" data-titulo="{${coluna}}" data-tituloDesdobramento="${config.tituloDesdobramento}">{${coluna}}</a>`;
        config.Indicador = `<a class="indicador" data-key="${linha}" data-titulo="{${linha}}" data-tituloDesdobramento="${config.tituloDesdobramento}">{${linha}}</a>`;
        config.tituloIndicador = linha;
        config.tituloColuna = coluna;
        config.json = dados;
        config.idPlaceholder = idMatriz;
        config.cellWidth = "150";
        config.heatmapType = "line";
        config.Valores = [
            { "title": "% NC", "render": function () { return '<span>{PercNC}</span>'; }, "heatmap": true /*, "groupFunction": "AVG"*/ }
        ];

        HeatMap.Inicializar(config);

        HeatMap.GambiarraDoRenan();

        ajustaMatriz(idMatriz);

        if (numeroDesdobramento > 0)
            goScroll(idMatriz);

        removeLoading();

        //Clique no cabeçalho da Linha
        $(idMatriz).off("click", ".horizontal th .cabecalho").on("click", ".horizontal th .cabecalho", function () {

            setLoading(this);

            let numeroDesdobramento = parseInt($(this).parents(".matriz").attr("data-numer-div"));

            let linha = $('#select1_' + numeroDesdobramento + ' :selected').val();
            let coluna = $('#select2_' + numeroDesdobramento + ' :selected').val();

            let property = $(this).attr('data-key');
            let value = $(this).attr('data-titulo');

            value = value == "-" ? null : value;

            let newData = arrObjDados[numeroDesdobramento].filter(x => x[property] == value);

            setTituloArr(property + ": " + value, numeroDesdobramento);

            numeroDesdobramento = numeroDesdobramento + 1;
            desdobraMatriz(newData, numeroDesdobramento, linha, coluna);

        });

        //Clique no lista da Linha
        $(idMatriz).off("click", "th.esquerda .indicador").on("click", "th.esquerda .indicador", function () {

            setLoading(this);

            let numeroDesdobramento = parseInt($(this).parents(".matriz").attr("data-numer-div"));

            let linha = $('#select1_' + numeroDesdobramento + ' :selected').val();
            let coluna = $('#select2_' + numeroDesdobramento + ' :selected').val();

            let property = $(this).attr('data-key');
            let value = $(this).attr('data-titulo');

            value = value == "-" ? null : value;

            let newData = arrObjDados[numeroDesdobramento].filter(x => x[property] == value);

            setTituloArr(property + ": " + value, numeroDesdobramento);

            numeroDesdobramento = numeroDesdobramento + 1;
            desdobraMatriz(newData, numeroDesdobramento, linha, coluna);

        });

        //Clique no meio da matriz
        $(idMatriz).off("click", "#listaValores td").on("click", "#listaValores td", function () {

            setLoading(this);

            let indicadorNumero = parseInt($(this).attr("data-indicador")) + 1;
            let cabecalhoNumero = parseInt($(this).attr("data-cabecalho")) + 1;

            let numeroDesdobramento = parseInt($(this).parents(".matriz").attr("data-numer-div"));

            let linha = $('#select1_' + numeroDesdobramento + ' :selected').val();
            let coluna = $('#select2_' + numeroDesdobramento + ' :selected').val();

            let propertyLinha = $("#placeholder_" + numeroDesdobramento + " #listaInidicador > tr:nth-child(" + indicadorNumero + ") > th > a").attr('data-key');
            let valueLinha = $("#placeholder_" + numeroDesdobramento + " #listaInidicador > tr:nth-child(" + indicadorNumero + ") > th > a").attr('data-titulo');
            let propertyColuna = $("#placeholder_" + numeroDesdobramento + " #listaCabecalho > th:nth-child(" + cabecalhoNumero + ") > a").attr('data-key');
            let valueColuna = $("#placeholder_" + numeroDesdobramento + " #listaCabecalho > th:nth-child(" + cabecalhoNumero + ") > a").attr('data-titulo');

            let newData = arrObjDados[numeroDesdobramento].filter(x => x[propertyLinha] == valueLinha && x[propertyColuna] == valueColuna);

            setTituloArr(propertyLinha + ": " + valueLinha + " | " + propertyColuna + ": " + valueColuna, numeroDesdobramento);

            numeroDesdobramento = numeroDesdobramento + 1;
            desdobraMatriz(newData, numeroDesdobramento, linha, coluna);

        });

    }

    function setTituloMatriz(numeroDesdobramento, tituloDesdobramento) {

        $(`[id-desdobramento="${numeroDesdobramento}"] .titulo-desdobramento`).html(tituloDesdobramento);

    }

    let elementLoading = null;

    async function setLoading(elem) {

        elementLoading = $(elem);

        $(elementLoading).button('loading');

    }

    async function removeLoading() {
        if (elementLoading)
            $(elementLoading).button('reset');

    }

    function appendChartFilter(keys, preSelected) {

        let options = keys.reduce((accumulator, currentValue) => accumulator += `<option value="${currentValue}" ${currentValue == preSelected ? "selected" : ""} >${currentValue}</option>`);

        let html = `<div id="divChangeFilterChart" hidden>
                        <select id="select-filter-chart">
                        ${options}
                        <select id="select-filter-chart">
                        <button type="button" onclick="changeFilterChart(this);" class="btn btn-primary" id="btnChangeFilterChart" title="Trocar Serie">Trocar</button>
                    </div>
                    <button type="button" onclick="showFilterChart();" class="btn-sm btn-default" id="btnShowFilterChart" title="Avançado"><i class="fa fa-cog"></i></button>`;

        $("#filtroGrafico").html(html);

    }

    function changeFilterChart(thiss) {

        let dados = arrObjDados[0];
        let serie = $(thiss).parent().find('#select-filter-chart option:selected').val();

        gerarGrafico(dados, serie);
        
    }

    function showFilterChart() {

        if ($("#divChangeFilterChart").is(":hidden")) {
            $("#divChangeFilterChart").show();

        } else {
            $("#divChangeFilterChart").hide();

        }
    }

</script>

}
