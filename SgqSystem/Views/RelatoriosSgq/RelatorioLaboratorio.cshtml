@model SgqService.ViewModels.FormularioParaRelatorioViewModel
@using DTO
@{
    Layout = "~\\Views\\Relatorios\\GQ\\Laboratorio\\_FilterReportsLaboratorio.cshtml";
    ViewBag.Title = "Laboratorio";

    var url = Url.Action("Index", "Home");

}

@section Content {

    <style>
        .panel-info {
            border-color: #999;
        }

            .panel-info > .panel-heading {
                background-color: #ccc;
                border-color: #999;
                color: #333;
            }

        .chart-inner {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        #CustomPopover {
            z-index: 1040;
            border-width: 2px;
            padding: 8px;
            border-radius: 2px !important;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            position: absolute;
            background: white;
        }

            #CustomPopover .btn {
                margin-left: 1px;
                margin-right: 1px;
            }

        .geral-note {
            padding: 2px;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            background-color: #ebe9e8;
            text-align: center;
            width: 60%;
            margin: auto;
            margin-bottom: 10px;
        }

        #tituloDesdobramento {
            text-align: center;
            font-size: 20px;
        }
    </style>

    <div class="page-content-wrapper">
        <div class="page-content">
            <div class="loader" hidden></div>

            @*Grafico*@
            <div id="container"></div>

            @* Matriz *@
            <div id="placeholder">

            </div>

            @*Alerta de fim de desdobramento*@
            <div class="alert alert-info" role="alert" id="divAlertFim" hidden>
                Fim do desdobramento.
            </div>
        </div>
    </div>

}


@section Scripts {

    @Scripts.Render("~/Scripts/heatmap.js")

<script type="text/javascript">

    let urlBuscaDados = '@Html.Raw(Url.Action("Get", "api/Laboratorio"))';

    let arrObjDados = [];

    function buscarDados() {

        arrObjDados = [];

        exibirLoader();

        window.scrollTo(0, 0);

        if (!$("#divFilterReports").is(":hidden"))
            toggleDivFilterReports();

        $.ajax({
            data: JSON.stringify(objFiltro.Param),
            url: urlBuscaDados,
            type: 'POST',
            contentType: "application/json",
            success: retornoAjax,
            timeout: 600000,
            contentType: "APPLICATION/JSON; CHARSET=UTF-8",
            error: function (a, b, c) {
                console.log(a);
                console.log(b);
                console.log(c);
                esconderLoader();
            }
        });

    }

    function retornoAjax(data) {

        let linha = "cNmTpColeta";
        let coluna = "cSgEmpresa";

        esconderLoader();
        gerarGrafico(data);
        gerarMapaCalor(data, 0, linha, coluna);
        hideMensagemFimDesdobramento();

    }

    //Gráfico
    function gerarGrafico(data) {

        const categories = getCategories(data, "dColetaAmostra");
        const series = getSeriesByCategories(data, categories);

        Highcharts.chart('container', {
            chart: {
                type: 'line'
            },
            title: {
                text: '% DE NC ANÁLISES MICROBIOLÓGICAS POR TIPO DE VEÍCULO'
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: categories
            },
            yAxis: {
                title: {
                    text: ''
                }
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true
                    },
                    enableMouseTracking: false
                }
            },
            series: series
        });
    }

    //Matriz de calor
    function gerarMapaCalor(data, numeroDesdobramento, linha, coluna) {

        let tituloDesdobramento = "Mapa de Calor " + linha + " por " + coluna;

        removeDivs(numeroDesdobramento);
        appendDiv(numeroDesdobramento, Object.keys(data[0]), tituloDesdobramento);
        appendDataArr(data, numeroDesdobramento);

        let w = $('#container').innerWidth();
        let idMatriz = "#placeholder_" + numeroDesdobramento;

        let config = {
            maxWidth: w * .98,
            widthColumn1: (w * .1) + "px",
            widthColumn2: (w * .65) + "px",
            widthColumn3: (w * .2) + "px",
            colorMin: "00e600",
            colorMid: "fef104",
            colorMax: "ff0000",
            isGradient: true,
            colorMain: "dddddd",
            colorEmptyTd: "f9f9f9",
            jsonName: "Data",
            valorVazio: "-",
        };

        config.tituloDesdobramento = "";
        config.Cabecalho = "<a class='cabecalho' data-titulo='{" + coluna + "}' data-tituloDesdobramento='" + config.tituloDesdobramento + "'>{" + coluna +"}</a>";
        config.Indicador = "<a class='indicador' data-key='" + linha +"' data-titulo='{" + linha + "}' data-tituloDesdobramento='" + config.tituloDesdobramento + "'>{" + linha +"}</a>";
        config.tituloIndicador = linha;
        config.tituloColuna = coluna;
        config.json = data;
        config.idPlaceholder = idMatriz;
        config.cellWidth = "66";
        config.heatmapType = "line";
        config.Valores = [
            { "title": "% NC", "render": function () { return '<span>{nValor1}</span>'; }, "heatmap": true, "groupFunction": "AVG" }
        ];

        HeatMap.Inicializar(config);

        if (numeroDesdobramento > 0)
            goScroll(idMatriz);

        $(idMatriz).off("click", "th.esquerda .indicador").on("click", "th.esquerda .indicador", function () {

            let numeroDesdobramento = parseInt($(this).parents(".matriz").attr("data-numer-div"));

            let linha = $('#select1_' + numeroDesdobramento + ' :selected').val();
            let coluna = $('#select2_' + numeroDesdobramento + ' :selected').val();

            let property = $(this).attr('data-key');
            let value = $(this).attr('data-titulo');

            let newData = arrObjDados[numeroDesdobramento].filter(x => x[property] == value);

            numeroDesdobramento = numeroDesdobramento + 1;

            desdobraMatriz(newData, numeroDesdobramento, linha, coluna);
        });
    }

    //Ultis
    function exibirLoader() {
        $('.loader').show();
    }

    function esconderLoader() {
        $('.loader').hide();
    }

    function getPorcentagem(amostragem, quantidade) {

        amostragem = parseFloat(amostragem);
        quantidade = parseFloat(quantidade);

        return (quantidade * 100) / amostragem;

    }

    function getCategories(data, categoriesColumDataName) {

        if (!data)
            return [];

        //retornar mes e ano
        const categoriesArr = [... new Set(data.map(x => convertDateToYearMouth(x[categoriesColumDataName])))]

        categoriesArr.sort();

        return categoriesArr;
    }

    function getSeriesByCategories(data, categories) {

        const series = [];

        seriesName = [... new Set(data.map(x => x["cNmTpColeta"]))];

        seriesName.forEach((serieName) => { //seriesName

            const obj = {};
            obj.name = serieName;
            obj.data = [];

            categories.forEach((o) => { //datas

                let arrFiltrado = data.filter(x => convertDateToYearMouth(x['dColetaAmostra']) == o && x["cNmTpColeta"] == serieName);

                if (arrFiltrado.length == 0) {

                    obj.data.push(null);

                } else {

                    arrFiltrado = arrFiltrado.map(x => x.nValor1);

                    let qtdNC = arrFiltrado.reduce((accumulator, currentValue) => accumulator + currentValue)

                    obj.data.push(getPorcentagem(data.length, qtdNC));
                }

            });

            series.push(obj);

        });

        return series;

    }

    function convertDateToYearMouth(date) {

        let mes = new Date(date).getMonth().toString() + 1;
        let ano = new Date(date).getFullYear().toString();

        if (mes.length == 1)
            mes = "0" + mes;

        return ano + "-" + mes;

    }

    function appendDiv(numeroDesdobramento, keys, titulo = "") {

        let options = keys.reduce((accumulator, currentValue) => accumulator += `<option value="${currentValue}">${currentValue}</option>`)

        let htmlDiv = `
        <div class="panel panel-primary" id-desdobramento="${numeroDesdobramento}">
            <div class="panel-heading">${titulo}g</div>
            <div class="panel-body">
                <div class="row" select-filter>
                    <div class="col-sm-12">
                        <form class="form-inline">
                          <strong>A próxima matriz exibirá: </strong>
                          <div class="form-group">
                            <label for="coluna">Linha</label>
                            <select class="form-control" id="select1_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                          <div class="form-group">
                            <label for="coluna">Coluna</label>
                            <select class="form-control" id="select2_${numeroDesdobramento}">
                            ${options}
                            </select>
                          </div>
                        </form>
                    </div>
                </div>
                <div class="matriz" id="placeholder_${numeroDesdobramento}" data-numer-div="${numeroDesdobramento }">

                </div>
            </div>
        </div>`;

        $('#placeholder').append(htmlDiv);
    }

    function removeDivs(numeroDesdobramento) {

        $('#placeholder').find('.matriz').each(function (index) {

            let numeroDiv = parseInt($(this).attr('data-numer-div'));

            if (numeroDiv >= numeroDesdobramento) {
                $(this).remove();
                $("[id-desdobramento=" + numeroDiv + "]").remove();
            }

        });
    }

    function appendDataArr(data, numeroDesdobramento) {

        arrObjDados.splice(numeroDesdobramento, arrObjDados.length);

        arrObjDados[numeroDesdobramento] = data;

    }

    function desdobraMatriz(newData, numeroDesdobramento, linha, coluna) {

        let matrizAnterior = JSON.stringify(arrObjDados[numeroDesdobramento - 1]);
        let matrizAtual = JSON.stringify(newData);

        hideMensagemFimDesdobramento();

        if (matrizAnterior === matrizAtual) {
            showMensagemFimDesdobramento();
            return;
        }

        gerarMapaCalor(newData, numeroDesdobramento, linha, coluna);

    }

    function showMensagemFimDesdobramento() {

        $("#divAlertFim").show();

    }

    function hideMensagemFimDesdobramento() {

        $("#divAlertFim").hide();

    }

    function goScroll(elemId) {

        document.querySelector(elemId).scrollIntoView({ behavior: 'smooth' });
    }


    function enviarFiltro() {
        buscarDados();
    }

</script>

}
