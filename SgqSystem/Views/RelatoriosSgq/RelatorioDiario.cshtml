@model SgqSystem.ViewModels.FormularioParaRelatorioViewModel
@{
    ViewBag.Title = "RelatorioDiario";
    var url = Url.Action("Index", "Home");
    var urlGrafico1 = Url.Action("Grafico1", "api/RelDiario");
    var urlGraficoLevel1 = Url.Action("GraficoLevel1", "api/RelDiario");
    var urlGraficoLevel2 = Url.Action("GraficoLevel2", "api/RelDiario");
    var urlGraficoLevel3 = Url.Action("GraficoLevel3", "api/RelDiario");
}

<style>
    .panel-info {
        border-color: #999;
    }

        .panel-info > .panel-heading {
            background-color: #ccc;
            border-color: #999;
            color: #333;
        }
</style>

<div class="page-content" style="min-height: 600px;">
    @Html.Partial("~/Views/Shared/_FormToQueryFullScreen.cshtml")

    <div id="formBodyContent">
        @Html.Partial("~/Views/Shared/_mensagemObrigatorio.cshtml")
        <div id="load"></div>
        <div id="plotPrincipal"></div>
        <div class="panel panel-info" id="PanelFull" style="display:none">
            <div class="panel-heading"></div>
            <div class="panel-body" id="g1">
            </div>
            *O Peso atribuído as Tarefas influenciam no resultado gráfico.
        </div>
        @*<table id="results" class="display" cellspacing="0" style="width:100%"></table>*@
    </div>
</div>

@section Scripts {


    <script type="text/javascript">


        var url1 = '@Html.Raw(@urlGrafico1)';
        var urlGraficoLevel1 = '@Html.Raw(@urlGraficoLevel1)';
        var $btn = $('#btnSend');
        $('#simpleCallendar').hide().attr('disabled', true);

        $(document).ready(function () {
            $("#btnSend").click(function (e) {
                Send();
            });
        });

        function Send() {
            $btn.button('loading');
            $('#results').empty();

            if (!ValidaDadosParaEnvio()) {
                $btn.button('reset');
                return;
            }

            $('#plotPrincipal').empty();
            //Auxiliares.loading("load", "btnCarregaGraficoDiario");

            //Preenche dados para o FTA.
            FTA._unidadeId = $('#Unidade').val(),
            FTA._dataInicio = $('#dataInicio').val(),
            FTA._dataFim = FTA._dataInicio,

            //AJAX
            $.post(url1, enviar, function (r) {
                try {
                    var retornoArray = [];
                    var arrayItarator = r.Retorno;
                    $('#menu-toggle').click();
                    CriaGraficos(r);

                    r.forEach(function (o, c) {

                        var divClonada = $('#PanelFull').clone();
                        divClonada.attr('id', divClonada.attr('id') + c).show();
                        divClonada.find('.panel-body').attr('id', divClonada.find('.panel-body').attr('id') + c);
                        var idDivTendencia = divClonada.find('.panel-body').attr('id');
                        $('#plotPrincipal').append(divClonada);
                        var div = DivManager.criaDiv(idDivTendencia, c, "temperatura");
                        //Cria o Panel, Clona o mesmo e troca os IDs

                        //Grafico Tendencia.
                        divClonada.find('.panel-heading').html(o.Level1Name); // Insere Titulo no Panel
                        //RelDiario.Tendencia(result, div, a);//Processa e cria grafico

                    });

                } catch (e) {
                    console.log(e);
                } finally {
                    $btn.button('reset');
                    //Hotfix: table não alinha resultados de centro no meio da tr....
                }

            }).fail(function (e, h, x) {
                //closeLoader();
                $btn.button('reset');
                if (e.status == 0) {
                    GuardJs.exibirMensagemAlerta("Não foi possivel buscar os dados: " + e.statusText);
                } else {
                    GuardJs.exibirMensagemAlerta("Não foi possivel buscar os dados: " + e.responseJSON.Message);
                }
                //openMessageModal("Alerta", e.responseJSON.Message);
            });
        };

        function CriaGraficos(retornoArray) {

            GraficoInicialLeTodosLevel1(retornoArray);


        }

        function MapeiaValorParaHC(array, prop) {
            var arrayRetorno = $.map(array, function (o, c) {
                return o[prop];
            });
            return arrayRetorno;
        }

        function GraficoInicialLeTodosLevel1(data) {

            var valoresX = MapeiaValorParaHC(data, "Level1Name")
            var meta = MapeiaValorParaHC(data, "Meta")
            var nc = MapeiaValorParaHC(data, "TotalNC")
            var percentual = MapeiaValorParaHC(data, "NCProc")
            var totalAvaliado = MapeiaValorParaHC(data, "TotalAv")

            //Cria GRafico
            $('#plotPrincipal').empty().highcharts({
                credits: Chart.Credits(),
                title: Chart.Titulo("NC Por Indicador"),
                xAxis: Chart.Xaxis(valoresX),
                tooltip: Chart.ToolTip(true, true),
                legend: Chart.Legend(),
                yAxis: Chart.yAxisPadrao(),
                chart: {
                    type: 'column',
                    zoomType: 'x, y',
                    height: '350'
                },
                zones: [{
                    value: 69,
                    color: '#FF6666'
                }, {
                    value: 80,
                    color: 'Yellow'
                }, {
                    color: '#98FB98'
                }],
                series: [
                    Chart.ProcNc(percentual),
                    Chart.Meta(meta, true),
                    //, Chart.SimpleSerie(valoresY.meta, "% Meta", Chart.CorMeta(), true, 0, ' %')
                    Chart.SimpleSerie(nc, "Total NC", Chart.CorTotalNc(), false, 1),
                    Chart.SimpleSerie(totalAvaliado, "Total Av", Chart.CorTotalAv(), false, 1)
                ],
            });

        }

        function GafricoLevel1(idLEvel1) {

            $.post("", function (data) {

                var valoresX = MapeiaValorParaHC(data, "Name")
                var NC = MapeiaValorParaHC(data, "Nc")
                var TotalAvaliado = MapeiaValorParaHC(data, "Av")

                Auxiliares.loading(idDiv);

                //Organiza dados do grafico
                var pareto = []
                //Pareto
                var totalNC = 0;
                var totalNC = NC.reduce(function (a, b) { return a + b; }, 0);
                var porcentagemAcumuladaNC = 0;
                NC.forEach(function (a) {
                    porcentagemAcumuladaNC += a / totalNC * 100;
                    pareto.push(Math.round(porcentagemAcumuladaNC, 0));
                });
                //Fim PAreto
                ////////////////////////////////////////////

                //Cria Grafico
                $('#' + idDiv).empty().highcharts({
                    credits: Chart.Credits(),
                    title: Chart.Titulo(titulo),
                    xAxis: Chart.Xaxis(valoresX),
                    tooltip: Chart.ToolTip(true, true),
                    legend: Chart.Legend(),
                    yAxis: Chart.yAxisPadrao(true, true, true),
                    chart: {
                        type: 'column',
                        zoomType: 'x, y'
                    },
                    zones: [{
                        value: 69,
                        color: '#FF6666'
                    }, {
                        value: 80,
                        color: 'Yellow'
                    }, {
                        color: '#98FB98'
                    }],
                    series: [
                          Chart.SimpleSerie(NC, "Total NC", Chart.CorTotalNc(), true)
                        , Chart.SimpleSerie(TotalAvaliado, 'Total Av', Chart.CorTotalAv(), true)
                        , Chart.curvaPareto(pareto)
                    ],
                });
            });

        }

        function GraficoTendencia(data, idDiv, titulo, dtInicio, dtFim) {

            var valoresX = MapeiaValorParaHC(data, "Level1Name")
            var meta = MapeiaValorParaHC(data, "Meta")
            var totalNC = MapeiaValorParaHC(data, "TotalNC")
            var percentual = MapeiaValorParaHC(data, "NCProc")
            var totalAvaliado = MapeiaValorParaHC(data, "TotalAv")

            var from = $("#dataInicio").val().split("/");
            var dataSelecionada = new Date(from[2], from[1] - 1, from[0]);
            var tNcProc = 0;
            var total = 0;
            var dataFim = new Date(parseInt(dtFim.replace(/[^0-9]/g, '')));

            valoresYY = {
                dataInicio: new Date(parseInt(dtInicio.replace(/[^0-9]/g, ''))),
                metaEstatica: meta[0],
                NC: [],
                totalNC: [],
                ProcNC: [],
                totalAvaliado: [],
                linhaTendencia: [],
                ContaTA: [],
                ContaNC: [],
            };

            data[0].Data[0].forEach(function (a, i) {
                var dia = parseInt(a.replace(/[^0-9]/g, ''));
                //dia = new Date(dia).setHours(0,0,0,0);
                var lastDay = new Date(dataSelecionada.getFullYear(), dataSelecionada.getMonth(), 0);
                if (i == 0) {
                    valoresYY.ContaNC.push([Date.UTC(dataSelecionada.getFullYear(), dataSelecionada.getMonth() - 1, 1), null]);;
                }

                tNcProc += data[0].NC[0][i];
                total += data[0].TotalAvaliado[0][i];

                valoresYY.totalNC.push([dia, tNcProc]),
                valoresYY.ContaTA.push([dia, total]),
                valoresYY.ContaNC.push([dia, tNcProc]),

                valoresYY.ProcNC.push([dia, parseFloat(data[0].Percentual[0][i].toFixed(2))]);
                valoresYY.totalAvaliado.push([dia, data[0].TotalAvaliado[0][i]]);
                valoresYY.NC.push([dia, data[0].NC[0][i]]);
            });

            var inicio = new Date(parseInt(dtInicio.replace(/[^0-9]/g, '')));
            var fim = new Date(parseInt(dtFim.replace(/[^0-9]/g, '')));

            var valorTA = 0;
            var valorNC = 0;
            while (inicio <= fim) {

                var dt = inicio.setDate(inicio.getDate());

                valoresYY.ContaTA.forEach(function (a, i) {

                    if (new Date(a[0]).toLocaleDateString() == new Date(dt).toLocaleDateString()) {
                        valorTA = a[1];
                        return;//AAAAAAAAAAAAAAAAAAAAAAAAA
                    }
                });

                valoresYY.ContaNC.forEach(function (a, i) {
                    if (new Date(a[0]).toLocaleDateString() == new Date(dt).toLocaleDateString()) {
                        valorNC = a[1];
                        return;
                    }
                });

                var calculo = valorTA == 0 ? 0 : valorNC / valorTA * 100;
                calculo = parseFloat(calculo.toFixed(2));
                var primeiroDia = new Date(dataInicioDate.getFullYear(), dataInicioDate.getMonth(), 1);

                if (inicio >= primeiroDia) {
                    valoresYY.linhaTendencia.push([dt, calculo]);
                } else {
                    valoresYY.linhaTendencia.push([dt, null]);
                }

                inicio.setDate(inicio.getDate() + 1)
            }

            $('#' + idDiv).highcharts({
                credits: Chart.Credits(),
                title: Chart.Titulo(titulo),
                legend: Chart.Legend(),
                chart: {
                    type: 'column',
                    zoomType: 'x, y'
                },
                tooltip: {
                    crosshairs: true,
                    shared: true,
                    valueSuffix: ''
                },
                xAxis: {
                    type: "datetime",
                    tickInterval: 24 * 3600 * 1000,
                    labels: {
                        rotation: -45,
                        align: 'right'
                    },
                    dateTimeLabelFormats: { // don't display the dummy year
                        day: '%e. %b',
                    },

                },
                yAxis: [{
                    // Primary yAxis
                    //min: 0,
                    //max: 100,
                    labels: {
                        format: '{value} %',
                        style: {
                            color: "Black"
                        }
                    },
                    title: {
                        text: '% NC',
                        style: {
                            color: "Black"
                        }
                    }, plotLines: [{
                        value: valoresYY.metaEstatica,
                        width: 2,
                        color: 'black',
                        dashStyle: 'dash',
                        zIndex: 4,
                        label: {
                            text: 'Meta %' + valoresYY.metaEstatica,
                            align: 'right',
                            y: -10,
                            x: 0
                        }
                    }],

                }, { // Secondary yAxis
                    gridLineWidth: 0,
                    title: {
                        text: 'Numero Amostras',
                        style: {
                            color: "Black"
                        }
                    },
                    labels: {
                        format: '{value}',
                        style: {
                            color: "Black"
                        }
                    },
                    opposite: true
                }],
                series: [{
                    yAxis: 0,
                    name: '% NC',
                    color: Chart.CorTotalProcNc(),
                    data: valoresYY.ProcNC,
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' % (NC * Peso)'
                    },
                    //pointStart: Date.UTC(valoresYY.dataInicio.getFullYear(), valoresYY.dataInicio.getMonth(), 1),
                    dataLabels: Chart.DataLabelPadrao('%'),
                    //{
                    //        format: '{y:.2f} %',
                    //        enabled: true,
                    //        color: 'black',
                    //        align: 'center',
                    //        style: {
                    //            fontSize: '10px',
                    //        },
                    ////formatter: function () {
                    //    if (this.y > 0) {
                    //        return this.y + ' %';
                    //    } else {
                    //        return "";
                    //    }
                    //},
                    //},
                },
            {
                type: 'spline',
                name: 'Tendencia Acumulada',
                color: Chart.CorTotalPareto(),
                data: valoresYY.linhaTendencia,
                yAxis: 0,
                marker: {
                    enabled: false
                },
                zones: [{
                    value: valoresYY.metaEstatica,
                    color: 'Black'
                }, {
                    color: 'Red'
                }],
                tooltip: {
                    valueDecimals: 2,
                    valueSuffix: ' %'
                },
                //pointStart: Date.UTC(valoresYY.dataInicio.getFullYear(), valoresYY.dataInicio.getMonth(), 1),
            },
            {
                yAxis: 1,
                name: 'Total NC',
                color: Chart.CorTotalNc(),
                data: valoresYY.NC,
                visible: false,
                //pointStart: Date.UTC(valoresYY.dataInicio.getFullYear(), valoresYY.dataInicio.getMonth(), 1),
                dataLabels: {
                    enabled: true,
                    color: 'black',
                    align: 'center',
                    rotation: 270,
                    x: 2,
                    y: -25,
                    style: {
                        fontSize: '12px',
                        fontWeight: 'Arial'
                    },
                    formatter: function () {
                        if (this.y > 0) {
                            return this.y;
                        } else {
                            return "";
                        }
                    },
                }
            },
            {
                yAxis: 1,
                name: 'Total Av',
                data: valoresYY.totalAvaliado,
                color: Chart.CorTotalAv(),
                visible: false,
                //pointStart: Date.UTC(valoresYY.dataInicio.getFullYear(), valoresYY.dataInicio.getMonth(), 1),
                dataLabels: {
                    enabled: true,
                    color: 'black',
                    align: 'center',
                    rotation: 270,
                    x: 2,
                    y: -25,
                    style: {
                        fontSize: '12px',
                        fontWeight: 'Arial'
                    },
                    formatter: function () {
                        if (this.y > 0) {
                            return this.y;
                        } else {
                            return "";
                        }
                    },
                }
            }],
                plotOptions: {
                    series: {
                        //stacking: 'normal',
                        pointRange: 24 * 3600 * 1000, // one day
                        pointStart: valoresYY.start,
                    }
                }
            });
        }


        function ValidaDadosParaEnvio() {
            GuardJs.resetForValidation();
            GuardJs.CheckRangeDateTime(enviar.endDate, enviar.startDate, "Initial date", "End date");
            /*Especifico*/
            if (!($('#unitId :selected').val() > 0)) {
                GuardJs.exibirMensagemAlerta("Por favor selecione uma unidade.");
                return false;
            }
            if (!GuardJs.isValid)
                return !GuardJs.isValid;
            GuardJs.esconderMensagem();

            return true;
        }

        $(document).ready(function () {
            formControl.showFullCallendar();
            formControl.showUnit();
        });

        var Chart = {
            CorTotalNc: function () { return '#F7BCB0' },
            CorTotalAv: function () { return '#ccc' },
            CorTotalPareto: function () { return '#900000' },
            CorMeta: function () { return '#67D184' },
            CorTotalProcNc: function () { return '#FF6347' },
            Legend: function () {
                return {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom',
                    borderWidth: 0
                };
            },
            ToolTip: function (isShared, isCrosshairs) {
                return {
                    //valueDecimals: 2,
                    shared: isShared,
                    crosshairs: isCrosshairs
                }
            },
            Titulo: function (data) {
                return {
                    text: data,
                    x: -20 //center
                };
            },
            Credits: function () {
                return {
                    enabled: false
                }
            },
            Zones: function () {
                return {
                    enabled: false
                }
            },
            Chart: function (tipo, zoon) {
                return {
                    type: tipo,
                    zoomType: zoon
                }
            },
            yAxisPadrao: function (inverso, pareto, totalNC) {
                if (inverso == undefined) {
                    return [{ // Primary yAxis
                        allowDecimals: false,
                        min: 0,
                        max: 100,
                        //tickInterval: 20,
                        labels: {
                            format: '{value} %',
                            style: {
                                color: "Black"
                            }
                        },
                        title: {
                            text: (pareto == undefined || pareto == false) ? '% NC' : 'Gráfico de Pareto',
                            style: {
                                color: "Black"
                            }
                        },
                    }, { // Secondary yAxis
                        allowDecimals: false,
                        gridLineWidth: 0,
                        title: {
                            text: (totalNC == undefined || totalNC == false) ? 'Numero Amostras' : 'Total NC',
                            style: {
                                color: "Black"
                            }
                        },
                        labels: {
                            format: '{value}',
                            style: {
                                color: "Black"
                            }
                        },
                        opposite: true,
                    }]
                } else {
                    return [{ // Primary yAxis
                        gridLineWidth: 0,
                        title: {
                            text: (totalNC == undefined || totalNC == false) ? 'Numero Amostras' : 'Total NC',
                            style: {
                                color: "Black"
                            }
                        },
                        labels: {
                            format: '{value}',
                            style: {
                                color: "Black"
                            }
                        },

                    }, { // Secondary yAxis
                        min: 0,
                        max: 100,
                        //tickInterval: 20,
                        labels: {
                            format: '{value} %',
                            style: {
                                color: "Black"
                            }
                        },
                        title: {
                            text: (pareto == undefined || pareto == false) ? '% NC' : 'Gráfico de Pareto',
                            style: {
                                color: "Black"
                            }
                        },
                        opposite: true
                    }]
                }
            },
            Xaxis: function (dados) {
                return [{
                    categories: dados
                }];
            },

            //Series
            SimpleSerie: function (data, name, color, isVisible, axy, toolTip, hasAlign, hasEventPoint, dadosFunc) {
                return {
                    name: name,
                    data: data,
                    color: color,
                    yAxis: axy || 0,
                    visible: isVisible == undefined ? false : isVisible,
                    dataLabels: Chart.DataLabelPadrao(undefined, hasAlign),
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: toolTip == undefined ? '' : toolTip,
                    },
                    point: {
                        events: {
                            click: function () {
                                if (!!hasEventPoint)
                                    FTA.onFormAnomaliaClickedNC(dadosFunc[0], dadosFunc[1], dadosFunc[2]);
                            }
                        }
                    }
                }
            },

            //Series com %
            curvaPareto: function (dados) {
                return {
                    type: 'line',
                    yAxis: 1,
                    name: 'Gráfico de Pareto',
                    color: "Red",
                    data: dados,
                    yAxis: 1,
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    },
                    zones: [{
                        value: 80,
                        color: 'Red'
                    }, {
                        color: 'Black'
                    }],
                }
            },
            ProcNc: function (data, func, nome, id, funcParaAcumuladas) {
                //$.each(data, function(a, b){
                //    data[a] = parseFloat(b.toFixed(2));
                //});
                return {
                    name: '% NC',
                    color: Chart.CorTotalProcNc(),//'rgba(240,124,0,1)',
                    data: data,
                    yAxis: 0,
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    },
                    //pointPadding: 0.4,
                    //pointPlacement: -0.2,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {
                            click: function () {
                                if (!!func)
                                    func(nome[this.x], id[this.x]);
                                if (!!funcParaAcumuladas && id[this.x] != '0')
                                    funcParaAcumuladas(this.category, id[this.x]);
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' % (NC * Peso)'
                    }
                };

            },
            Meta: function (data, isVisible, func, nome, id, funcParaAcumuladas) {

                return {
                    visible: !!isVisible,
                    name: '% Meta',
                    data: data,
                    color: Chart.CorMeta(),//'rgba(81,207,64,1)',
                    //pointPadding: 0.4,
                    //pointPlacement: 0.4,
                    yAxis: 0,
                    dataLabels: Chart.DataLabelPadrao('%'),
                    point: {
                        events: {

                            click: function () {
                                if (!!func)
                                    func(nome[this.x], id[this.x]);
                                if (!!funcParaAcumuladas && id[this.x] != '0')
                                    funcParaAcumuladas(this.category, id[this.x]);
                            }
                        }
                    },
                    tooltip: {
                        valueDecimals: 2,
                        valueSuffix: ' %'
                    }
                };

            },

            DataLabelPadrao: function (affix, hasAlign) {

                return {
                    format: !!affix ? '{y:.2f} ' + affix : '{y:.2f}',
                    enabled: true,
                    rotation: 270,
                    x: 2,
                    y: -25,
                    align: 'center',//!!hasAlign ? 'center' : hasAlign,
                    color: 'black',
                    align: 'center',
                    style: {
                        fontSize: '10px',
                        fontWeight: 'Arial'
                    }
                };
            },
        };

        var FTA = {
            _unidadeId: '',
            _dataInicio: '',
            _dataFim: '',
            onFormAnomaliaClickedNC: function (operacao, monitoramento, tarefa) {
                //tratar modal
                JBS_MODAL.modalConfirmacao("Gerar Formulario de Anomalias?", function () {
                    $.ajax({
                        url: '../FormularioTratamentoAnomalia/Index/',
                        data: {
                            unidadeId: FTA._unidadeId,
                            operacaoId: operacao,
                            monitoramento: tarefa,
                            tarefaId: monitoramento,
                            dataInicio: FTA._dataInicio,
                            dataFim: FTA._dataFim
                        },
                        complete: function () {
                            window.location = this.url;
                        }
                    })
                }
                )
            },
        };
    </script>

}
